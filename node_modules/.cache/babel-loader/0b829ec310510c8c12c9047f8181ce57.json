{"ast":null,"code":"import axios from \"axios\";\nimport settings from \"../settings\";\nimport { history } from \"../index\";\nconst REQUEST_METHOD = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PATCH: \"PATCH\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\"\n};\n/**\n * @class\n * @description This service class handles all REST Calls\n */\n\nclass HttpServiceClass {\n  /**\n   * @function\n   * @description Init the axios library and register the interceptors.\n   */\n  constructor() {\n    this.service = void 0;\n\n    this.setAuthToken = (token, stayLoggedIn = false) => {\n      this.service.defaults.headers.common.Authorization = token ? `Token ${token}` : \"\";\n\n      if (stayLoggedIn) {\n        localStorage.setItem(\"authToken\", token);\n      } else {\n        sessionStorage.setItem(\"authToken\", token);\n      }\n    };\n\n    this.removeAuthToken = () => {\n      delete this.service.defaults.headers.common.Authorization;\n      localStorage.removeItem(\"authToken\");\n      sessionStorage.removeItem(\"authToken\");\n    };\n\n    this.unauthorizedHandler = () => {\n      this.removeAuthToken();\n\n      if (window.location.pathname !== \"/\") {\n        history.push(\"/login/\");\n      } // Possibly routing to login\n\n    };\n\n    this.handleRequest = (method, path, data = {}, params = {\n      master: Ä\n    }, noCache = false) => {\n      return this.service.request({\n        url: `${settings.REACT_APP_API_URL}${path}`,\n        method,\n        data,\n        params: { ...params,\n          ts: noCache ? Date.now() : null\n        }\n      }).catch(this.handleError);\n    };\n\n    this.handleError = error => {\n      console.log(error);\n\n      if (error.response) {\n        switch (error.response.status) {\n          case 401:\n            this.unauthorizedHandler();\n            break;\n\n          default:\n            break;\n        }\n\n        return Promise.reject(error);\n      } // Possibly toaster or log error\n\n\n      return Promise.reject(error);\n    };\n\n    this.get = (path, params = {}, noCache = false) => this.handleRequest(REQUEST_METHOD.GET, path, {}, params, noCache);\n\n    this.patch = (path, data) => this.handleRequest(REQUEST_METHOD.PATCH, path, data);\n\n    this.put = (path, data) => this.handleRequest(REQUEST_METHOD.PUT, path, data);\n\n    this.post = (path, data) => this.handleRequest(REQUEST_METHOD.POST, path, data);\n\n    this.delete = (path, data) => this.handleRequest(REQUEST_METHOD.DELETE, path, data);\n\n    this.service = axios.create({\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      } // withCredentials: true,\n\n    }); // The AuthToken is set after login. If the user was already loaded on init, we need to set it.\n\n    if (localStorage.getItem(\"authToken\")) {\n      this.setAuthToken(localStorage.getItem(\"authToken\"), true);\n    } else if (sessionStorage.getItem(\"authToken\")) {\n      this.setAuthToken(sessionStorage.getItem(\"authToken\"));\n    }\n  }\n  /**\n   * @function\n   * @description Set the auth token in the request header. Call this after successful login.\n   * @param {string} token is a token string.\n   * @param {boolean} stayLoggedIn logged in.\n   */\n\n\n}\n\nexport const storedAuthToken = () => localStorage.getItem(\"authToken\") || sessionStorage.getItem(\"authToken\");\nconst HttpService = new HttpServiceClass();\nexport default HttpService;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/http.tsx"],"names":["axios","settings","history","REQUEST_METHOD","GET","POST","PATCH","PUT","DELETE","HttpServiceClass","constructor","service","setAuthToken","token","stayLoggedIn","defaults","headers","common","Authorization","localStorage","setItem","sessionStorage","removeAuthToken","removeItem","unauthorizedHandler","window","location","pathname","push","handleRequest","method","path","data","params","master","Ä","noCache","request","url","REACT_APP_API_URL","ts","Date","now","catch","handleError","error","console","log","response","status","Promise","reject","get","patch","put","post","delete","create","getItem","storedAuthToken","HttpService"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport settings from \"../settings\";\nimport { history } from \"../index\";\n\nconst REQUEST_METHOD = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PATCH: \"PATCH\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\",\n};\n\n/**\n * @class\n * @description This service class handles all REST Calls\n */\nclass HttpServiceClass {\n  service: any;\n  /**\n   * @function\n   * @description Init the axios library and register the interceptors.\n   */\n  constructor() {\n    this.service = axios.create({\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      // withCredentials: true,\n    });\n\n    // The AuthToken is set after login. If the user was already loaded on init, we need to set it.\n    if (localStorage.getItem(\"authToken\")) {\n      this.setAuthToken(localStorage.getItem(\"authToken\"), true);\n    } else if (sessionStorage.getItem(\"authToken\")) {\n      this.setAuthToken(sessionStorage.getItem(\"authToken\"));\n    }\n  }\n\n  /**\n   * @function\n   * @description Set the auth token in the request header. Call this after successful login.\n   * @param {string} token is a token string.\n   * @param {boolean} stayLoggedIn logged in.\n   */\n  setAuthToken = (token, stayLoggedIn = false) => {\n    this.service.defaults.headers.common.Authorization = token\n      ? `Token ${token}`\n      : \"\";\n\n    if (stayLoggedIn) {\n      localStorage.setItem(\"authToken\", token);\n    } else {\n      sessionStorage.setItem(\"authToken\", token);\n    }\n  };\n\n  /**\n   * @function\n   * @description Removes the auth token in the header. Call this after logout.\n   */\n  removeAuthToken = () => {\n    delete this.service.defaults.headers.common.Authorization;\n    localStorage.removeItem(\"authToken\");\n    sessionStorage.removeItem(\"authToken\");\n  };\n\n  /**\n   * @function\n   * @description Handles unauthorized request, redirects to login\n   */\n  unauthorizedHandler = () => {\n    this.removeAuthToken();\n    if (window.location.pathname !== \"/\") {\n      history.push(\"/login/\");\n    }\n    // Possibly routing to login\n  };\n\n  /**\n   * @description Method to handle the request by method.\n   * @param method {string} th request method type.\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {*} data is an object with API data.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  handleRequest = (\n    method,\n    path,\n    data = {},\n    params = { master: Ä },\n    noCache = false\n  ) => {\n    return this.service\n      .request({\n        url: `${settings.REACT_APP_API_URL}${path}`,\n        method,\n        data,\n        params: { ...params, ts: noCache ? Date.now() : null },\n      })\n      .catch(this.handleError);\n  };\n  /**\n   * @function\n   * @description Interceptor for the error response\n   * @param {Object} error is a object with the error response from API.\n   * @return {*}\n   */\n  handleError = (error) => {\n    console.log(error);\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          this.unauthorizedHandler();\n          break;\n        default:\n          break;\n      }\n\n      return Promise.reject(error);\n    }\n\n    // Possibly toaster or log error\n\n    return Promise.reject(error);\n  };\n\n  /**\n   * @function\n   * @description Fires the get request\n   * @param {string} path is a string of API path.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {*}\n   */\n  get = (path, params = {}, noCache = false) =>\n    this.handleRequest(REQUEST_METHOD.GET, path, {}, params, noCache);\n\n  /**\n   * @function\n   * @description Fires the patch request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  patch = (path, data) => this.handleRequest(REQUEST_METHOD.PATCH, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  put = (path, data) => this.handleRequest(REQUEST_METHOD.PUT, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  post = (path, data) => this.handleRequest(REQUEST_METHOD.POST, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  delete = (path, data) =>\n    this.handleRequest(REQUEST_METHOD.DELETE, path, data);\n}\n\nexport const storedAuthToken = () =>\n  localStorage.getItem(\"authToken\") || sessionStorage.getItem(\"authToken\");\n\nconst HttpService = new HttpServiceClass();\n\nexport default HttpService;\n"]},"metadata":{},"sourceType":"module"}