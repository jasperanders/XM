{"ast":null,"code":"import { v4 } from \"uuid\";\n// ============== Task 01 ===================\nconst question_01_body = {\n  questionBodyId: v4(),\n  title: \"That is the Question\",\n  text: \"What does the Fox say?\"\n};\nconst answer_01_body = {\n  answerBodyId: v4(),\n  answerText: \"\"\n};\nconst question_01 = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  bodyId: question_01_body.questionBodyId,\n  timeLimitMs: 5000\n};\nconst answer_01 = {\n  answerId: v4(),\n  questionId: question_01.questionId,\n  bodyId: answer_01_body.answerBodyId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false\n}; // ============== Task 02 ===================\n\nconst question_02_body = {\n  questionBodyId: v4(),\n  title: \"Even better Question\",\n  text: \"How many roads must a man walk down?\"\n};\nconst answer_02_body = {\n  answerBodyId: v4(),\n  answerText: \"\"\n};\nconst question_02 = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  bodyId: question_02_body.questionBodyId,\n  timeLimitMs: 5000\n};\nconst answer_02 = {\n  answerId: v4(),\n  questionId: question_02.questionId,\n  bodyId: answer_02_body.answerBodyId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false\n}; // ============== Task 03 ===================\n\nconst question_03_body = {\n  questionBodyId: v4(),\n  title: \"Your choice\",\n  text: \"Yes or No?\",\n  possibleAnswers: [\"Yes\", \"No\"]\n};\nconst answer_03_body = {\n  answerBodyId: v4(),\n  selectedAnswers: []\n};\nconst question_03 = {\n  questionId: v4(),\n  questionType: \"multipleChoice\",\n  bodyId: question_03_body.questionBodyId,\n  timeLimitMs: 5000\n};\nconst answer_03 = {\n  answerId: v4(),\n  questionId: question_03.questionId,\n  bodyId: answer_03_body.answerBodyId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false\n}; // =============== exam_01 ===========\n\nconst exam_01 = {\n  examId: v4(),\n  name: \"Platform Economy\",\n  questionsById: [question_01.questionId, question_02.questionId, question_03.questionId]\n}; // =============== tables ================\n\nconst questionTable = {\n  byId: {\n    [question_01.questionId]: question_01,\n    [question_02.questionId]: question_02,\n    [question_03.questionId]: question_03\n  },\n  allIds: [question_01.questionId, question_02.questionId, question_03.questionId]\n};\nconst answerTable;\nconst examTable = {\n  byId: {\n    [exam_01.examId]: exam_01\n  },\n  allIds: [exam_01.examId]\n}; // =========================================\n// =========================================\n// =========================================\n\nexport const initialExam = {\n  byId: {\n    exam_01: {\n      id: \"exam_01\",\n      name: \"Platform Economy\",\n      questionsById: [\"question_01\", \"question_03\", \"question_02\"]\n    }\n  },\n  allIds: [\"exam_01\"],\n  currentExam: {\n    id: \"exam_01\",\n    currentQuestionIndex: 0\n  }\n};\nexport const initialQuestions = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionTitle: \"General Question\",\n      questionText: \"What does the fox say?\",\n      answerType: \"freeText\",\n      answerText: \"quest01\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionTitle: \"General Question\",\n      questionText: \"How many roads must a man walk down?\",\n      answerType: \"freeText\",\n      answerText: \"quest02\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false\n    }\n  },\n  allIds: [\"question_01\", \"question_02\"]\n};\nexport const initialMultipleChoiceQuestions = {\n  byId: {\n    question_03: {\n      questionId: \"question_03\",\n      questionTitle: \"\",\n      questionText: \"Ja, oder Nein\",\n      answerType: \"multipleChoice\",\n      possibleAnswers: [\"Ja\", \"Nein\"],\n      answerSelection: [],\n      timeLimit: 51,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false\n    }\n  },\n  allIds: [\"question_03\"]\n};\nexport const initialQuestionTypes = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionType: \"freeTextQuestion\"\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionType: \"freeTextQuestion\"\n    },\n    question_03: {\n      questionId: \"question_03\",\n      questionType: \"multipleChoiceQuestion\"\n    }\n  },\n  allIds: [\"question_01\", \"question_02\", \"question_03\"]\n};\nexport const initialAppState = {\n  currentTime: null,\n  timerIsActive: true\n};","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/initialState.ts"],"names":["v4","question_01_body","questionBodyId","title","text","answer_01_body","answerBodyId","answerText","question_01","questionId","questionType","bodyId","timeLimitMs","answer_01","answerId","timeStart","timeEnd","timeExpired","question_02_body","answer_02_body","question_02","answer_02","question_03_body","possibleAnswers","answer_03_body","selectedAnswers","question_03","answer_03","exam_01","examId","name","questionsById","questionTable","byId","allIds","answerTable","examTable","initialExam","id","currentExam","currentQuestionIndex","initialQuestions","questionTitle","questionText","answerType","timeLimit","timeUsed","initialMultipleChoiceQuestions","answerSelection","initialQuestionTypes","initialAppState","currentTime","timerIsActive"],"mappings":"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","sourcesContent":["import { v4 } from \"uuid\";\nimport {\n  TQuestion,\n  TQuestionBodyFreeText,\n  TQuestionBodyMultipleChoice,\n  TAnswerBodyFreeText,\n  TAnswerBodyMultipleChoice,\n  TAnswer,\n  TExam,\n  TQuestionTable,\n  TExamTable,\n} from \"../types/exam\";\n\n// ============== Task 01 ===================\n\nconst question_01_body: TQuestionBodyFreeText = {\n  questionBodyId: v4(),\n  title: \"That is the Question\",\n  text: \"What does the Fox say?\",\n};\n\nconst answer_01_body: TAnswerBodyFreeText = {\n  answerBodyId: v4(),\n  answerText: \"\",\n};\n\nconst question_01: TQuestion = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  bodyId: question_01_body.questionBodyId,\n  timeLimitMs: 5000,\n};\n\nconst answer_01: TAnswer = {\n  answerId: v4(),\n  questionId: question_01.questionId,\n  bodyId: answer_01_body.answerBodyId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false,\n};\n\n// ============== Task 02 ===================\n\nconst question_02_body: TQuestionBodyFreeText = {\n  questionBodyId: v4(),\n  title: \"Even better Question\",\n  text: \"How many roads must a man walk down?\",\n};\n\nconst answer_02_body: TAnswerBodyFreeText = {\n  answerBodyId: v4(),\n  answerText: \"\",\n};\n\nconst question_02: TQuestion = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  bodyId: question_02_body.questionBodyId,\n  timeLimitMs: 5000,\n};\n\nconst answer_02: TAnswer = {\n  answerId: v4(),\n  questionId: question_02.questionId,\n  bodyId: answer_02_body.answerBodyId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false,\n};\n\n// ============== Task 03 ===================\n\nconst question_03_body: TQuestionBodyMultipleChoice = {\n  questionBodyId: v4(),\n  title: \"Your choice\",\n  text: \"Yes or No?\",\n  possibleAnswers: [\"Yes\", \"No\"],\n};\n\nconst answer_03_body: TAnswerBodyMultipleChoice = {\n  answerBodyId: v4(),\n  selectedAnswers: [],\n};\n\nconst question_03: TQuestion = {\n  questionId: v4(),\n  questionType: \"multipleChoice\",\n  bodyId: question_03_body.questionBodyId,\n  timeLimitMs: 5000,\n};\n\nconst answer_03: TAnswer = {\n  answerId: v4(),\n  questionId: question_03.questionId,\n  bodyId: answer_03_body.answerBodyId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false,\n};\n\n// =============== exam_01 ===========\n\nconst exam_01: TExam = {\n  examId: v4(),\n  name: \"Platform Economy\",\n  questionsById: [\n    question_01.questionId,\n    question_02.questionId,\n    question_03.questionId,\n  ],\n};\n\n// =============== tables ================\n\nconst questionTable: TQuestionTable = {\n  byId: {\n    [question_01.questionId]: question_01,\n    [question_02.questionId]: question_02,\n    [question_03.questionId]: question_03,\n  },\n  allIds: [\n    question_01.questionId,\n    question_02.questionId,\n    question_03.questionId,\n  ],\n};\n\nconst answerTable: T\n\nconst examTable: TExamTable = {\n  byId: {\n    [exam_01.examId]: exam_01,\n  },\n  allIds: [exam_01.examId],\n};\n\n// =========================================\n// =========================================\n// =========================================\n\nexport const initialExam: TExamState = {\n  byId: {\n    exam_01: {\n      id: \"exam_01\",\n      name: \"Platform Economy\",\n      questionsById: [\"question_01\", \"question_03\", \"question_02\"],\n    },\n  },\n  allIds: [\"exam_01\"],\n  currentExam: {\n    id: \"exam_01\",\n    currentQuestionIndex: 0,\n  },\n};\n\nexport const initialQuestions: TFreeTextQuestionState = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionTitle: \"General Question\",\n      questionText: \"What does the fox say?\",\n      answerType: \"freeText\",\n      answerText: \"quest01\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionTitle: \"General Question\",\n      questionText: \"How many roads must a man walk down?\",\n      answerType: \"freeText\",\n      answerText: \"quest02\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n  },\n  allIds: [\"question_01\", \"question_02\"],\n};\n\nexport const initialMultipleChoiceQuestions: TMultipleChoiceQuestionState = {\n  byId: {\n    question_03: {\n      questionId: \"question_03\",\n      questionTitle: \"\",\n      questionText: \"Ja, oder Nein\",\n      answerType: \"multipleChoice\",\n      possibleAnswers: [\"Ja\", \"Nein\"],\n      answerSelection: [],\n      timeLimit: 51,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n  },\n  allIds: [\"question_03\"],\n};\n\nexport const initialQuestionTypes: TQuestionTypes = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionType: \"freeTextQuestion\",\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionType: \"freeTextQuestion\",\n    },\n    question_03: {\n      questionId: \"question_03\",\n      questionType: \"multipleChoiceQuestion\",\n    },\n  },\n  allIds: [\"question_01\", \"question_02\", \"question_03\"],\n};\n\nexport const initialAppState = {\n  currentTime: null,\n  timerIsActive: true,\n};\n"]},"metadata":{},"sourceType":"module"}