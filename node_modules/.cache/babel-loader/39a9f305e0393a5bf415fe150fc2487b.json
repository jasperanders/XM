{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/userContext.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const UserContext = React.createContext({\n  user: {\n    _id: null\n  },\n  loadUser: () => {},\n  wipeUser: () => {},\n  setUser: value => {}\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [user, setUser] = useState({\n    _id: null\n  });\n  useEffect(() => {\n    loadUser();\n  }, []);\n  /**\n   * the loadUser function returns a promise, because we want to wait for the state to be set, before anything else\n   * happens. The state is only set only when there isn't already a user loaded and if an authtoken lies in the\n   * session storage. Otherwise the promise is resolved, without doing anything other.\n   * If an user is already loaded, we don't need to make an API-call, we just resolve the promise.\n   *\n   * The loadUser function does not return a user but loads the user into the UserContext.\n   * @returns {Promise<any>}\n   */\n\n  const loadUser = () => {\n    const authToken = storedAuthToken();\n\n    if (!user._id && authToken) {\n      return HttpService.get(apiRoutes.USER_ME, authToken).then(({\n        data\n      }) => {\n        console.log(data);\n        setUser(data);\n      }).catch(() => false);\n    }\n\n    return new Promise(resolve => resolve());\n  };\n\n  const wipeUser = () => {\n    HttpService.removeAuthToken();\n    setUser({\n      _id: null\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(UserContext.Provider, {\n      value: {\n        user,\n        setUser,\n        loadUser,\n        wipeUser\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }, children, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: wipeUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, \"Logout\"))\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/userContext.tsx"],"names":["React","useState","useEffect","HttpService","storedAuthToken","apiRoutes","UserContext","createContext","user","_id","loadUser","wipeUser","setUser","value","UserContextProvider","children","authToken","get","USER_ME","then","data","console","log","catch","Promise","resolve","removeAuthToken"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAoDC,SAApD,QAAqE,OAArE;AAGA,OAAOC,WAAP,IAAsBC,eAAtB,QAA6C,QAA7C;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoB;AAC7CC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAE;AAAP,GADuC;AAE7CC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAF2B;AAG7CC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAH2B;AAI7CC,EAAAA,OAAO,EAAGC,KAAD,IAAW,CAAE;AAJuB,CAApB,CAApB;AAOP,eAAe,SAASC,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACxD,QAAM,CAACP,IAAD,EAAOI,OAAP,IAAkBX,QAAQ,CAAC;AAC/BQ,IAAAA,GAAG,EAAE;AAD0B,GAAD,CAAhC;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA;;;;;;;;;;AASA,QAAMA,QAAQ,GAAG,MAAM;AACrB,UAAMM,SAAS,GAAGZ,eAAe,EAAjC;;AACA,QAAI,CAACI,IAAI,CAACC,GAAN,IAAaO,SAAjB,EAA4B;AAC1B,aAAOb,WAAW,CAACc,GAAZ,CAAgBZ,SAAS,CAACa,OAA1B,EAAmCF,SAAnC,EACJG,IADI,CACC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAR,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,OAJI,EAKJG,KALI,CAKE,MAAM,KALR,CAAP;AAMD;;AACD,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaA,OAAO,EAAhC,CAAP;AACD,GAXD;;AAaA,QAAMd,QAAQ,GAAG,MAAM;AACrBR,IAAAA,WAAW,CAACuB,eAAZ;AACAd,IAAAA,OAAO,CAAC;AACNH,MAAAA,GAAG,EAAE;AADC,KAAD,CAAP;AAGD,GALD;;AAOA;AAAA;AACE;AACA;AACA;AACA;AACA,wBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,IADK;AAELI,QAAAA,OAFK;AAGLF,QAAAA,QAHK;AAILC,QAAAA;AAJK,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQGI,QARH,eASE;AAAQ,MAAA,OAAO,EAAEJ,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AALF;AAiBD","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const UserContext = React.createContext({\n  user: { _id: null },\n  loadUser: () => {},\n  wipeUser: () => {},\n  setUser: (value) => {},\n});\n\nexport default function UserContextProvider({ children }) {\n  const [user, setUser] = useState({\n    _id: null,\n  });\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  /**\n   * the loadUser function returns a promise, because we want to wait for the state to be set, before anything else\n   * happens. The state is only set only when there isn't already a user loaded and if an authtoken lies in the\n   * session storage. Otherwise the promise is resolved, without doing anything other.\n   * If an user is already loaded, we don't need to make an API-call, we just resolve the promise.\n   *\n   * The loadUser function does not return a user but loads the user into the UserContext.\n   * @returns {Promise<any>}\n   */\n  const loadUser = () => {\n    const authToken = storedAuthToken();\n    if (!user._id && authToken) {\n      return HttpService.get(apiRoutes.USER_ME, authToken)\n        .then(({ data }) => {\n          console.log(data);\n          setUser(data);\n        })\n        .catch(() => false);\n    }\n    return new Promise((resolve) => resolve());\n  };\n\n  const wipeUser = () => {\n    HttpService.removeAuthToken();\n    setUser({\n      _id: null,\n    });\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <UserContext.Provider\n      value={{\n        user,\n        setUser,\n        loadUser,\n        wipeUser,\n      }}\n    >\n      {children}\n      <button onClick={wipeUser}>Logout</button>\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}