{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nexport default function Timer({\n  question\n}) {\n  const dispatch = useDispatch(); // const timeLimit = useSelector(\n  //   (state: TRootState) => state.questions.byId[questionId].timeLimit\n  // // );\n  // const { timerIsActive, currentTime } = useSelector(\n  //   (state: TRootState) => state.appState\n  // );\n\n  const {\n    timeStart,\n    timeLimit,\n    questionId\n  } = question;\n  const now = Date.now();\n  const [timeLeft, setTimeLeft] = useState(timeStart ? Math.trunc(timeLimit - (now - timeStart) / 1000) : timeLimit); // const dispatchSetAppTimer = (payload) => dispatch(setAppTimer(payload));\n  // const dispatchCountDownAppTimer = (payload) =>\n  //   dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now(); // const timeStart = store.getState().questions.byId[questionId].timeStart;\n\n      setTimeLeft(Math.trunc(timeLimit - (now - timeStart) / 1000));\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }\n  }, \"Time remaining: \", timeLeft);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","useDispatch","Timer","question","dispatch","timeStart","timeLimit","questionId","now","Date","timeLeft","setTimeLeft","Math","trunc","interval","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAsBC,WAAtB,QAAyC,aAAzC;AASA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAqC;AAClD,QAAMC,QAAQ,GAAGH,WAAW,EAA5B,CADkD,CAElD;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM;AAAEI,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MAAuCJ,QAA7C;AAEA,QAAMK,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CACtCK,SAAS,GAAGO,IAAI,CAACC,KAAL,CAAWP,SAAS,GAAG,CAACE,GAAG,GAAGH,SAAP,IAAoB,IAA3C,CAAH,GAAsDC,SADzB,CAAxC,CAZkD,CAgBlD;AACA;AACA;;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAMP,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CADiC,CAEjC;;AACAG,MAAAA,WAAW,CAACC,IAAI,CAACC,KAAL,CAAWP,SAAS,GAAG,CAACE,GAAG,GAAGH,SAAP,IAAoB,IAA3C,CAAD,CAAX;AACD,KAJ2B,EAIzB,IAJyB,CAA5B;AAMA,WAAO,MAAM;AACXW,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAFD;AAGD,GAVQ,EAUN,CAACX,QAAQ,CAACI,UAAV,CAVM,CAAT;AAYA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAsBG,QAAtB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TRootState, TQuestion } from \"../../types/exam\";\nimport {\n  setAppTimer,\n  countDownAppTimer,\n  setQuestionStartTime,\n} from \"../../redux/actions\";\nimport { store } from \"../../index\";\n\nexport default function Timer({ question }: TProps) {\n  const dispatch = useDispatch();\n  // const timeLimit = useSelector(\n  //   (state: TRootState) => state.questions.byId[questionId].timeLimit\n  // // );\n  // const { timerIsActive, currentTime } = useSelector(\n  //   (state: TRootState) => state.appState\n  // );\n\n  const { timeStart, timeLimit, questionId } = question;\n\n  const now = Date.now();\n  const [timeLeft, setTimeLeft] = useState(\n    timeStart ? Math.trunc(timeLimit - (now - timeStart) / 1000) : timeLimit\n  );\n\n  // const dispatchSetAppTimer = (payload) => dispatch(setAppTimer(payload));\n  // const dispatchCountDownAppTimer = (payload) =>\n  //   dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now();\n      // const timeStart = store.getState().questions.byId[questionId].timeStart;\n      setTimeLeft(Math.trunc(timeLimit - (now - timeStart) / 1000));\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId]);\n\n  return <div>Time remaining: {timeLeft}</div>;\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}