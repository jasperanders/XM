{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nexport default function MakeMultipleChoice({\n  getValues,\n  handleSubmit,\n  makeQuestion,\n  questionId,\n  register,\n  reset\n}) {\n  /**\n   * React Hooks\n   */\n  const [multipleChoiceState, setMultipleChoiceState] = useState({\n    title: \"\",\n    text: \"\",\n    possibleAnswers: [\"\", \"\"]\n  });\n  /**\n   * Redux Hooks\n   */\n\n  const questionTable = useSelector(state => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(state => state.questionBodyMultipleChoiceTable);\n  /**\n   * Form Hook\n   */\n\n  /**\n   * Effect\n   *\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMultipleChoiceState({\n        title: questionTable.byId[questionId].title,\n        text: questionTable.byId[questionId].text,\n        possibleAnswers: questionBodyMultipleChoiceTable.byId[questionId].possibleAnswers\n      });\n    } else {\n      setMultipleChoiceState({\n        title: \"\",\n        text: \"\",\n        possibleAnswers: [\"\", \"\"]\n      });\n    }\n  }, [questionId]);\n  useEffect(() => {\n    reset();\n  }, [multipleChoiceState.possibleAnswers]);\n  /**\n   * Functions\n   */\n\n  const onSubmit = data => {\n    const questionData;\n  };\n\n  const {\n    possibleAnswers,\n    title,\n    text\n  } = multipleChoiceState;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    name: \"questionTitle\",\n    placeholder: \"Provide a Question Title here\",\n    defaultValue: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Textarea, {\n    rows: 5,\n    name: \"questionText\",\n    placeholder: \"Provide a question here.\",\n    ref: register,\n    defaultValue: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      flexGrow: 0\n    },\n    onClick: () => {\n      setMultipleChoiceState(old => ({ ...old,\n        possibleAnswers: [...old.possibleAnswers, \"\"]\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Add Answer\"), possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      style: {\n        marginTop: \"0.5rem\",\n        alignContent: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Flex, {\n      sx: {\n        flexDirection: \"row\",\n        alignSelf: \"stretch\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      sx: {\n        marginTop: \"0.5rem\"\n      },\n      defaultChecked: false,\n      name: `multipleChoiceAnswer_[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      ref: register,\n      name: `multipleChoiceAnswerText_[${index}]`,\n      placeholder: \"Provide an Answer\",\n      defaultValue: possibleAnswer ? possibleAnswer : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      sx: {\n        margin: \"0\",\n        marginLeft: \"0.5rem\"\n      },\n      variant: \"warning\",\n      onClick: () => {\n        setMultipleChoiceState(old => {\n          old.possibleAnswers.splice(index, 1);\n          return old;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \"x\")));\n  }), /*#__PURE__*/React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      marginRight: \"0.5rem\"\n    },\n    variant: \"warning\",\n    onClick: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx"],"names":["React","useState","useEffect","useSelector","v4","Textarea","Button","Input","Flex","Label","Checkbox","MakeMultipleChoice","getValues","handleSubmit","makeQuestion","questionId","register","reset","multipleChoiceState","setMultipleChoiceState","title","text","possibleAnswers","questionTable","state","questionBodyMultipleChoiceTable","byId","onSubmit","data","questionData","flexDirection","alignItems","flexGrow","old","map","possibleAnswer","index","marginTop","alignContent","alignSelf","margin","marginLeft","splice","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\n\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\n\nexport default function MakeMultipleChoice({\n  getValues,\n  handleSubmit,\n  makeQuestion,\n  questionId,\n  register,\n  reset,\n}) {\n  /**\n   * React Hooks\n   */\n\n  const [multipleChoiceState, setMultipleChoiceState] = useState({\n    title: \"\",\n    text: \"\",\n    possibleAnswers: [\"\", \"\"],\n  });\n\n  /**\n   * Redux Hooks\n   */\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  /**\n   * Form Hook\n   */\n\n  /**\n   * Effect\n   *\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMultipleChoiceState({\n        title: questionTable.byId[questionId].title,\n        text: questionTable.byId[questionId].text,\n        possibleAnswers:\n          questionBodyMultipleChoiceTable.byId[questionId].possibleAnswers,\n      });\n    } else {\n      setMultipleChoiceState({\n        title: \"\",\n        text: \"\",\n        possibleAnswers: [\"\", \"\"],\n      });\n    }\n  }, [questionId]);\n\n  useEffect(() => {\n    reset();\n  }, [multipleChoiceState.possibleAnswers]);\n\n  /**\n   * Functions\n   */\n\n  const onSubmit = (data) => {\n    const questionData\n  };\n\n  const { possibleAnswers, title, text } = multipleChoiceState;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex\n        sx={{\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        <Input\n          ref={register}\n          name={\"questionTitle\"}\n          placeholder=\"Provide a Question Title here\"\n          defaultValue={title}\n        />\n        <Textarea\n          rows={5}\n          name={\"questionText\"}\n          placeholder={\"Provide a question here.\"}\n          ref={register}\n          defaultValue={text}\n        />\n        <Button\n          sx={{ flexGrow: 0 }}\n          onClick={() => {\n            setMultipleChoiceState((old) => ({\n              ...old,\n              possibleAnswers: [...old.possibleAnswers, \"\"],\n            }));\n          }}\n        >\n          Add Answer\n        </Button>\n\n        {possibleAnswers.map((possibleAnswer, index) => {\n          return (\n            <div\n              key={v4()}\n              style={{ marginTop: \"0.5rem\", alignContent: \"center\" }}\n            >\n              <Flex\n                sx={{\n                  flexDirection: \"row\",\n                  alignSelf: \"stretch\",\n                }}\n              >\n                <Label>\n                  {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n                  <Checkbox\n                    sx={{ marginTop: \"0.5rem\" }}\n                    defaultChecked={false}\n                    name={`multipleChoiceAnswer_[${index}]`}\n                    ref={register}\n                  />\n                  <Input\n                    ref={register}\n                    name={`multipleChoiceAnswerText_[${index}]`}\n                    placeholder=\"Provide an Answer\"\n                    defaultValue={possibleAnswer ? possibleAnswer : null}\n                  />\n                </Label>\n                <Button\n                  sx={{ margin: \"0\", marginLeft: \"0.5rem\" }}\n                  variant=\"warning\"\n                  onClick={() => {\n                    setMultipleChoiceState((old) => {\n                      old.possibleAnswers.splice(index, 1);\n                      return old;\n                    });\n                  }}\n                >\n                  x\n                </Button>\n              </Flex>\n            </div>\n          );\n        })}\n        <Flex>\n          <Button\n            sx={{ marginRight: \"0.5rem\" }}\n            variant=\"warning\"\n            onClick={() => {\n              reset();\n            }}\n          >\n            Reset\n          </Button>\n          <Button type=\"submit\">Save</Button>\n        </Flex>\n      </Flex>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}