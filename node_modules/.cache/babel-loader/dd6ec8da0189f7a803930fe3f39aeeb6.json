{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { ANSWER_FREE_TEXT_QUESTION, SET_QUESTION_START_TIME, SET_QUESTION_END_TIME, NEXT_QUESTION, SET_APP_TIMER, COUNT_DOWN_APP_TIMER } from \"./actions\";\nimport { initialAnswerTable, initialExamState, initialExamTable, initialQuestionTable, initialAnswerBodyMultipleChoiceTable, initialQuestionBodyMultipleChoiceTable, initialAnswerBodyFreeTextTable, initialQuestionBodyFreeTextTable } from \"./initialState\";\n\n// ================= Basic Tables =====================\nfunction questionTable(state = initialQuestionTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_QUESTION_START_TIME:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n\n        if (question.timeStart === null) {\n          question.timeStart = Date.now();\n        }\n      });\n\n    case SET_QUESTION_END_TIME:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n        question.timeExpired = true;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction examState(state = initialExamState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, d => {\n        const examLength = payload.currentExam.questionsById.length;\n\n        if (d.currentQuestionIndex < examLength - 1) {\n          d.currentQuestionIndex += 1;\n          d.currentQuestionId = payload.currentExam.questionsById[d.currentQuestionIndex];\n        }\n      });\n\n    case SET_APP_TIMER:\n      return produce(state, draftState => {\n        draftState.currentTime = payload.timeLimit;\n        return draftState;\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, draftState => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n\n    default:\n      return state;\n  }\n} // ================= Body Tables =====================\n\n\nfunction questionBodyMultipleChoiceTable(state = initialQuestionBodyMultipleChoiceTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      ;\n  }\n}\n\nfunction questionBodyFreeTextTable(state = initialQuestionBodyFreeTextTable, {\n  type,\n  payload\n}) {}\n\nfunction answerBodyFreeTextTable(state = initialAnswerBodyFreeTextTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n      });\n\n    default:\n      break;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(state = initialAnswerBodyMultipleChoiceTable, {\n  type,\n  payload\n}) {} // =================== Root Reducer =================\n\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/reducers.ts"],"names":["combineReducers","produce","ANSWER_FREE_TEXT_QUESTION","SET_QUESTION_START_TIME","SET_QUESTION_END_TIME","NEXT_QUESTION","SET_APP_TIMER","COUNT_DOWN_APP_TIMER","initialAnswerTable","initialExamState","initialExamTable","initialQuestionTable","initialAnswerBodyMultipleChoiceTable","initialQuestionBodyMultipleChoiceTable","initialAnswerBodyFreeTextTable","initialQuestionBodyFreeTextTable","questionTable","state","type","payload","answerTable","draftState","question","byId","questionId","timeStart","Date","now","timeEnd","timeExpired","examTable","examState","d","examLength","currentExam","questionsById","length","currentQuestionIndex","currentQuestionId","currentTime","timeLimit","countDownBy","console","log","questionBodyMultipleChoiceTable","questionBodyFreeTextTable","answerBodyFreeTextTable","answerText","answerBodyMultipleChoiceTable","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  SET_QUESTION_START_TIME,\n  SET_QUESTION_END_TIME,\n  PREVIOUS_QUESTION,\n  NEXT_QUESTION,\n  SET_APP_TIMER,\n  COUNT_DOWN_APP_TIMER,\n} from \"./actions\";\nimport {\n  initialAnswerTable,\n  initialExamState,\n  initialExamTable,\n  initialQuestionTable,\n  initialAnswerBodyMultipleChoiceTable,\n  initialQuestionBodyMultipleChoiceTable,\n  initialAnswerBodyFreeTextTable,\n  initialQuestionBodyFreeTextTable,\n} from \"./initialState\";\nimport { store } from \"..\";\nimport { useDispatch } from \"react-redux\";\n\n// ================= Basic Tables =====================\n\nfunction questionTable(state = initialQuestionTable, { type, payload }) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, { type, payload }) {\n  switch (type) {\n    case SET_QUESTION_START_TIME:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        if (question.timeStart === null) {\n          question.timeStart = Date.now();\n        }\n      });\n    case SET_QUESTION_END_TIME:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n        question.timeExpired = true;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, { type, payload }) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction examState(state = initialExamState, { type, payload }) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, (d) => {\n        const examLength = payload.currentExam.questionsById.length;\n        if (d.currentQuestionIndex < examLength - 1) {\n          d.currentQuestionIndex += 1;\n          d.currentQuestionId =\n            payload.currentExam.questionsById[d.currentQuestionIndex];\n        }\n      });\n    case SET_APP_TIMER:\n      return produce(state, (draftState) => {\n        draftState.currentTime = payload.timeLimit;\n        return draftState;\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, (draftState) => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n    default:\n      return state;\n  }\n}\n\n// ================= Body Tables =====================\n\nfunction questionBodyMultipleChoiceTable(\n  state = initialQuestionBodyMultipleChoiceTable,\n  { type, payload }\n) {switch (type) {\n  \n  default:\n    ;\n}}\n\nfunction questionBodyFreeTextTable(\n  state = initialQuestionBodyFreeTextTable,\n  { type, payload }\n) {}\n\nfunction answerBodyFreeTextTable(\n  state = initialAnswerBodyFreeTextTable,\n  { type, payload }\n) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n      });\n\n    default:\n      break;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(\n  state = initialAnswerBodyMultipleChoiceTable,\n  { type, payload }\n) {}\n\n// =================== Root Reducer =================\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}