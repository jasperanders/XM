{"ast":null,"code":"import _objectSpread from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import axios from\"axios\";import settings from\"../settings\";import{history}from\"../index\";var REQUEST_METHOD={GET:\"GET\",POST:\"POST\",PATCH:\"PATCH\",PUT:\"PUT\",DELETE:\"DELETE\"};/**\n * @class\n * @description This service class handles all REST Calls\n */var HttpServiceClass=/**\n   * @function\n   * @description Init the axios library and register the interceptors.\n   */function HttpServiceClass(){var _this=this;_classCallCheck(this,HttpServiceClass);this.service=void 0;this.setAuthToken=function(token){var stayLoggedIn=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;_this.service.defaults.headers.common.Authorization=token?\"Token \".concat(token):\"\";if(stayLoggedIn){localStorage.setItem(\"authToken\",token);}else{sessionStorage.setItem(\"authToken\",token);}};this.removeAuthToken=function(){delete _this.service.defaults.headers.common.Authorization;localStorage.removeItem(\"authToken\");sessionStorage.removeItem(\"authToken\");};this.unauthorizedHandler=function(){_this.removeAuthToken();if(window.location.pathname!==\"/\"){history.push(\"/login/\");}// Possibly routing to login\n};this.handleRequest=function(method,path){var data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var params=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var noCache=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var authToken=storedAuthToken();return _this.service.request({url:\"\".concat(settings.REACT_APP_API_URL).concat(path),method:method,data:data,params:_objectSpread({},params,{master:\"a\",ts:noCache?Date.now():null}),headers:{Authorization:authToken?\"Bearer \".concat(authToken):undefined}}).catch(_this.handleError);};this.handleError=function(error){console.error(error);if(error.response){switch(error.response.status){case 401:_this.unauthorizedHandler();break;default:break;}return Promise.reject(error);}// Possibly toaster or log error\nreturn Promise.reject(error);};this.get=function(path){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var noCache=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return _this.handleRequest(REQUEST_METHOD.GET,path,{},params,noCache);};this.patch=function(path,data){return _this.handleRequest(REQUEST_METHOD.PATCH,path,data);};this.put=function(path,data){return _this.handleRequest(REQUEST_METHOD.PUT,path,data);};this.post=function(path,data){return _this.handleRequest(REQUEST_METHOD.POST,path,data);};this.delete=function(path,data){return _this.handleRequest(REQUEST_METHOD.DELETE,path,data);};this.service=axios.create({headers:{\"Content-Type\":\"application/json\",\"Access-Control-Allow-Origin\":\"*\"}// withCredentials: true,\n});// The AuthToken is set after login. If the user was already loaded on init, we need to set it.\nif(localStorage.getItem(\"authToken\")){this.setAuthToken(localStorage.getItem(\"authToken\"),true);}else if(sessionStorage.getItem(\"authToken\")){this.setAuthToken(sessionStorage.getItem(\"authToken\"));}}/**\n   * @function\n   * @description Set the auth token in the request header. Call this after successful login.\n   * @param {string} token is a token string.\n   * @param {boolean} stayLoggedIn logged in.\n   */;export var storedAuthToken=function storedAuthToken(){return localStorage.getItem(\"authToken\")||sessionStorage.getItem(\"authToken\");};var HttpService=new HttpServiceClass();export default HttpService;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/http.tsx"],"names":["axios","settings","history","REQUEST_METHOD","GET","POST","PATCH","PUT","DELETE","HttpServiceClass","service","setAuthToken","token","stayLoggedIn","defaults","headers","common","Authorization","localStorage","setItem","sessionStorage","removeAuthToken","removeItem","unauthorizedHandler","window","location","pathname","push","handleRequest","method","path","data","params","noCache","authToken","storedAuthToken","request","url","REACT_APP_API_URL","master","ts","Date","now","undefined","catch","handleError","error","console","response","status","Promise","reject","get","patch","put","post","delete","create","getItem","HttpService"],"mappings":"iRAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,OAASC,OAAT,KAAwB,UAAxB,CAEA,GAAMC,CAAAA,cAAc,CAAG,CACrBC,GAAG,CAAE,KADgB,CAErBC,IAAI,CAAE,MAFe,CAGrBC,KAAK,CAAE,OAHc,CAIrBC,GAAG,CAAE,KAJgB,CAKrBC,MAAM,CAAE,QALa,CAAvB,CAQA;;;MAKMC,CAAAA,gB,CAEJ;;;KAIA,2BAAc,4DALdC,OAKc,aAuBdC,YAvBc,CAuBC,SAACC,KAAD,CAAiC,IAAzBC,CAAAA,YAAyB,2DAAV,KAAU,CAC9C,KAAI,CAACH,OAAL,CAAaI,QAAb,CAAsBC,OAAtB,CAA8BC,MAA9B,CAAqCC,aAArC,CAAqDL,KAAK,iBAC7CA,KAD6C,EAEtD,EAFJ,CAIA,GAAIC,YAAJ,CAAkB,CAChBK,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCP,KAAlC,EACD,CAFD,IAEO,CACLQ,cAAc,CAACD,OAAf,CAAuB,WAAvB,CAAoCP,KAApC,EACD,CACF,CAjCa,MAuCdS,eAvCc,CAuCI,UAAM,CACtB,MAAO,CAAA,KAAI,CAACX,OAAL,CAAaI,QAAb,CAAsBC,OAAtB,CAA8BC,MAA9B,CAAqCC,aAA5C,CACAC,YAAY,CAACI,UAAb,CAAwB,WAAxB,EACAF,cAAc,CAACE,UAAf,CAA0B,WAA1B,EACD,CA3Ca,MAiDdC,mBAjDc,CAiDQ,UAAM,CAC1B,KAAI,CAACF,eAAL,GACA,GAAIG,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA6B,GAAjC,CAAsC,CACpCxB,OAAO,CAACyB,IAAR,CAAa,SAAb,EACD,CACD;AACD,CAvDa,MAkEdC,aAlEc,CAkEE,SAACC,MAAD,CAASC,IAAT,CAA2D,IAA5CC,CAAAA,IAA4C,2DAArC,EAAqC,IAAjCC,CAAAA,MAAiC,2DAAxB,EAAwB,IAApBC,CAAAA,OAAoB,2DAAV,KAAU,CACzE,GAAMC,CAAAA,SAAS,CAAGC,eAAe,EAAjC,CACA,MAAO,CAAA,KAAI,CAACzB,OAAL,CACJ0B,OADI,CACI,CACPC,GAAG,WAAKpC,QAAQ,CAACqC,iBAAd,SAAkCR,IAAlC,CADI,CAEPD,MAAM,CAANA,MAFO,CAGPE,IAAI,CAAJA,IAHO,CAIPC,MAAM,kBAAOA,MAAP,EAAeO,MAAM,CAAE,GAAvB,CAA4BC,EAAE,CAAEP,OAAO,CAAGQ,IAAI,CAACC,GAAL,EAAH,CAAgB,IAAvD,EAJC,CAKP3B,OAAO,CAAE,CACPE,aAAa,CAAEiB,SAAS,kBAAaA,SAAb,EAA2BS,SAD5C,CALF,CADJ,EAUJC,KAVI,CAUE,KAAI,CAACC,WAVP,CAAP,CAWD,CA/Ea,MAsFdA,WAtFc,CAsFA,SAACC,KAAD,CAAW,CACvBC,OAAO,CAACD,KAAR,CAAcA,KAAd,EACA,GAAIA,KAAK,CAACE,QAAV,CAAoB,CAClB,OAAQF,KAAK,CAACE,QAAN,CAAeC,MAAvB,EACE,IAAK,IAAL,CACE,KAAI,CAAC1B,mBAAL,GACA,MACF,QACE,MALJ,CAQA,MAAO2B,CAAAA,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP,CACD,CAED;AAEA,MAAOI,CAAAA,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP,CACD,CAvGa,MAiHdM,GAjHc,CAiHR,SAACtB,IAAD,KAAOE,CAAAA,MAAP,2DAAgB,EAAhB,IAAoBC,CAAAA,OAApB,2DAA8B,KAA9B,OACJ,CAAA,KAAI,CAACL,aAAL,CAAmBzB,cAAc,CAACC,GAAlC,CAAuC0B,IAAvC,CAA6C,EAA7C,CAAiDE,MAAjD,CAAyDC,OAAzD,CADI,EAjHQ,MA2HdoB,KA3Hc,CA2HN,SAACvB,IAAD,CAAOC,IAAP,QAAgB,CAAA,KAAI,CAACH,aAAL,CAAmBzB,cAAc,CAACG,KAAlC,CAAyCwB,IAAzC,CAA+CC,IAA/C,CAAhB,EA3HM,MAoIduB,GApIc,CAoIR,SAACxB,IAAD,CAAOC,IAAP,QAAgB,CAAA,KAAI,CAACH,aAAL,CAAmBzB,cAAc,CAACI,GAAlC,CAAuCuB,IAAvC,CAA6CC,IAA7C,CAAhB,EApIQ,MA6IdwB,IA7Ic,CA6IP,SAACzB,IAAD,CAAOC,IAAP,QAAgB,CAAA,KAAI,CAACH,aAAL,CAAmBzB,cAAc,CAACE,IAAlC,CAAwCyB,IAAxC,CAA8CC,IAA9C,CAAhB,EA7IO,MAsJdyB,MAtJc,CAsJL,SAAC1B,IAAD,CAAOC,IAAP,QACP,CAAA,KAAI,CAACH,aAAL,CAAmBzB,cAAc,CAACK,MAAlC,CAA0CsB,IAA1C,CAAgDC,IAAhD,CADO,EAtJK,CACZ,KAAKrB,OAAL,CAAeV,KAAK,CAACyD,MAAN,CAAa,CAC1B1C,OAAO,CAAE,CACP,eAAgB,kBADT,CAEP,8BAA+B,GAFxB,CAIT;AAL0B,CAAb,CAAf,CAQA;AACA,GAAIG,YAAY,CAACwC,OAAb,CAAqB,WAArB,CAAJ,CAAuC,CACrC,KAAK/C,YAAL,CAAkBO,YAAY,CAACwC,OAAb,CAAqB,WAArB,CAAlB,CAAqD,IAArD,EACD,CAFD,IAEO,IAAItC,cAAc,CAACsC,OAAf,CAAuB,WAAvB,CAAJ,CAAyC,CAC9C,KAAK/C,YAAL,CAAkBS,cAAc,CAACsC,OAAf,CAAuB,WAAvB,CAAlB,EACD,CACF,CAED;;;;;MAyIF,MAAO,IAAMvB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,SAC7BjB,CAAAA,YAAY,CAACwC,OAAb,CAAqB,WAArB,GAAqCtC,cAAc,CAACsC,OAAf,CAAuB,WAAvB,CADR,EAAxB,CAGP,GAAMC,CAAAA,WAAW,CAAG,GAAIlD,CAAAA,gBAAJ,EAApB,CAEA,cAAekD,CAAAA,WAAf","sourcesContent":["import axios from \"axios\";\nimport settings from \"../settings\";\nimport { history } from \"../index\";\n\nconst REQUEST_METHOD = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PATCH: \"PATCH\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\",\n};\n\n/**\n * @class\n * @description This service class handles all REST Calls\n */\n\nclass HttpServiceClass {\n  service: any;\n  /**\n   * @function\n   * @description Init the axios library and register the interceptors.\n   */\n  constructor() {\n    this.service = axios.create({\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      // withCredentials: true,\n    });\n\n    // The AuthToken is set after login. If the user was already loaded on init, we need to set it.\n    if (localStorage.getItem(\"authToken\")) {\n      this.setAuthToken(localStorage.getItem(\"authToken\"), true);\n    } else if (sessionStorage.getItem(\"authToken\")) {\n      this.setAuthToken(sessionStorage.getItem(\"authToken\"));\n    }\n  }\n\n  /**\n   * @function\n   * @description Set the auth token in the request header. Call this after successful login.\n   * @param {string} token is a token string.\n   * @param {boolean} stayLoggedIn logged in.\n   */\n  setAuthToken = (token, stayLoggedIn = false) => {\n    this.service.defaults.headers.common.Authorization = token\n      ? `Token ${token}`\n      : \"\";\n\n    if (stayLoggedIn) {\n      localStorage.setItem(\"authToken\", token);\n    } else {\n      sessionStorage.setItem(\"authToken\", token);\n    }\n  };\n\n  /**\n   * @function\n   * @description Removes the auth token in the header. Call this after logout.\n   */\n  removeAuthToken = () => {\n    delete this.service.defaults.headers.common.Authorization;\n    localStorage.removeItem(\"authToken\");\n    sessionStorage.removeItem(\"authToken\");\n  };\n\n  /**\n   * @function\n   * @description Handles unauthorized request, redirects to login\n   */\n  unauthorizedHandler = () => {\n    this.removeAuthToken();\n    if (window.location.pathname !== \"/\") {\n      history.push(\"/login/\");\n    }\n    // Possibly routing to login\n  };\n\n  /**\n   * @description Method to handle the request by method.\n   * @param method {string} th request method type.\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {*} data is an object with API data.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  handleRequest = (method, path, data = {}, params = {}, noCache = false) => {\n    const authToken = storedAuthToken();\n    return this.service\n      .request({\n        url: `${settings.REACT_APP_API_URL}${path}`,\n        method,\n        data,\n        params: { ...params, master: \"a\", ts: noCache ? Date.now() : null },\n        headers: {\n          Authorization: authToken ? `Bearer ${authToken}` : undefined,\n        },\n      })\n      .catch(this.handleError);\n  };\n  /**\n   * @function\n   * @description Interceptor for the error response\n   * @param {Object} error is a object with the error response from API.\n   * @return {*}\n   */\n  handleError = (error) => {\n    console.error(error);\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          this.unauthorizedHandler();\n          break;\n        default:\n          break;\n      }\n\n      return Promise.reject(error);\n    }\n\n    // Possibly toaster or log error\n\n    return Promise.reject(error);\n  };\n\n  /**\n   * @function\n   * @description Fires the get request\n   * @param {string} path is a string of API path.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {*}\n   */\n  get = (path, params = {}, noCache = false) =>\n    this.handleRequest(REQUEST_METHOD.GET, path, {}, params, noCache);\n\n  /**\n   * @function\n   * @description Fires the patch request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  patch = (path, data) => this.handleRequest(REQUEST_METHOD.PATCH, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  put = (path, data) => this.handleRequest(REQUEST_METHOD.PUT, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  post = (path, data) => this.handleRequest(REQUEST_METHOD.POST, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  delete = (path, data) =>\n    this.handleRequest(REQUEST_METHOD.DELETE, path, data);\n}\n\nexport const storedAuthToken = () =>\n  localStorage.getItem(\"authToken\") || sessionStorage.getItem(\"authToken\");\n\nconst HttpService = new HttpServiceClass();\n\nexport default HttpService;\n"]},"metadata":{},"sourceType":"module"}