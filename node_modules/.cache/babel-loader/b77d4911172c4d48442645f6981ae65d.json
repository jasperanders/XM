{"ast":null,"code":"import React,{useEffect}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{freeTextFormName}from\"../../../constants/constants\";import{Textarea,Button}from\"theme-ui\";import{answerFreeTextQuestion,nextQuestion}from\"../../../redux/actions\";export default function FreeTexTFreeTextQuestion(_ref){var register=_ref.register,handleSubmit=_ref.handleSubmit,question=_ref.question,getValues=_ref.getValues,setCurrentAnswerAction=_ref.setCurrentAnswerAction;/**\n   * Redux Hooks\n   */var dispatch=useDispatch();var currentExam=useSelector(function(state){return state.examTable;});var _useSelector=useSelector(function(state){return state.examState;}),currentExamId=_useSelector.currentExamId;/**\n   * Effect Hooks\n   */useEffect(function(){setCurrentAnswerAction(function(){return function(){// {nested: true} returns values as if they were submitted\nvar answer=getValues({nest:true})[freeTextFormName];return answerFreeTextQuestion({questionId:questionId,answer:answer});};});},[question]);var questionId=question.questionId;var onSubmit=function onSubmit(data){var answer=data[freeTextFormName];var payload={questionId:questionId,answer:answer};dispatch(answerFreeTextQuestion(payload));dispatch(nextQuestion({currentExam:currentExam.byId[currentExamId]}));};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit(onSubmit)},/*#__PURE__*/React.createElement(Textarea,{rows:10,columns:20,onPaste:function onPaste(e){e.preventDefault();return false;},onCopy:function onCopy(e){e.preventDefault();return false;},name:freeTextFormName,defaultValue:question.storedAnswer,ref:register}),/*#__PURE__*/React.createElement(Button,{type:\"submit\"},\"Save and Next Question\"));}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/takeQuestion/questionType/FreeTextQuestion.tsx"],"names":["React","useEffect","useDispatch","useSelector","freeTextFormName","Textarea","Button","answerFreeTextQuestion","nextQuestion","FreeTexTFreeTextQuestion","register","handleSubmit","question","getValues","setCurrentAnswerAction","dispatch","currentExam","state","examTable","examState","currentExamId","answer","nest","questionId","onSubmit","data","payload","byId","e","preventDefault","storedAnswer"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,OAASC,gBAAT,KAAiC,8BAAjC,CACA,OAASC,QAAT,CAAmBC,MAAnB,KAAiC,UAAjC,CACA,OAASC,sBAAT,CAAiCC,YAAjC,KAAqD,wBAArD,CAGA,cAAe,SAASC,CAAAA,wBAAT,MAMZ,IALDC,CAAAA,QAKC,MALDA,QAKC,CAJDC,YAIC,MAJDA,YAIC,CAHDC,QAGC,MAHDA,QAGC,CAFDC,SAEC,MAFDA,SAEC,CADDC,sBACC,MADDA,sBACC,CACD;;KAIA,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CACA,GAAMc,CAAAA,WAAW,CAAGb,WAAW,CAAC,SAACc,KAAD,QAAuBA,CAAAA,KAAK,CAACC,SAA7B,EAAD,CAA/B,CANC,iBAOyBf,WAAW,CAAC,SAACc,KAAD,QAAuBA,CAAAA,KAAK,CAACE,SAA7B,EAAD,CAPpC,CAOOC,aAPP,cAOOA,aAPP,CASD;;KAIAnB,SAAS,CAAC,UAAM,CACda,sBAAsB,CAAC,UAAM,CAC3B,MAAO,WAAM,CACX;AACA,GAAMO,CAAAA,MAAM,CAAGR,SAAS,CAAC,CAAES,IAAI,CAAE,IAAR,CAAD,CAAT,CAA0BlB,gBAA1B,CAAf,CAEA,MAAOG,CAAAA,sBAAsB,CAAC,CAC5BgB,UAAU,CAAEA,UADgB,CAE5BF,MAAM,CAANA,MAF4B,CAAD,CAA7B,CAID,CARD,CASD,CAVqB,CAAtB,CAWD,CAZQ,CAYN,CAACT,QAAD,CAZM,CAAT,CAbC,GA2BOW,CAAAA,UA3BP,CA2BsBX,QA3BtB,CA2BOW,UA3BP,CA6BD,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAU,CACzB,GAAMJ,CAAAA,MAAM,CAAGI,IAAI,CAACrB,gBAAD,CAAnB,CACA,GAAMsB,CAAAA,OAAO,CAAG,CAAEH,UAAU,CAAVA,UAAF,CAAcF,MAAM,CAANA,MAAd,CAAhB,CACAN,QAAQ,CAACR,sBAAsB,CAACmB,OAAD,CAAvB,CAAR,CACAX,QAAQ,CAACP,YAAY,CAAC,CAAEQ,WAAW,CAAEA,WAAW,CAACW,IAAZ,CAAiBP,aAAjB,CAAf,CAAD,CAAb,CAAR,CACD,CALD,CAOA,mBACE,4BAAM,QAAQ,CAAET,YAAY,CAACa,QAAD,CAA5B,eACE,oBAAC,QAAD,EACE,IAAI,CAAE,EADR,CAEE,OAAO,CAAE,EAFX,CAGE,OAAO,CAAE,iBAACI,CAAD,CAAO,CACdA,CAAC,CAACC,cAAF,GACA,MAAO,MAAP,CACD,CANH,CAOE,MAAM,CAAE,gBAACD,CAAD,CAAO,CACbA,CAAC,CAACC,cAAF,GACA,MAAO,MAAP,CACD,CAVH,CAWE,IAAI,CAAEzB,gBAXR,CAYE,YAAY,CAAEQ,QAAQ,CAACkB,YAZzB,CAaE,GAAG,CAAEpB,QAbP,EADF,cAgBE,oBAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,2BAhBF,CADF,CAoBD","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { freeTextFormName } from \"../../../constants/constants\";\nimport { Textarea, Button } from \"theme-ui\";\nimport { answerFreeTextQuestion, nextQuestion } from \"../../../redux/actions\";\nimport { TRootState } from \"../../../types/examTypes\";\n\nexport default function FreeTexTFreeTextQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n}) {\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n\n  /**\n   * Effect Hooks\n   */\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const answer = getValues({ nest: true })[freeTextFormName];\n\n        return answerFreeTextQuestion({\n          questionId: questionId,\n          answer,\n        });\n      };\n    });\n  }, [question]);\n\n  const { questionId } = question;\n\n  const onSubmit = (data) => {\n    const answer = data[freeTextFormName];\n    const payload = { questionId, answer };\n    dispatch(answerFreeTextQuestion(payload));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Textarea\n        rows={10}\n        columns={20}\n        onPaste={(e) => {\n          e.preventDefault();\n          return false;\n        }}\n        onCopy={(e) => {\n          e.preventDefault();\n          return false;\n        }}\n        name={freeTextFormName}\n        defaultValue={question.storedAnswer}\n        ref={register}\n      />\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}