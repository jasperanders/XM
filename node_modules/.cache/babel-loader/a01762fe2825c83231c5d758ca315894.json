{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport HttpService from \"./http\";\nimport apiRoutes from \"./apiRoutes\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: {\n    rows: []\n  },\n  allQuestions: {\n    rows: []\n  } // allExams: { rows: [] },\n\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [allUsers, setAllUsers] = useState({\n    rows: []\n  });\n  const [allQuestions, setAllQuestions] = useState({\n    rows: []\n  });\n  const [allExams, setAllExams] = useState({\n    rows: []\n  });\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllUsers();\n  }, []);\n  useEffect(() => {\n    console.log(allExams);\n  }, [allExams]);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({\n      data\n    }) => {\n      setAllUsers(data);\n      console.log(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({\n      data\n    }) => {\n      // console.log(data);\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM).then(({\n      data\n    }) => {\n      // console.log(data);\n      setAllQuestions(data);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(ExamContext.Provider, {\n      value: {\n        allQuestions,\n        loadAllUsers,\n        allUsers\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx"],"names":["React","useState","useEffect","HttpService","apiRoutes","ExamContext","createContext","loadAllUsers","allUsers","rows","allQuestions","UserContextProvider","children","setAllUsers","setAllQuestions","allExams","setAllExams","loadAllQuestions","console","log","get","USER","then","data","QUESTION","loadAllExams","EXAM"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAoDC,SAApD,QAAqE,OAArE;AAEA,OAAOC,WAAP,MAA6C,QAA7C;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,CAAoB;AAC7CC,EAAAA,YAAY,EAAE,MAAM,CAAE,CADuB;AAE7CC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAFmC;AAG7CC,EAAAA,YAAY,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR,GAH+B,CAI7C;;AAJ6C,CAApB,CAApB;AAOP,eAAe,SAASE,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACxD,QAAM,CAACJ,QAAD,EAAWK,WAAX,IAA0BZ,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAxC;AACA,QAAM,CAACC,YAAD,EAAeI,eAAf,IAAkCb,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAhD;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAxC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,YAAY;AACZU,IAAAA,gBAAgB;AAChBV,IAAAA,YAAY;AACb,GAJQ,EAIN,EAJM,CAAT;AAMAL,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAED,GAHQ,EAGN,CAACA,QAAD,CAHM,CAAT;;AAKA,QAAMR,YAAY,GAAG,MAAM;AACzB,WAAOJ,WAAW,CAACiB,GAAZ,CAAgBhB,SAAS,CAACiB,IAA1B,EAAgCC,IAAhC,CAAqC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACxDV,MAAAA,WAAW,CAACU,IAAD,CAAX;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACD,KAHM,CAAP;AAID,GALD;;AAOA,QAAMN,gBAAgB,GAAG,MAAM;AAC7B,WAAOd,WAAW,CAACiB,GAAZ,CAAgBhB,SAAS,CAACoB,QAA1B,EAAoCF,IAApC,CAAyC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAC5D;AACAT,MAAAA,eAAe,CAACS,IAAD,CAAf;AACD,KAHM,CAAP;AAID,GALD;;AAOA,QAAME,YAAY,GAAG,MAAM;AACzB,WAAOtB,WAAW,CAACiB,GAAZ,CAAgBhB,SAAS,CAACsB,IAA1B,EAAgCJ,IAAhC,CAAqC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACxD;AACAT,MAAAA,eAAe,CAACS,IAAD,CAAf;AACD,KAHM,CAAP;AAID,GALD;;AAOA;AAAA;AACE;AACA;AACA;AACA;AACA,wBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AACLb,QAAAA,YADK;AAELH,QAAAA,YAFK;AAGLC,QAAAA;AAHK,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGI,QAPH;AALF;AAeD","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: { rows: [] },\n  allQuestions: { rows: [] },\n  // allExams: { rows: [] },\n});\n\nexport default function UserContextProvider({ children }) {\n  const [allUsers, setAllUsers] = useState({ rows: [] });\n  const [allQuestions, setAllQuestions] = useState({ rows: [] });\n  const [allExams, setAllExams] = useState({ rows: [] });\n\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllUsers();\n  }, []);\n\n  useEffect(() => {\n    console.log(allExams);\n    \n  }, [allExams]);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers(data);\n      console.log(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({ data }) => {\n      // console.log(data);\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM).then(({ data }) => {\n      // console.log(data);\n      setAllQuestions(data);\n    });\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        allQuestions,\n        loadAllUsers,\n        allUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}