{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\nimport { Textarea, Button, Input, Label, Checkbox } from \"theme-ui\";\nexport default function MakeFreeText({\n  register,\n  handleSubmit,\n  getValues,\n  setCurrentAnswerAction,\n  reset\n}) {\n  /**\n   * React Hooks\n   */\n  const [numberOfAnswers, setNumberOfAnswers] = useState(2);\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const {\n    currentQuestionId\n  } = useSelector(state => state.examState);\n  const questionTable = useSelector(state => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(state => state.questionBodyMultipleChoiceTable);\n  let question = undefined;\n  let questionBody = undefined;\n\n  if (currentQuestionId) {\n    question = questionTable.byId[currentQuestionId];\n    questionBody = questionBodyMultipleChoiceTable.byId[currentQuestionId];\n  }\n\n  console.log(questionBody);\n  console.log(question);\n  /**\n   * Form Hook\n   */\n\n  const onSubmit = data => {\n    console.log(\"submitted\");\n  };\n  /**\n   * Functions\n   */\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    name: \"questionTitle\",\n    placeholder: \"Provide a Question Title here\",\n    defaultValue: question ? question.title : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Textarea, {\n    rows: 5,\n    name: \"questionText\",\n    placeholder: \"Provide a question here.\",\n    ref: register,\n    defaultValue: question ? question.text : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), questionBody.possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      defaultChecked: false,\n      name: `multipleChoiceAnswer_[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      ref: register,\n      name: \"\",\n      placeholder: \"Provide a Question Title here\",\n      defaultValue: question ? question.title : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    })));\n  }), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      marginRight: \"0.5rem\"\n    },\n    variant: \"warning\",\n    onClick: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"Save\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx"],"names":["React","useState","useDispatch","useSelector","v4","Textarea","Button","Input","Label","Checkbox","MakeFreeText","register","handleSubmit","getValues","setCurrentAnswerAction","reset","numberOfAnswers","setNumberOfAnswers","dispatch","currentQuestionId","state","examState","questionTable","questionBodyMultipleChoiceTable","question","undefined","questionBody","byId","console","log","onSubmit","data","title","text","possibleAnswers","map","possibleAnswer","index","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\n\nimport { Textarea, Button, Input, Grid, Label, Checkbox } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\n\nexport default function MakeFreeText({\n  register,\n  handleSubmit,\n  getValues,\n  setCurrentAnswerAction,\n  reset,\n}) {\n  /**\n   * React Hooks\n   */\n\n  const [numberOfAnswers, setNumberOfAnswers] = useState(2);\n\n  /**\n   * Redux Hooks\n   */\n  const dispatch = useDispatch();\n  const { currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  let question = undefined;\n  let questionBody = undefined;\n\n  if (currentQuestionId) {\n    question = questionTable.byId[currentQuestionId];\n    questionBody = questionBodyMultipleChoiceTable.byId[currentQuestionId];\n  }\n\n  console.log(questionBody);\n  console.log(question);\n  /**\n   * Form Hook\n   */\n\n  const onSubmit = (data) => {\n    console.log(\"submitted\");\n  };\n\n  /**\n   * Functions\n   */\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input\n        ref={register}\n        name={\"questionTitle\"}\n        placeholder=\"Provide a Question Title here\"\n        defaultValue={question ? question.title : null}\n      />\n      <Textarea\n        rows={5}\n        name={\"questionText\"}\n        placeholder={\"Provide a question here.\"}\n        ref={register}\n        defaultValue={question ? question.text : null}\n      />\n\n      {questionBody.possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`multipleChoiceAnswer_[${index}]`}\n                ref={register}\n              />\n              <Input\n                ref={register}\n                name={\"\"}\n                placeholder=\"Provide a Question Title here\"\n                defaultValue={question ? question.title : null}\n              />\n            </Label>\n          </div>\n        );\n      })}\n      <Button\n        sx={{ marginRight: \"0.5rem\" }}\n        variant=\"warning\"\n        onClick={() => {\n          reset();\n        }}\n      >\n        Reset\n      </Button>\n      <Button type=\"submit\">Save</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}