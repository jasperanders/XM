{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport HttpService from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport { setExamTable, setQuestionTable, setQuestionBodyFreeTextTable, setQuestionBodyMultipleChoiceTable, setCurrentQuestionId } from \"../redux/actions\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: {\n    rows: []\n  },\n  allQuestions: {\n    rows: []\n  } // allExams: { rows: [] },\n\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [allUsers, setAllUsers] = useState({\n    rows: []\n  });\n  const [allQuestions, setAllQuestions] = useState({\n    rows: []\n  });\n  const [allExams, setAllExams] = useState({\n    rows: []\n  });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({\n    rows: []\n  });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({\n    rows: []\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllExams();\n    loadAllFreeText();\n    loadAllMultipleChoice();\n  }, []);\n  /**\n   * Exam Table\n   */\n\n  useEffect(() => {\n    var _allExams$rows$, _allExams$rows$$conte;\n\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    console.log(allExams);\n    const firstQuestionId = allExams === null || allExams === void 0 ? void 0 : (_allExams$rows$ = allExams.rows[0]) === null || _allExams$rows$ === void 0 ? void 0 : (_allExams$rows$$conte = _allExams$rows$.content) === null || _allExams$rows$$conte === void 0 ? void 0 : _allExams$rows$$conte.questionsById[0];\n    allExams.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setExamTable({\n      newTable\n    }));\n    dispatch(setCurrentQuestionId({\n      newQuestionIndex: 0,\n      newQuestionId: firstQuestionId\n    }));\n  }, [allExams]);\n  /**\n   * Question Table\n   */\n\n  useEffect(() => {\n    dispat;\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allQuestions.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionTable({\n      newTable\n    }));\n  }, [allQuestions]);\n  /**\n   * FreeTextQuestions\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allFreeTextQuestion.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        questionId: _id\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionBodyFreeTextTable({\n      newTable\n    }));\n  }, [allFreeTextQuestion]);\n  /**\n   * MultipleChoiceQuestions\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allMultipleChoice.rows.map(({\n      _id,\n      content\n    }) => {\n      console.log(content);\n      newTable.byId[_id] = {\n        questionId: _id,\n        possibleAnswers: content.possibleAnswers\n      };\n      newTable.allIds.push(_id);\n    });\n    console.log(\"newTable\", newTable);\n    dispatch(setQuestionBodyMultipleChoiceTable({\n      newTable\n    }));\n  }, [allMultipleChoice]);\n  /**\n   * Load Tables\n   *\n   */\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({\n      data\n    }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({\n      data\n    }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM).then(({\n      data\n    }) => {\n      setAllExams(data);\n    }).catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({\n      data\n    }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(({\n      data\n    }) => {\n      setAllMultipleChoice(data);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(ExamContext.Provider, {\n      value: {\n        allQuestions,\n        loadAllUsers,\n        allUsers\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx"],"names":["React","useState","useEffect","HttpService","apiRoutes","useDispatch","setExamTable","setQuestionTable","setQuestionBodyFreeTextTable","setQuestionBodyMultipleChoiceTable","setCurrentQuestionId","ExamContext","createContext","loadAllUsers","allUsers","rows","allQuestions","UserContextProvider","children","setAllUsers","setAllQuestions","allExams","setAllExams","allFreeTextQuestion","setAllFreeTextQuestion","allMultipleChoice","setAllMultipleChoice","dispatch","loadAllQuestions","loadAllExams","loadAllFreeText","loadAllMultipleChoice","newTable","byId","allIds","console","log","firstQuestionId","content","questionsById","map","_id","examId","name","push","newQuestionIndex","newQuestionId","dispat","questionId","questionType","text","timeLimitMs","title","possibleAnswers","get","USER","then","data","QUESTION","EXAM","catch","FREE_TEXT_QUESTION","MULTIPLE_CHOICE_QUESTION"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAoDC,SAApD,QAAqE,OAArE;AAEA,OAAOC,WAAP,MAA6C,QAA7C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SACEC,YADF,EAEEC,gBAFF,EAIEC,4BAJF,EAKEC,kCALF,EAMEC,oBANF,QAOO,kBAPP,C,CASA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGX,KAAK,CAACY,aAAN,CAAoB;AAC7CC,EAAAA,YAAY,EAAE,MAAM,CAAE,CADuB;AAE7CC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAFmC;AAG7CC,EAAAA,YAAY,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR,GAH+B,CAI7C;;AAJ6C,CAApB,CAApB;AAOP,eAAe,SAASE,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACxD,QAAM,CAACJ,QAAD,EAAWK,WAAX,IAA0BlB,QAAQ,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAxC;AACA,QAAM,CAACC,YAAD,EAAeI,eAAf,IAAkCnB,QAAQ,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAhD;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAxC;AACA,QAAM,CAACQ,mBAAD,EAAsBC,sBAAtB,IAAgDvB,QAAQ,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA9D;AACA,QAAM,CAACU,iBAAD,EAAoBC,oBAApB,IAA4CzB,QAAQ,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA1D;AAEA,QAAMY,QAAQ,GAAGtB,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY;AACZe,IAAAA,gBAAgB;AAChBC,IAAAA,YAAY;AACZC,IAAAA,eAAe;AACfC,IAAAA,qBAAqB;AACtB,GANQ,EAMN,EANM,CAAT;AAQA;;;;AAGA7B,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAM8B,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYf,QAAZ;AACA,UAAMgB,eAAe,GAAGhB,QAAH,aAAGA,QAAH,0CAAGA,QAAQ,CAAEN,IAAV,CAAe,CAAf,CAAH,6EAAG,gBAAmBuB,OAAtB,0DAAG,sBAA4BC,aAA5B,CAA0C,CAA1C,CAAxB;AACAlB,IAAAA,QAAQ,CAACN,IAAT,CAAcyB,GAAd,CAAkB,CAAC;AAAEC,MAAAA,GAAF;AAAOH,MAAAA;AAAP,KAAD,KAAsB;AACtCN,MAAAA,QAAQ,CAACC,IAAT,CAAcQ,GAAd,IAAqB;AACnBC,QAAAA,MAAM,EAAED,GADW;AAEnBE,QAAAA,IAAI,EAAEL,OAAO,CAACK,IAFK;AAGnBJ,QAAAA,aAAa,EAAED,OAAO,CAACC;AAHJ,OAArB;AAKAP,MAAAA,QAAQ,CAACE,MAAT,CAAgBU,IAAhB,CAAqBH,GAArB;AACD,KAPD;AAQAd,IAAAA,QAAQ,CAACrB,YAAY,CAAC;AAAE0B,MAAAA;AAAF,KAAD,CAAb,CAAR;AACAL,IAAAA,QAAQ,CACNjB,oBAAoB,CAAC;AACnBmC,MAAAA,gBAAgB,EAAE,CADC;AAEnBC,MAAAA,aAAa,EAAET;AAFI,KAAD,CADd,CAAR;AAMD,GAnBQ,EAmBN,CAAChB,QAAD,CAnBM,CAAT;AAqBA;;;;AAGAnB,EAAAA,SAAS,CAAC,MAAM;AACd6C,IAAAA,MAAM;AACN,UAAMf,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAjB;AACAlB,IAAAA,YAAY,CAACD,IAAb,CAAkByB,GAAlB,CAAsB,CAAC;AAAEC,MAAAA,GAAF;AAAOH,MAAAA;AAAP,KAAD,KAAsB;AAC1CN,MAAAA,QAAQ,CAACC,IAAT,CAAcQ,GAAd,IAAqB;AACnBO,QAAAA,UAAU,EAAEP,GADO;AAEnBQ,QAAAA,YAAY,EAAEX,OAAO,CAACW,YAFH;AAGnBC,QAAAA,IAAI,EAAEZ,OAAO,CAACY,IAHK;AAInBC,QAAAA,WAAW,EAAEb,OAAO,CAACa,WAJF;AAKnBC,QAAAA,KAAK,EAAEd,OAAO,CAACc;AALI,OAArB;AAOApB,MAAAA,QAAQ,CAACE,MAAT,CAAgBU,IAAhB,CAAqBH,GAArB;AACD,KATD;AAUAd,IAAAA,QAAQ,CAACpB,gBAAgB,CAAC;AAAEyB,MAAAA;AAAF,KAAD,CAAjB,CAAR;AACD,GAdQ,EAcN,CAAChB,YAAD,CAdM,CAAT;AAgBA;;;;AAGAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAjB;AACAX,IAAAA,mBAAmB,CAACR,IAApB,CAAyByB,GAAzB,CAA6B,CAAC;AAAEC,MAAAA,GAAF;AAAOH,MAAAA;AAAP,KAAD,KAAsB;AACjDN,MAAAA,QAAQ,CAACC,IAAT,CAAcQ,GAAd,IAAqB;AACnBO,QAAAA,UAAU,EAAEP;AADO,OAArB;AAGAT,MAAAA,QAAQ,CAACE,MAAT,CAAgBU,IAAhB,CAAqBH,GAArB;AACD,KALD;AAMAd,IAAAA,QAAQ,CAACnB,4BAA4B,CAAC;AAAEwB,MAAAA;AAAF,KAAD,CAA7B,CAAR;AACD,GATQ,EASN,CAACT,mBAAD,CATM,CAAT;AAWA;;;;AAGArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAjB;AACAT,IAAAA,iBAAiB,CAACV,IAAlB,CAAuByB,GAAvB,CAA2B,CAAC;AAAEC,MAAAA,GAAF;AAAOH,MAAAA;AAAP,KAAD,KAAsB;AAC/CH,MAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACAN,MAAAA,QAAQ,CAACC,IAAT,CAAcQ,GAAd,IAAqB;AACnBO,QAAAA,UAAU,EAAEP,GADO;AAEnBY,QAAAA,eAAe,EAAEf,OAAO,CAACe;AAFN,OAArB;AAIArB,MAAAA,QAAQ,CAACE,MAAT,CAAgBU,IAAhB,CAAqBH,GAArB;AACD,KAPD;AAQAN,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,QAAxB;AACAL,IAAAA,QAAQ,CAAClB,kCAAkC,CAAC;AAAEuB,MAAAA;AAAF,KAAD,CAAnC,CAAR;AACD,GAZQ,EAYN,CAACP,iBAAD,CAZM,CAAT;AAcA;;;;;AAIA,QAAMZ,YAAY,GAAG,MAAM;AACzB,WAAOV,WAAW,CAACmD,GAAZ,CAAgBlD,SAAS,CAACmD,IAA1B,EAAgCC,IAAhC,CAAqC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACxDtC,MAAAA,WAAW,CAACsC,IAAD,CAAX;AACD,KAFM,CAAP;AAGD,GAJD;;AAMA,QAAM7B,gBAAgB,GAAG,MAAM;AAC7B,WAAOzB,WAAW,CAACmD,GAAZ,CAAgBlD,SAAS,CAACsD,QAA1B,EAAoCF,IAApC,CAAyC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAC5DrC,MAAAA,eAAe,CAACqC,IAAD,CAAf;AACD,KAFM,CAAP;AAGD,GAJD;;AAMA,QAAM5B,YAAY,GAAG,MAAM;AACzB,WAAO1B,WAAW,CAACmD,GAAZ,CAAgBlD,SAAS,CAACuD,IAA1B,EACJH,IADI,CACC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBnC,MAAAA,WAAW,CAACmC,IAAD,CAAX;AACD,KAHI,EAIJG,KAJI,CAIE,oBAJF,CAAP;AAKD,GAND;;AAQA,QAAM9B,eAAe,GAAG,MAAM;AAC5B,WAAO3B,WAAW,CAACmD,GAAZ,CAAgBlD,SAAS,CAACyD,kBAA1B,EAA8CL,IAA9C,CAAmD,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACtEjC,MAAAA,sBAAsB,CAACiC,IAAD,CAAtB;AACD,KAFM,CAAP;AAGD,GAJD;;AAMA,QAAM1B,qBAAqB,GAAG,MAAM;AAClC,WAAO5B,WAAW,CAACmD,GAAZ,CAAgBlD,SAAS,CAAC0D,wBAA1B,EAAoDN,IAApD,CACL,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACZ/B,MAAAA,oBAAoB,CAAC+B,IAAD,CAApB;AACD,KAHI,CAAP;AAKD,GAND;;AAQA;AAAA;AACE;AACA;AACA;AACA;AACA,wBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AACLzC,QAAAA,YADK;AAELH,QAAAA,YAFK;AAGLC,QAAAA;AAHK,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGI,QAPH;AALF;AAeD","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setExamTable,\n  setQuestionTable,\n  setAnswerBodyFreeTextTable,\n  setQuestionBodyFreeTextTable,\n  setQuestionBodyMultipleChoiceTable,\n  setCurrentQuestionId,\n} from \"../redux/actions\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: { rows: [] },\n  allQuestions: { rows: [] },\n  // allExams: { rows: [] },\n});\n\nexport default function UserContextProvider({ children }) {\n  const [allUsers, setAllUsers] = useState({ rows: [] });\n  const [allQuestions, setAllQuestions] = useState({ rows: [] });\n  const [allExams, setAllExams] = useState({ rows: [] });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({ rows: [] });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({ rows: [] });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllExams();\n    loadAllFreeText();\n    loadAllMultipleChoice();\n  }, []);\n\n  /**\n   * Exam Table\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    console.log(allExams);\n    const firstQuestionId = allExams?.rows[0]?.content?.questionsById[0];\n    allExams.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setExamTable({ newTable }));\n    dispatch(\n      setCurrentQuestionId({\n        newQuestionIndex: 0,\n        newQuestionId: firstQuestionId,\n      })\n    );\n  }, [allExams]);\n\n  /**\n   * Question Table\n   */\n  useEffect(() => {\n    dispat\n    const newTable = { byId: {}, allIds: [] };\n    allQuestions.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionTable({ newTable }));\n  }, [allQuestions]);\n\n  /**\n   * FreeTextQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allFreeTextQuestion.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionBodyFreeTextTable({ newTable }));\n  }, [allFreeTextQuestion]);\n\n  /**\n   * MultipleChoiceQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allMultipleChoice.rows.map(({ _id, content }) => {\n      console.log(content);\n      newTable.byId[_id] = {\n        questionId: _id,\n        possibleAnswers: content.possibleAnswers,\n      };\n      newTable.allIds.push(_id);\n    });\n    console.log(\"newTable\", newTable);\n    dispatch(setQuestionBodyMultipleChoiceTable({ newTable }));\n  }, [allMultipleChoice]);\n\n  /**\n   * Load Tables\n   *\n   */\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({ data }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM)\n      .then(({ data }) => {\n        setAllExams(data);\n      })\n      .catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({ data }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(\n      ({ data }) => {\n        setAllMultipleChoice(data);\n      }\n    );\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        allQuestions,\n        loadAllUsers,\n        allUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}