{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { questionTypes } from \"../../../constants/constants\";\nexport default function Question({\n  questionTypeProp\n}) {\n  /**\n   * React Hooks\n   */\n  const [questionType, setQuestionType] = useState(\"\");\n  /**\n   * Redux\n   */\n\n  const currentQuestionId = useSelector(state => state.examState.currentQuestionId);\n  const questionTable = useSelector(state => state.questionTable);\n  /**\n   * Hook Form\n   */\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setQuestionType(questionTypeProp);\n    } else {\n      setQuestionType(questionTable.byId[currentQuestionId].questionType);\n    }\n  }, [currentQuestionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case questionTypes[0].name:\n        return /*#__PURE__*/React.createElement(MakeFreeText, {\n          register: register,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          setCurrentAnswerAction: setCurrentAnswerAction,\n          reset: reset,\n          questionId: currentQuestionId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }\n        });\n\n      case \"Multiple Choice\":\n      case questionTypes[0].name:\n        return /*#__PURE__*/React.createElement(MakeMultipleChoice, {\n          register: register,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          setCurrentAnswerAction: setCurrentAnswerAction,\n          reset: reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }, questionBody());\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx"],"names":["React","useEffect","useState","useSelector","useForm","MakeFreeText","MakeMultipleChoice","questionTypes","Question","questionTypeProp","questionType","setQuestionType","currentQuestionId","state","examState","questionTable","register","handleSubmit","watch","errors","reset","getValues","byId","questionBody","name","setCurrentAnswerAction"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,SAASC,aAAT,QAA8B,8BAA9B;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AACrD;;;AAGA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA;;;;AAGA,QAAMU,iBAAiB,GAAGT,WAAW,CAClCU,KAAD,IAAuBA,KAAK,CAACC,SAAN,CAAgBF,iBADJ,CAArC;AAGA,QAAMG,aAAa,GAAGZ,WAAW,CAAEU,KAAD,IAAuBA,KAAK,CAACE,aAA9B,CAAjC;AAEA;;;;AAIA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA,KAAzC;AAAgDC,IAAAA;AAAhD,MAA8DjB,OAAO,EAA3E;AAEA;;;;AAGAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,iBAAL,EAAwB;AACtBD,MAAAA,eAAe,CAACF,gBAAD,CAAf;AACD,KAFD,MAEO;AACLE,MAAAA,eAAe,CAACI,aAAa,CAACO,IAAd,CAAmBV,iBAAnB,EAAsCF,YAAvC,CAAf;AACD;AACF,GANQ,EAMN,CAACE,iBAAD,CANM,CAAT;;AAQA,QAAMW,YAAY,GAAG,MAAM;AACzB,YAAQb,YAAR;AACE,WAAKH,aAAa,CAAC,CAAD,CAAb,CAAiBiB,IAAtB;AACE,4BACE,oBAAC,YAAD;AACA,UAAA,QAAQ,EAAER,QADV;AAEA,UAAA,YAAY,EAAEC,YAFd;AAGA,UAAA,SAAS,EAAEI,SAHX;AAIA,UAAA,sBAAsB,EAAEI,sBAJxB;AAKA,UAAA,KAAK,EAAEL,KALP;AAMA,UAAA,UAAU,EAAER,iBANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAUE,WAAK,iBAAL;AACkB,WAAKL,aAAa,CAAC,CAAD,CAAb,CAAiBiB,IAAtB;AACpB,4BACE,oBAAC,kBAAD;AACE,UAAA,QAAQ,EAAER,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,SAAS,EAAEI,SAHb;AAIE,UAAA,sBAAsB,EAAEI,sBAJ1B;AAKE,UAAA,KAAK,EAAEL,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAxBJ;AA0BD,GA3BD;;AA4BA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMG,YAAY,EAAlB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { questionTypes } from \"../../../constants/constants\";\n\nexport default function Question({ questionTypeProp }) {\n  /**\n   * React Hooks\n   */\n  const [questionType, setQuestionType] = useState(\"\");\n  /**\n   * Redux\n   */\n  const currentQuestionId = useSelector(\n    (state: TRootState) => state.examState.currentQuestionId\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n\n  /**\n   * Hook Form\n   */\n\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  /**\n   * Effects\n   */\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setQuestionType(questionTypeProp);\n    } else {\n      setQuestionType(questionTable.byId[currentQuestionId].questionType);\n    }\n  }, [currentQuestionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case questionTypes[0].name:\n        return (\n          <MakeFreeText\n          register={register}\n          handleSubmit={handleSubmit}\n          getValues={getValues}\n          setCurrentAnswerAction={setCurrentAnswerAction}\n          reset={reset}\n          questionId={currentQuestionId}\n          />\n          );\n          case \"Multiple Choice\":\n                            case questionTypes[0].name:\n        return (\n          <MakeMultipleChoice\n            register={register}\n            handleSubmit={handleSubmit}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n            reset={reset}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n  return <div>{questionBody()}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}