{"ast":null,"code":"import _objectSpread from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{useSelector}from\"react-redux\";import MakeFreeText from\"./MakeFreeText\";import MakeMultipleChoice from\"./MakeMultipleChoice\";import{questionTypes}from\"../../../constants/constants\";import HttpService from\"../../../services/http\";import apiRoutes from\"../../../services/apiRoutes\";export default function Question(_ref){var questionTypeProp=_ref.questionType;/**\n   * React Hooks\n   */var _useState=useState({questionId:null,questionType:null}),_useState2=_slicedToArray(_useState,2),makeQuestionState=_useState2[0],setMakeQuestionState=_useState2[1];var _useState3=useState(/*#__PURE__*/React.createElement(React.Fragment,null)),_useState4=_slicedToArray(_useState3,2),questionBody=_useState4[0],setQuestionBody=_useState4[1];/**\n   * Redux\n   */var currentQuestionId=useSelector(function(state){return state.examState.currentQuestionId;});var questionTable=useSelector(function(state){return state.questionTable;});/**\n   * Hook Form\n   */ /**\n   * Effects\n   */useEffect(function(){if(!currentQuestionId){setMakeQuestionState(function(oldState){return _objectSpread({},oldState,{questionType:questionTypeProp});});}else{setMakeQuestionState({questionId:currentQuestionId,questionType:questionTable.byId[currentQuestionId].questionType});}},[currentQuestionId,questionTypeProp]);useEffect(function(){var questionType=makeQuestionState.questionType;switch(questionType){case questionTypes[0].name:setQuestionBody(/*#__PURE__*/React.createElement(MakeFreeText,{makeQuestion:makeQuestion,questionId:currentQuestionId}));break;case questionTypes[1].name:setQuestionBody(/*#__PURE__*/React.createElement(MakeMultipleChoice,{makeQuestion:makeQuestion,questionId:currentQuestionId}));break;default:setQuestionBody(/*#__PURE__*/React.createElement(\"div\",null,\"Something went wrong\"));break;}},[makeQuestionState]);var makeQuestion=function makeQuestion(_ref2){var questionContent=_ref2.questionContent,bodyContent=_ref2.bodyContent,makeBody=_ref2.makeBody,answerContent=_ref2.answerContent,makeAnswer=_ref2.makeAnswer;HttpService.post(apiRoutes.QUESTION,{content:questionContent}).then(function(_ref3){var data=_ref3.data;makeBody({id:data.id,bodyContent:bodyContent});makeAnswer({id:data.id,answerContent:answerContent});}).catch(function(error){console.error(\"error make Question\");});};return/*#__PURE__*/React.createElement(\"div\",null,questionBody);}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx"],"names":["React","useEffect","useState","useSelector","MakeFreeText","MakeMultipleChoice","questionTypes","HttpService","apiRoutes","Question","questionTypeProp","questionType","questionId","makeQuestionState","setMakeQuestionState","questionBody","setQuestionBody","currentQuestionId","state","examState","questionTable","oldState","byId","name","makeQuestion","questionContent","bodyContent","makeBody","answerContent","makeAnswer","post","QUESTION","content","then","data","id","catch","error","console"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { questionTypes } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function Question({ questionType: questionTypeProp }) {\n  /**\n   * React Hooks\n   */\n  const [makeQuestionState, setMakeQuestionState] = useState({\n    questionId: null,\n    questionType: null,\n  });\n  const [questionBody, setQuestionBody] = useState(<></>);\n  /**\n   * Redux\n   */\n  const currentQuestionId = useSelector(\n    (state: TRootState) => state.examState.currentQuestionId\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n\n  /**\n   * Hook Form\n   */\n\n\n  /**\n   * Effects\n   */\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setMakeQuestionState((oldState) => ({\n        ...oldState,\n        questionType: questionTypeProp,\n      }));\n    } else {\n      setMakeQuestionState({\n        questionId: currentQuestionId,\n        questionType: questionTable.byId[currentQuestionId].questionType,\n      });\n    }\n  }, [currentQuestionId, questionTypeProp]);\n\n  useEffect(() => {\n    const { questionType } = makeQuestionState;\n    switch (questionType) {\n      case questionTypes[0].name:\n        setQuestionBody(\n          <MakeFreeText\n            makeQuestion={makeQuestion}\n            questionId={currentQuestionId}\n          />\n        );\n        break;\n      case questionTypes[1].name:\n        setQuestionBody(\n          <MakeMultipleChoice\n            makeQuestion={makeQuestion}\n            questionId={currentQuestionId}\n          />\n        );\n        break;\n      default:\n        setQuestionBody(<div>Something went wrong</div>);\n        break;\n    }\n  }, [makeQuestionState]);\n\n  const makeQuestion = ({\n    questionContent,\n    bodyContent,\n    makeBody,\n    answerContent,\n    makeAnswer,\n  }) => {\n    HttpService.post(apiRoutes.QUESTION, { content: questionContent })\n      .then(({ data }) => {\n        makeBody({ id: data.id, bodyContent });\n        makeAnswer({ id: data.id, answerContent });\n      })\n      .catch((error) => {\n        console.error(\"error make Question\");\n      });\n  };\n\n  return <div>{questionBody}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}