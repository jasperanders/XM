{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { questionTypes } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nexport default function Question({\n  questionType: questionTypeProp\n}) {\n  /**\n   * React Hooks\n   */\n  const [makeQuestionState, setMakeQuestionState] = useState({\n    questionId: null,\n    questionType: null\n  });\n  const [questionBody, setQuestionBody] = useState( /*#__PURE__*/React.createElement(React.Fragment, null));\n  /**\n   * Redux\n   */\n\n  const currentQuestionId = useSelector(state => state.examState.currentQuestionId);\n  const questionTable = useSelector(state => state.questionTable);\n  /**\n   * Hook Form\n   */\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setMakeQuestionState(oldState => ({ ...oldState,\n        questionType: questionTypeProp\n      }));\n    } else {\n      setMakeQuestionState({\n        questionId: currentQuestionId,\n        questionType: questionTable.byId[currentQuestionId].questionType\n      });\n    }\n  }, [currentQuestionId, questionTypeProp]);\n  useEffect(() => {\n    const {\n      questionType\n    } = makeQuestionState;\n\n    switch (questionType) {\n      case questionTypes[0].name:\n        setQuestionBody( /*#__PURE__*/React.createElement(MakeFreeText, {\n          makeQuestion: makeQuestion,\n          questionId: currentQuestionId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }));\n        break;\n\n      case questionTypes[1].name:\n        setQuestionBody( /*#__PURE__*/React.createElement(MakeMultipleChoice, {\n          makeQuestion: makeQuestion,\n          questionId: currentQuestionId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }\n        }));\n        break;\n\n      default:\n        setQuestionBody( /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }\n        }, \"Something went wrong\"));\n        break;\n    }\n  }, [makeQuestionState]);\n\n  const makeQuestion = ({\n    questionContent,\n    bodyContent,\n    makeBody,\n    answerContent,\n    makeAnswer\n  }) => {\n    HttpService.post(apiRoutes.QUESTION, {\n      content: questionContent\n    }).then(({\n      data\n    }) => {\n      makeBody({\n        id: data.id,\n        bodyContent\n      });\n      makeAnswer({\n        id: data.id,\n        answerContent\n      });\n    }).catch(error => {\n      console.error(\"error make Question\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }\n  }, questionBody);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx"],"names":["React","useEffect","useState","useSelector","MakeFreeText","MakeMultipleChoice","questionTypes","HttpService","apiRoutes","Question","questionType","questionTypeProp","makeQuestionState","setMakeQuestionState","questionId","questionBody","setQuestionBody","currentQuestionId","state","examState","questionTable","oldState","byId","name","makeQuestion","questionContent","bodyContent","makeBody","answerContent","makeAnswer","post","QUESTION","content","then","data","id","catch","error","console"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,YAAY,EAAEC;AAAhB,CAAlB,EAAsD;AACnE;;;AAGA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CX,QAAQ,CAAC;AACzDY,IAAAA,UAAU,EAAE,IAD6C;AAEzDJ,IAAAA,YAAY,EAAE;AAF2C,GAAD,CAA1D;AAIA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,eAAC,yCAAD,CAAhD;AACA;;;;AAGA,QAAMe,iBAAiB,GAAGd,WAAW,CAClCe,KAAD,IAAuBA,KAAK,CAACC,SAAN,CAAgBF,iBADJ,CAArC;AAGA,QAAMG,aAAa,GAAGjB,WAAW,CAAEe,KAAD,IAAuBA,KAAK,CAACE,aAA9B,CAAjC;AAEA;;;;AAKA;;;;AAGAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,iBAAL,EAAwB;AACtBJ,MAAAA,oBAAoB,CAAEQ,QAAD,KAAe,EAClC,GAAGA,QAD+B;AAElCX,QAAAA,YAAY,EAAEC;AAFoB,OAAf,CAAD,CAApB;AAID,KALD,MAKO;AACLE,MAAAA,oBAAoB,CAAC;AACnBC,QAAAA,UAAU,EAAEG,iBADO;AAEnBP,QAAAA,YAAY,EAAEU,aAAa,CAACE,IAAd,CAAmBL,iBAAnB,EAAsCP;AAFjC,OAAD,CAApB;AAID;AACF,GAZQ,EAYN,CAACO,iBAAD,EAAoBN,gBAApB,CAZM,CAAT;AAcAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAES,MAAAA;AAAF,QAAmBE,iBAAzB;;AACA,YAAQF,YAAR;AACE,WAAKJ,aAAa,CAAC,CAAD,CAAb,CAAiBiB,IAAtB;AACEP,QAAAA,eAAe,eACb,oBAAC,YAAD;AACE,UAAA,YAAY,EAAEQ,YADhB;AAEE,UAAA,UAAU,EAAEP,iBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADa,CAAf;AAMA;;AACF,WAAKX,aAAa,CAAC,CAAD,CAAb,CAAiBiB,IAAtB;AACEP,QAAAA,eAAe,eACb,oBAAC,kBAAD;AACE,UAAA,YAAY,EAAEQ,YADhB;AAEE,UAAA,UAAU,EAAEP,iBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADa,CAAf;AAMA;;AACF;AACED,QAAAA,eAAe,eAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAD,CAAf;AACA;AAnBJ;AAqBD,GAvBQ,EAuBN,CAACJ,iBAAD,CAvBM,CAAT;;AAyBA,QAAMY,YAAY,GAAG,CAAC;AACpBC,IAAAA,eADoB;AAEpBC,IAAAA,WAFoB;AAGpBC,IAAAA,QAHoB;AAIpBC,IAAAA,aAJoB;AAKpBC,IAAAA;AALoB,GAAD,KAMf;AACJtB,IAAAA,WAAW,CAACuB,IAAZ,CAAiBtB,SAAS,CAACuB,QAA3B,EAAqC;AAAEC,MAAAA,OAAO,EAAEP;AAAX,KAArC,EACGQ,IADH,CACQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBP,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,EAAE,EAAED,IAAI,CAACC,EAAX;AAAeT,QAAAA;AAAf,OAAD,CAAR;AACAG,MAAAA,UAAU,CAAC;AAAEM,QAAAA,EAAE,EAAED,IAAI,CAACC,EAAX;AAAeP,QAAAA;AAAf,OAAD,CAAV;AACD,KAJH,EAKGQ,KALH,CAKUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd;AACD,KAPH;AAQD,GAfD;;AAiBA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMtB,YAAN,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { questionTypes } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function Question({ questionType: questionTypeProp }) {\n  /**\n   * React Hooks\n   */\n  const [makeQuestionState, setMakeQuestionState] = useState({\n    questionId: null,\n    questionType: null,\n  });\n  const [questionBody, setQuestionBody] = useState(<></>);\n  /**\n   * Redux\n   */\n  const currentQuestionId = useSelector(\n    (state: TRootState) => state.examState.currentQuestionId\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n\n  /**\n   * Hook Form\n   */\n\n\n  /**\n   * Effects\n   */\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setMakeQuestionState((oldState) => ({\n        ...oldState,\n        questionType: questionTypeProp,\n      }));\n    } else {\n      setMakeQuestionState({\n        questionId: currentQuestionId,\n        questionType: questionTable.byId[currentQuestionId].questionType,\n      });\n    }\n  }, [currentQuestionId, questionTypeProp]);\n\n  useEffect(() => {\n    const { questionType } = makeQuestionState;\n    switch (questionType) {\n      case questionTypes[0].name:\n        setQuestionBody(\n          <MakeFreeText\n            makeQuestion={makeQuestion}\n            questionId={currentQuestionId}\n          />\n        );\n        break;\n      case questionTypes[1].name:\n        setQuestionBody(\n          <MakeMultipleChoice\n            makeQuestion={makeQuestion}\n            questionId={currentQuestionId}\n          />\n        );\n        break;\n      default:\n        setQuestionBody(<div>Something went wrong</div>);\n        break;\n    }\n  }, [makeQuestionState]);\n\n  const makeQuestion = ({\n    questionContent,\n    bodyContent,\n    makeBody,\n    answerContent,\n    makeAnswer,\n  }) => {\n    HttpService.post(apiRoutes.QUESTION, { content: questionContent })\n      .then(({ data }) => {\n        makeBody({ id: data.id, bodyContent });\n        makeAnswer({ id: data.id, answerContent });\n      })\n      .catch((error) => {\n        console.error(\"error make Question\");\n      });\n  };\n\n  return <div>{questionBody}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}