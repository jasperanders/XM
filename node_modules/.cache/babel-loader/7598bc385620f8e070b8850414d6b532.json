{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Textarea, Button, Input } from \"theme-ui\";\nexport default function MakeFreeText({\n  register,\n  handleSubmit,\n  getValues,\n  setCurrentAnswerAction,\n  reset\n}) {\n  /**\n   * React Hooks\n   */\n  const [state, setstate] = useState(initialState);\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const {\n    currentQuestionId\n  } = useSelector(state => state.examState);\n  const questionTable = useSelector(state => state.questionTable);\n  const questionBodyFreeTextTable = useSelector(state => state.questionBodyFreeTextTable);\n  let question = undefined;\n  let questionBody = undefined;\n\n  if (currentQuestionId) {\n    question = questionTable.byId[currentQuestionId];\n    questionBody = questionBodyFreeTextTable.byId[currentQuestionId];\n  }\n  /**\n   * Form Hook\n   */\n\n\n  const onSubmit = data => {\n    console.log(\"submitted\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    name: \"questionTitle\",\n    placeholder: \"Provide a Question Title here\",\n    defaultValue: question ? question.title : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Textarea, {\n    rows: 5,\n    name: \"questionText\",\n    placeholder: \"Provide a question here.\",\n    ref: register,\n    defaultValue: question ? question.text : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      defaultChecked: false,\n      name: `${multipleChoiceFormName}[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }), possibleAnswer));\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Save and Next Question\"), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      marginRight: \"0.5rem\"\n    },\n    variant: \"warning\",\n    onClick: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"Save\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx"],"names":["React","useDispatch","useSelector","Textarea","Button","Input","MakeFreeText","register","handleSubmit","getValues","setCurrentAnswerAction","reset","state","setstate","useState","initialState","dispatch","currentQuestionId","examState","questionTable","questionBodyFreeTextTable","question","undefined","questionBody","byId","onSubmit","data","console","log","title","text","possibleAnswers","map","possibleAnswer","index","v4","multipleChoiceFormName","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Textarea, Button, Input, Grid } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\n\nexport default function MakeFreeText({\n  register,\n  handleSubmit,\n  getValues,\n  setCurrentAnswerAction,\n  reset,\n}) {\n  /**\n   * React Hooks\n   */\n\n   const [state, setstate] = useState(initialState)\n\n  /**\n   * Redux Hooks\n   */\n  const dispatch = useDispatch();\n  const { currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  const questionBodyFreeTextTable = useSelector(\n    (state: TRootState) => state.questionBodyFreeTextTable\n  );\n\n  let question = undefined;\n  let questionBody = undefined;\n\n  if (currentQuestionId) {\n    question = questionTable.byId[currentQuestionId];\n    questionBody = questionBodyFreeTextTable.byId[currentQuestionId];\n  }\n\n  /**\n   * Form Hook\n   */\n\n  const onSubmit = (data) => {\n    console.log(\"submitted\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input\n        ref={register}\n        name={\"questionTitle\"}\n        placeholder=\"Provide a Question Title here\"\n        defaultValue={question ? question.title : null}\n      />\n      <Textarea\n        rows={5}\n        name={\"questionText\"}\n        placeholder={\"Provide a question here.\"}\n        ref={register}\n        defaultValue={question ? question.text : null}\n      />\n\n      {possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`${multipleChoiceFormName}[${index}]`}\n                ref={register}\n              />\n              {possibleAnswer}\n            </Label>\n          </div>\n        );\n      })}\n      <Button type=\"submit\">Save and Next Question</Button>\n      <Button\n        sx={{ marginRight: \"0.5rem\" }}\n        variant=\"warning\"\n        onClick={() => {\n          reset();\n        }}\n      >\n        Reset\n      </Button>\n      <Button type=\"submit\">Save</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}