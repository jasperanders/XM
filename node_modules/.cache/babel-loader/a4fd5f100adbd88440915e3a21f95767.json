{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setAppTimer, countDownAppTimer } from \"../../redux/actions\";\nimport { store } from \"../../index\";\nexport default function Timer({\n  questionId\n}) {\n  const dispatch = useDispatch();\n  const timeLimit = useSelector(state => state.questions.byId[questionId].timeLimit);\n  const {\n    timerIsActive,\n    currentTime\n  } = useSelector(state => state.appState);\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  const dispatchSetAppTimer = payload => dispatch(setAppTimer(payload));\n\n  const dispatchCountDownAppTimer = payload => dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    let interval = null;\n\n    if (timerIsActive) {\n      if (currentTime === null) {\n        dispatchSetAppTimer({\n          timeLimit\n        });\n      }\n\n      interval = setInterval(() => {\n        dispatchCountDownAppTimer({\n          countDownBy: 1\n        });\n\n        if (store.getState().appState.currentTime <= 0) {\n          clearInterval(interval);\n          console.log(\"Next Question\");\n        }\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [questionId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }, \"Time remaining: \", currentTime);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","useSelector","useDispatch","setAppTimer","countDownAppTimer","store","Timer","questionId","dispatch","timeLimit","state","questions","byId","timerIsActive","currentTime","appState","timeLeft","setTimeLeft","dispatchSetAppTimer","payload","dispatchCountDownAppTimer","interval","setInterval","countDownBy","getState","clearInterval","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,qBAA/C;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA+B;AAC5C,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,SAAS,GAAGR,WAAW,CAC1BS,KAAD,IAAuBA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBL,UAArB,EAAiCE,SAD7B,CAA7B;AAGA,QAAM;AAAEI,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAiCb,WAAW,CAC/CS,KAAD,IAAuBA,KAAK,CAACK,QADmB,CAAlD;AAIA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,CAAD,CAAxC;;AAEA,QAAMkB,mBAAmB,GAAIC,OAAD,IAAaX,QAAQ,CAACL,WAAW,CAACgB,OAAD,CAAZ,CAAjD;;AACA,QAAMC,yBAAyB,GAAID,OAAD,IAChCX,QAAQ,CAACJ,iBAAiB,CAACe,OAAD,CAAlB,CADV;;AAGApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,QAAQ,GAAG,IAAf;;AACA,QAAIR,aAAJ,EAAmB;AACjB,UAAIC,WAAW,KAAK,IAApB,EAA0B;AACxBI,QAAAA,mBAAmB,CAAC;AAAET,UAAAA;AAAF,SAAD,CAAnB;AACD;;AACDY,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BF,QAAAA,yBAAyB,CAAC;AAAEG,UAAAA,WAAW,EAAE;AAAf,SAAD,CAAzB;;AACA,YAAIlB,KAAK,CAACmB,QAAN,GAAiBT,QAAjB,CAA0BD,WAA1B,IAAyC,CAA7C,EAAgD;AAC9CW,UAAAA,aAAa,CAACJ,QAAD,CAAb;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;AACF,OANqB,EAMnB,IANmB,CAAtB;AAOD;;AACD,WAAO,MAAM;AACXF,MAAAA,aAAa,CAACJ,QAAD,CAAb;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACd,UAAD,CAjBM,CAAT;AAmBA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAsBO,WAAtB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TRootState } from \"../../types/exam\";\nimport { setAppTimer, countDownAppTimer } from \"../../redux/actions\";\nimport { store } from \"../../index\";\n\nexport default function Timer({ questionId }) {\n  const dispatch = useDispatch();\n  const timeLimit = useSelector(\n    (state: TRootState) => state.questions.byId[questionId].timeLimit\n  );\n  const { timerIsActive, currentTime } = useSelector(\n    (state: TRootState) => state.appState\n  );\n\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  const dispatchSetAppTimer = (payload) => dispatch(setAppTimer(payload));\n  const dispatchCountDownAppTimer = (payload) =>\n    dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    let interval = null;\n    if (timerIsActive) {\n      if (currentTime === null) {\n        dispatchSetAppTimer({ timeLimit });\n      }\n      interval = setInterval(() => {\n        dispatchCountDownAppTimer({ countDownBy: 1 });\n        if (store.getState().appState.currentTime <= 0) {\n          clearInterval(interval);\n          console.log(\"Next Question\");\n        }\n      }, 1000);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [questionId]);\n\n  return <div>Time remaining: {currentTime}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}