{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/userContext.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const UserContext = React.createContext({\n  user: {}\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [user, setUser] = useState(false);\n  useEffect(() => {\n    loadUser();\n  }, []);\n  /**\n   * the loadUser function returns a promise, because we want to wait for the state to be set, before anything else\n   * happens. The state is only set only when there isn't already a user loaded and if an authtoken lies in the\n   * session storage. Otherwise the promise is resolved, without doing anything other.\n   * If an user is already loaded, we don't need to make an API-call, we just resolve the promise.\n   *\n   * The loadUser function does not return a user but loads the user into the UserContext.\n   * @returns {Promise<any>}\n   */\n\n  const loadUser = () => {\n    const authToken = storedAuthToken();\n\n    if (!user && authToken) {\n      return HttpService.get(apiRoutes.USER).then(({\n        data\n      }) => {\n        this.setStatePromise(this, {\n          user: data\n        });\n        this.renewAutoLogout();\n      }).catch(() => false);\n    }\n\n    return new Promise(resolve => resolve());\n  };\n\n  const wipeUser = () => setUser(false);\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(UserContext.Provider, {\n      value: {\n        user,\n        loadUser,\n        wipeUser\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/userContext.tsx"],"names":["React","useState","useEffect","HttpService","storedAuthToken","apiRoutes","UserContext","createContext","user","UserContextProvider","children","setUser","loadUser","authToken","get","USER","then","data","setStatePromise","renewAutoLogout","catch","Promise","resolve","wipeUser"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAoDC,SAApD,QAAqE,OAArE;AAGA,OAAOC,WAAP,IAAsBC,eAAtB,QAA6C,QAA7C;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAApB,CAApB;AAEP,eAAe,SAASC,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACxD,QAAM,CAACF,IAAD,EAAOG,OAAP,IAAkBV,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA;;;;;;;;;;AASA,QAAMA,QAAQ,GAAG,MAAM;AACrB,UAAMC,SAAS,GAAGT,eAAe,EAAjC;;AACA,QAAI,CAACI,IAAD,IAASK,SAAb,EAAwB;AACtB,aAAOV,WAAW,CAACW,GAAZ,CAAgBT,SAAS,CAACU,IAA1B,EACJC,IADI,CACC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAc;AAClB,aAAKC,eAAL,CAAqB,IAArB,EAA2B;AAAEV,UAAAA,IAAI,EAAES;AAAR,SAA3B;AACA,aAAKE,eAAL;AACD,OAJI,EAKJC,KALI,CAKE,MAAM,KALR,CAAP;AAMD;;AACD,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaA,OAAO,EAAhC,CAAP;AACD,GAXD;;AAaA,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAAC,KAAD,CAA9B;;AAEA;AAAA;AACE;AACA;AACA;AACA;AACA,wBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AACLH,QAAAA,IADK;AAELI,QAAAA,QAFK;AAGLW,QAAAA;AAHK,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGb,QAPH;AALF;AAeD","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const UserContext = React.createContext({ user: {} });\n\nexport default function UserContextProvider({ children }) {\n  const [user, setUser] = useState(false);\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  /**\n   * the loadUser function returns a promise, because we want to wait for the state to be set, before anything else\n   * happens. The state is only set only when there isn't already a user loaded and if an authtoken lies in the\n   * session storage. Otherwise the promise is resolved, without doing anything other.\n   * If an user is already loaded, we don't need to make an API-call, we just resolve the promise.\n   *\n   * The loadUser function does not return a user but loads the user into the UserContext.\n   * @returns {Promise<any>}\n   */\n  const loadUser = () => {\n    const authToken = storedAuthToken();\n    if (!user && authToken) {\n      return HttpService.get(apiRoutes.USER)\n        .then(({ data }) => {\n          this.setStatePromise(this, { user: data });\n          this.renewAutoLogout();\n        })\n        .catch(() => false);\n    }\n    return new Promise((resolve) => resolve());\n  };\n\n  const wipeUser = () => setUser(false);\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <UserContext.Provider\n      value={{\n        user,\n        loadUser,\n        wipeUser,\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}