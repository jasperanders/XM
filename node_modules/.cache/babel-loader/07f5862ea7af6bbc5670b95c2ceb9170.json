{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { ANSWER_FREE_TEXT_QUESTION, ANSWER_MULTIPLE_CHOICE_QUESTION, SET_ANSWER_START_TIME, SET_ANSWER_END_TIME, NEXT_QUESTION, SET_CURRENT_QUESTION_ID, SET_ANSWER_TABLE, SET_EXAM_TABLE, SET_EXAM_STATE, SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE, SET_QUESTION_BODY_FREE_TEXT_TABLE, SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE, SET_ANSWER_BODY_FREE_TEXT_TABLE, SET_QUESTION_TABLE } from \"./actions\";\nimport { initialAnswerTable, initialExamState, initialExamTable, initialQuestionTable, initialAnswerBodyMultipleChoiceTable, initialQuestionBodyMultipleChoiceTable, initialAnswerBodyFreeTextTable, initialQuestionBodyFreeTextTable } from \"./initialState\";\n\n// ================= Basic Tables =====================\nfunction questionTable(state = initialQuestionTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_QUESTION_TABLE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_ANSWER_TABLE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    case SET_ANSWER_START_TIME:\n      return produce(state, d => {\n        const answer = d.byId[payload.questionId];\n\n        if (answer.timeStart === null) {\n          answer.timeStart = Date.now();\n        }\n      });\n\n    case SET_ANSWER_END_TIME:\n      return produce(state, d => {\n        let answer = d.byId[payload.questionId];\n        answer.timeEnd = Date.now();\n        answer.timeExpired = true;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_EXAM_TABLE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examState(state = initialExamState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_EXAM_STATE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    case NEXT_QUESTION:\n      return produce(state, d => {\n        if (payload.currentExam.questionsById.length > d.currentQuestionIndex + 1 // else index out of bounds\n        ) {\n            d.currentQuestionIndex += 1;\n            d.currentQuestionId = payload.currentExam.questionsById[d.currentQuestionIndex];\n          } else {\n          d.examFinished = true;\n        }\n      });\n\n    case SET_CURRENT_QUESTION_ID:\n      return produce(state, d => {\n        d.currentQuestionId = payload.newQuestionId;\n        d.currentQuestionIndex = payload.newQuestionIndex ? payload.newQuestionIndex : null;\n      });\n\n    default:\n      return state;\n  }\n} // ================= Body Tables =====================\n\n\nfunction questionBodyMultipleChoiceTable(state = initialQuestionBodyMultipleChoiceTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction questionBodyFreeTextTable(state = initialQuestionBodyFreeTextTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_QUESTION_BODY_FREE_TEXT_TABLE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyFreeTextTable(state = initialAnswerBodyFreeTextTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_ANSWER_BODY_FREE_TEXT_TABLE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, d => {\n        const answer = d.byId[payload.questionId];\n        answer.answerText = payload.answer;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(state = initialAnswerBodyMultipleChoiceTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE:\n      return produce(state, d => {\n        d = payload.newTable;\n        return d;\n      });\n\n    case ANSWER_MULTIPLE_CHOICE_QUESTION:\n      return produce(state, d => {\n        d.byId[payload.questionId].selectedAnswers = payload.selectedAnswers;\n      });\n\n    default:\n      return state;\n  }\n} // =================== Root Reducer =================\n\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/redux/reducers.ts"],"names":["combineReducers","produce","ANSWER_FREE_TEXT_QUESTION","ANSWER_MULTIPLE_CHOICE_QUESTION","SET_ANSWER_START_TIME","SET_ANSWER_END_TIME","NEXT_QUESTION","SET_CURRENT_QUESTION_ID","SET_ANSWER_TABLE","SET_EXAM_TABLE","SET_EXAM_STATE","SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE","SET_QUESTION_BODY_FREE_TEXT_TABLE","SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE","SET_ANSWER_BODY_FREE_TEXT_TABLE","SET_QUESTION_TABLE","initialAnswerTable","initialExamState","initialExamTable","initialQuestionTable","initialAnswerBodyMultipleChoiceTable","initialQuestionBodyMultipleChoiceTable","initialAnswerBodyFreeTextTable","initialQuestionBodyFreeTextTable","questionTable","state","type","payload","d","newTable","answerTable","answer","byId","questionId","timeStart","Date","now","timeEnd","timeExpired","examTable","examState","currentExam","questionsById","length","currentQuestionIndex","currentQuestionId","examFinished","newQuestionId","newQuestionIndex","questionBodyMultipleChoiceTable","questionBodyFreeTextTable","answerBodyFreeTextTable","answerText","answerBodyMultipleChoiceTable","selectedAnswers","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  ANSWER_MULTIPLE_CHOICE_QUESTION,\n  SET_ANSWER_START_TIME,\n  SET_ANSWER_END_TIME,\n  NEXT_QUESTION,\n  SET_APP_TIMER,\n  COUNT_DOWN_APP_TIMER,\n  SET_CURRENT_QUESTION_ID,\n  SET_ANSWER_TABLE,\n  SET_EXAM_TABLE,\n  SET_EXAM_STATE,\n  SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE,\n  SET_QUESTION_BODY_FREE_TEXT_TABLE,\n  SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE,\n  SET_ANSWER_BODY_FREE_TEXT_TABLE,\n  SET_QUESTION_TABLE,\n} from \"./actions\";\nimport {\n  initialAnswerTable,\n  initialExamState,\n  initialExamTable,\n  initialQuestionTable,\n  initialAnswerBodyMultipleChoiceTable,\n  initialQuestionBodyMultipleChoiceTable,\n  initialAnswerBodyFreeTextTable,\n  initialQuestionBodyFreeTextTable,\n} from \"./initialState\";\nimport { history } from \"../index\";\n\n// ================= Basic Tables =====================\n\nfunction questionTable(state = initialQuestionTable, { type, payload }) {\n  switch (type) {\n    case SET_QUESTION_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, { type, payload }) {\n  switch (type) {\n    case SET_ANSWER_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case SET_ANSWER_START_TIME:\n      return produce(state, (d) => {\n        const answer = d.byId[payload.questionId];\n        if (answer.timeStart === null) {\n          answer.timeStart = Date.now();\n        }\n      });\n    case SET_ANSWER_END_TIME:\n      return produce(state, (d) => {\n        let answer = d.byId[payload.questionId];\n        answer.timeEnd = Date.now();\n        answer.timeExpired = true;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, { type, payload }) {\n  switch (type) {\n    case SET_EXAM_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction examState(state = initialExamState, { type, payload }) {\n  switch (type) {\n    case SET_EXAM_STATE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case NEXT_QUESTION:\n      return produce(state, (d) => {\n        if (\n          payload.currentExam.questionsById.length >\n          d.currentQuestionIndex + 1 // else index out of bounds\n        ) {\n          d.currentQuestionIndex += 1;\n          d.currentQuestionId =\n            payload.currentExam.questionsById[d.currentQuestionIndex];\n        } else {\n          d.examFinished = true;\n        }\n      });\n    case SET_CURRENT_QUESTION_ID:\n      return produce(state, (d) => {\n        d.currentQuestionId = payload.newQuestionId;\n        d.currentQuestionIndex = payload.newQuestionIndex\n          ? payload.newQuestionIndex\n          : null;\n      });\n\n    default:\n      return state;\n  }\n}\n\n// ================= Body Tables =====================\n\nfunction questionBodyMultipleChoiceTable(\n  state = initialQuestionBodyMultipleChoiceTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction questionBodyFreeTextTable(\n  state = initialQuestionBodyFreeTextTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_QUESTION_BODY_FREE_TEXT_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyFreeTextTable(\n  state = initialAnswerBodyFreeTextTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_ANSWER_BODY_FREE_TEXT_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, (d) => {\n        const answer = d.byId[payload.questionId];\n        answer.answerText = payload.answer;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(\n  state = initialAnswerBodyMultipleChoiceTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case ANSWER_MULTIPLE_CHOICE_QUESTION:\n      return produce(state, (d) => {\n        d.byId[payload.questionId].selectedAnswers = payload.selectedAnswers;\n      });\n    default:\n      return state;\n  }\n}\n\n// =================== Root Reducer =================\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}