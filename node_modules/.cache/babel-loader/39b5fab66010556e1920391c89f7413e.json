{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nimport { useForm, Controller } from \"react-hook-form\";\nexport default function MakeMultipleChoice({\n  makeQuestion,\n  questionId\n}) {\n  /**\n   * React Hooks\n   */\n  const [multipleChoiceState, setMultipleChoiceState] = useState({\n    title: \"\",\n    text: \"\",\n    possibleAnswers: [\"\", \"\"],\n    points: null\n  });\n  /**\n   * Redux Hooks\n   */\n\n  const questionTable = useSelector(state => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(state => state.questionBodyMultipleChoiceTable);\n  /**\n   * Form Hook\n   */\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    control,\n    reset,\n    getValues\n  } = useForm();\n  /**\n   * Effect\n   *\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMultipleChoiceState({\n        title: questionTable.byId[questionId].title,\n        text: questionTable.byId[questionId].text,\n        possibleAnswers: questionBodyMultipleChoiceTable.byId[questionId].possibleAnswers,\n        points: null\n      });\n    } else {\n      setMultipleChoiceState({\n        title: \"\",\n        text: \"\",\n        possibleAnswers: [\"\", \"\"],\n        points: null\n      });\n    }\n  }, [questionId]);\n  useEffect(() => {\n    reset();\n  }, [multipleChoiceState.possibleAnswers]);\n  /**\n   * Functions\n   */\n\n  const checkedIndex = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      el === correct[idx] ? res.push(true) : res.push(false);\n    });\n    return res;\n  };\n\n  const checkedSolutions = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      if (correct[idx]) res.push(el);\n    });\n    return res;\n  };\n\n  const makeBody = ({\n    id,\n    bodyContent\n  }) => {\n    HttpService.post(apiRoutes.MULTIPLE_CHOICE_QUESTION, {\n      content: {\n        questionId: id,\n        possibleAnswers: bodyContent.possibleAnswers\n      }\n    }).catch(() => {\n      console.error(\"error make body\");\n    });\n  };\n\n  const makeAnswer = ({\n    id,\n    answerContent\n  }) => {\n    const answerData = {\n      questionId: id,\n      master: true\n    };\n    const answerBody = {\n      questionId: id,\n      answers: answerContent.selectedAnswers\n    };\n    HttpService.post(apiRoutes.ANSWER, {\n      content: answerData\n    }).then(({\n      data\n    }) => {\n      HttpService.post(apiRoutes.MULTIPLE_CHOICE_ANSWER, {\n        content: {\n          answerId: data.id,\n          ...answerBody\n        }\n      }).catch(() => {\n        console.log(\"error make answer body\");\n      });\n    }).catch(() => {\n      console.log(\"error make answer\");\n    });\n  };\n\n  const onSubmit = data => {\n    const selectedAnswers = checkedSolutions(data.multipleChoiceAnswerText, data.multipleChoiceAnswer);\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"multipleChoice\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: {\n        possibleAnswers: data.multipleChoiceAnswerText\n      },\n      makeBody,\n      answerContent: {\n        selectedAnswers\n      },\n      makeAnswer\n    });\n  };\n\n  const {\n    possibleAnswers,\n    title,\n    text\n  } = multipleChoiceState;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    name: \"questionTitle\",\n    placeholder: \"Provide a Question Title here\",\n    defaultValue: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Textarea, {\n    rows: 5,\n    name: \"questionText\",\n    placeholder: \"Provide a question here.\",\n    ref: register,\n    defaultValue: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      flexGrow: 0\n    },\n    onClick: () => {\n      setMultipleChoiceState(old => ({ ...old,\n        possibleAnswers: [...old.possibleAnswers, \"\"]\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, \"Add Answer\"), possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      style: {\n        marginTop: \"0.5rem\",\n        alignContent: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Flex, {\n      sx: {\n        flexDirection: \"row\",\n        alignSelf: \"stretch\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Controller, {\n      sx: {\n        marginTop: \"0.5rem\"\n      },\n      as: Checkbox,\n      name: `multipleChoiceAnswer[${index}]`,\n      control: control,\n      defaultValue: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      ref: register,\n      name: `multipleChoiceAnswerText[${index}]`,\n      placeholder: \"Provide an Answer\",\n      defaultValue: possibleAnswer ? possibleAnswer : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      sx: {\n        margin: \"0\",\n        marginLeft: \"0.5rem\"\n      },\n      variant: \"warning\",\n      onClick: () => {\n        setMultipleChoiceState(old => {\n          old.possibleAnswers.splice(index, 1);\n          return old;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, \"x\")));\n  }), /*#__PURE__*/React.createElement(Input, {\n    sx: {\n      marginTop: \"0.5rem\",\n      maxWidth: \"20%\"\n    },\n    ref: register,\n    name: \"questionPoints\",\n    type: \"number\",\n    placeholder: \"Points\",\n    defaultValue: multipleChoiceState.points,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      marginRight: \"0.5rem\"\n    },\n    variant: \"warning\",\n    onClick: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx"],"names":["React","useState","useEffect","useSelector","v4","Textarea","Button","Input","Flex","Label","Checkbox","HttpService","apiRoutes","useForm","Controller","MakeMultipleChoice","makeQuestion","questionId","multipleChoiceState","setMultipleChoiceState","title","text","possibleAnswers","points","questionTable","state","questionBodyMultipleChoiceTable","register","handleSubmit","watch","errors","control","reset","getValues","byId","checkedIndex","possible","correct","res","map","el","idx","push","checkedSolutions","makeBody","id","bodyContent","post","MULTIPLE_CHOICE_QUESTION","content","catch","console","error","makeAnswer","answerContent","answerData","master","answerBody","answers","selectedAnswers","ANSWER","then","data","MULTIPLE_CHOICE_ANSWER","answerId","log","onSubmit","multipleChoiceAnswerText","multipleChoiceAnswer","questionData","timeLimitMs","questionType","questionTitle","questionText","questionPoints","questionContent","flexDirection","alignItems","flexGrow","old","possibleAnswer","index","marginTop","alignContent","alignSelf","margin","marginLeft","splice","maxWidth","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\n\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nexport default function MakeMultipleChoice({ makeQuestion, questionId }) {\n  /**\n   * React Hooks\n   */\n\n  const [multipleChoiceState, setMultipleChoiceState] = useState({\n    title: \"\",\n    text: \"\",\n    possibleAnswers: [\"\", \"\"],\n    points: null,\n  });\n\n  /**\n   * Redux Hooks\n   */\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  /**\n   * Form Hook\n   */\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    control,\n    reset,\n    getValues,\n  } = useForm();\n\n  /**\n   * Effect\n   *\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMultipleChoiceState({\n        title: questionTable.byId[questionId].title,\n        text: questionTable.byId[questionId].text,\n        possibleAnswers:\n          questionBodyMultipleChoiceTable.byId[questionId].possibleAnswers,\n        points: null,\n      });\n    } else {\n      setMultipleChoiceState({\n        title: \"\",\n        text: \"\",\n        possibleAnswers: [\"\", \"\"],\n        points: null,\n      });\n    }\n  }, [questionId]);\n\n  useEffect(() => {\n    reset();\n  }, [multipleChoiceState.possibleAnswers]);\n\n  /**\n   * Functions\n   */\n\n  const checkedIndex = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      el === correct[idx] ? res.push(true) : res.push(false);\n    });\n    return res;\n  };\n\n  const checkedSolutions = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      if (correct[idx]) res.push(el);\n    });\n    return res;\n  };\n\n  const makeBody = ({ id, bodyContent }) => {\n    HttpService.post(apiRoutes.MULTIPLE_CHOICE_QUESTION, {\n      content: { questionId: id, possibleAnswers: bodyContent.possibleAnswers },\n    }).catch(() => {\n      console.error(\"error make body\");\n    });\n  };\n\n  const makeAnswer = ({ id, answerContent }) => {\n    const answerData = { questionId: id, master: true };\n    const answerBody = {\n      questionId: id,\n      answers: answerContent.selectedAnswers,\n    };\n    HttpService.post(apiRoutes.ANSWER, { content: answerData })\n      .then(({ data }) => {\n        HttpService.post(apiRoutes.MULTIPLE_CHOICE_ANSWER, {\n          content: {\n            answerId: data.id,\n            ...answerBody,\n          },\n        }).catch(() => {\n          console.log(\"error make answer body\");\n        });\n      })\n      .catch(() => {\n        console.log(\"error make answer\");\n      });\n  };\n\n  const onSubmit = (data) => {\n    const selectedAnswers = checkedSolutions(\n      data.multipleChoiceAnswerText,\n      data.multipleChoiceAnswer\n    );\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"multipleChoice\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints,\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: { possibleAnswers: data.multipleChoiceAnswerText },\n      makeBody,\n      answerContent: { selectedAnswers },\n      makeAnswer,\n    });\n  };\n\n  const { possibleAnswers, title, text } = multipleChoiceState;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex\n        sx={{\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        <Input\n          ref={register}\n          name={\"questionTitle\"}\n          placeholder=\"Provide a Question Title here\"\n          defaultValue={title}\n        />\n        <Textarea\n          rows={5}\n          name={\"questionText\"}\n          placeholder={\"Provide a question here.\"}\n          ref={register}\n          defaultValue={text}\n        />\n        <Button\n          sx={{ flexGrow: 0 }}\n          onClick={() => {\n            setMultipleChoiceState((old) => ({\n              ...old,\n              possibleAnswers: [...old.possibleAnswers, \"\"],\n            }));\n          }}\n        >\n          Add Answer\n        </Button>\n\n        {possibleAnswers.map((possibleAnswer, index) => {\n          return (\n            <div\n              key={v4()}\n              style={{ marginTop: \"0.5rem\", alignContent: \"center\" }}\n            >\n              <Flex\n                sx={{\n                  flexDirection: \"row\",\n                  alignSelf: \"stretch\",\n                }}\n              >\n                <Label>\n                  {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n                  <Controller\n                    sx={{ marginTop: \"0.5rem\" }}\n                    as={Checkbox}\n                    name={`multipleChoiceAnswer[${index}]`}\n                    control={control}\n                    defaultValue={false}\n                  />\n                  <Input\n                    ref={register}\n                    name={`multipleChoiceAnswerText[${index}]`}\n                    placeholder=\"Provide an Answer\"\n                    defaultValue={possibleAnswer ? possibleAnswer : null}\n                  />\n                </Label>\n                <Button\n                  sx={{ margin: \"0\", marginLeft: \"0.5rem\" }}\n                  variant=\"warning\"\n                  onClick={() => {\n                    setMultipleChoiceState((old) => {\n                      old.possibleAnswers.splice(index, 1);\n                    return old;\n                    });\n                  }}\n                >\n                  x\n                </Button>\n              </Flex>\n            </div>\n          );\n        })}\n        <Input\n          sx={{ marginTop: \"0.5rem\", maxWidth: \"20%\" }}\n          ref={register}\n          name={\"questionPoints\"}\n          type=\"number\"\n          placeholder=\"Points\"\n          defaultValue={multipleChoiceState.points}\n        />\n        <Flex>\n          <Button\n            sx={{ marginRight: \"0.5rem\" }}\n            variant=\"warning\"\n            onClick={() => {\n              reset();\n            }}\n          >\n            Reset\n          </Button>\n          <Button type=\"submit\">Save</Button>\n        </Flex>\n      </Flex>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}