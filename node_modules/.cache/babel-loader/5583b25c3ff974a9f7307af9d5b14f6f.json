{"ast":null,"code":"import { v4 } from \"uuid\";\nconst question_01_body = {\n  questionBodyId: v4(),\n  title: \"That is the Question\",\n  text: \"What does the Fox say?\"\n};\nconst question_02_body = {\n  questionBodyId: v4(),\n  title: \"Even better Question\",\n  text: \"How many roads must a man walk down?\"\n};\nconst question_03_body;\nconst question_01 = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  bodyId: question_01_body.questionBodyId,\n  timeLimitMs: 5000\n}; // =========================================\n// =========================================\n// =========================================\n\nexport const initialExam = {\n  byId: {\n    exam_01: {\n      id: \"exam_01\",\n      name: \"Platform Economy\",\n      questionsById: [\"question_01\", \"question_03\", \"question_02\"]\n    }\n  },\n  allIds: [\"exam_01\"],\n  currentExam: {\n    id: \"exam_01\",\n    currentQuestionIndex: 0\n  }\n};\nexport const initialQuestions = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionTitle: \"General Question\",\n      questionText: \"What does the fox say?\",\n      answerType: \"freeText\",\n      answerText: \"quest01\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionTitle: \"General Question\",\n      questionText: \"How many roads must a man walk down?\",\n      answerType: \"freeText\",\n      answerText: \"quest02\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false\n    }\n  },\n  allIds: [\"question_01\", \"question_02\"]\n};\nexport const initialMultipleChoiceQuestions = {\n  byId: {\n    question_03: {\n      questionId: \"question_03\",\n      questionTitle: \"\",\n      questionText: \"Ja, oder Nein\",\n      answerType: \"multipleChoice\",\n      possibleAnswers: [\"Ja\", \"Nein\"],\n      answerSelection: [],\n      timeLimit: 51,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false\n    }\n  },\n  allIds: [\"question_03\"]\n};\nexport const initialQuestionTypes = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionType: \"freeTextQuestion\"\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionType: \"freeTextQuestion\"\n    },\n    question_03: {\n      questionId: \"question_03\",\n      questionType: \"multipleChoiceQuestion\"\n    }\n  },\n  allIds: [\"question_01\", \"question_02\", \"question_03\"]\n};\nexport const initialAppState = {\n  currentTime: null,\n  timerIsActive: true\n};","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/initialState.ts"],"names":["v4","question_01_body","questionBodyId","title","text","question_02_body","question_03_body","question_01","questionId","questionType","bodyId","timeLimitMs","initialExam","byId","exam_01","id","name","questionsById","allIds","currentExam","currentQuestionIndex","initialQuestions","questionTitle","questionText","answerType","answerText","timeLimit","timeUsed","timeStart","timeEnd","timeExpired","question_02","initialMultipleChoiceQuestions","question_03","possibleAnswers","answerSelection","initialQuestionTypes","initialAppState","currentTime","timerIsActive"],"mappings":"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","sourcesContent":["import { v4 } from \"uuid\";\nimport { TQuestion, TQuestionBodyFreeText } from \"../types/exam\";\n\nconst question_01_body: TQuestionBodyFreeText = {\n  questionBodyId: v4(),\n  title: \"That is the Question\",\n  text: \"What does the Fox say?\",\n};\n\nconst question_02_body: TQuestionBodyFreeText = {\n  questionBodyId: v4(),\n  title: \"Even better Question\",\n  text: \"How many roads must a man walk down?\",\n};\n\nconst question_03_body: Tques\n\nconst question_01: TQuestion = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  bodyId: question_01_body.questionBodyId,\n  timeLimitMs: 5000,\n};\n\n// =========================================\n// =========================================\n// =========================================\n\nexport const initialExam: TExamState = {\n  byId: {\n    exam_01: {\n      id: \"exam_01\",\n      name: \"Platform Economy\",\n      questionsById: [\"question_01\", \"question_03\", \"question_02\"],\n    },\n  },\n  allIds: [\"exam_01\"],\n  currentExam: {\n    id: \"exam_01\",\n    currentQuestionIndex: 0,\n  },\n};\n\nexport const initialQuestions: TFreeTextQuestionState = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionTitle: \"General Question\",\n      questionText: \"What does the fox say?\",\n      answerType: \"freeText\",\n      answerText: \"quest01\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionTitle: \"General Question\",\n      questionText: \"How many roads must a man walk down?\",\n      answerType: \"freeText\",\n      answerText: \"quest02\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n  },\n  allIds: [\"question_01\", \"question_02\"],\n};\n\nexport const initialMultipleChoiceQuestions: TMultipleChoiceQuestionState = {\n  byId: {\n    question_03: {\n      questionId: \"question_03\",\n      questionTitle: \"\",\n      questionText: \"Ja, oder Nein\",\n      answerType: \"multipleChoice\",\n      possibleAnswers: [\"Ja\", \"Nein\"],\n      answerSelection: [],\n      timeLimit: 51,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n  },\n  allIds: [\"question_03\"],\n};\n\nexport const initialQuestionTypes: TQuestionTypes = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionType: \"freeTextQuestion\",\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionType: \"freeTextQuestion\",\n    },\n    question_03: {\n      questionId: \"question_03\",\n      questionType: \"multipleChoiceQuestion\",\n    },\n  },\n  allIds: [\"question_01\", \"question_02\", \"question_03\"],\n};\n\nexport const initialAppState = {\n  currentTime: null,\n  timerIsActive: true,\n};\n"]},"metadata":{},"sourceType":"module"}