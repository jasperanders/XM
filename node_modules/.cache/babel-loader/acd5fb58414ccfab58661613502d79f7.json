{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport HttpService from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport { setExamTable, setQuestionTable } from \"../redux/actions\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: {\n    rows: []\n  },\n  allQuestions: {\n    rows: []\n  } // allExams: { rows: [] },\n\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [allUsers, setAllUsers] = useState({\n    rows: []\n  });\n  const [allQuestions, setAllQuestions] = useState({\n    rows: []\n  });\n  const [allExams, setAllExams] = useState({\n    rows: []\n  });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({\n    rows: []\n  });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({\n    rows: []\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllExams();\n  }, []);\n  useEffect(() => {\n    const newTable = {};\n    allExams.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.push({\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById\n      });\n    });\n    dispatch(setExamTable({\n      newTable: {}\n    }));\n  }, [allExams]);\n  useEffect(() => {\n    const newTable = [];\n    allQuestions.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.push({\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title\n      });\n    });\n    dispatch(setQuestionTable({\n      newTable: {}\n    }));\n  }, [allQuestions]);\n  useEffect(() => {\n    const newTable = [];\n    allQuestions.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.push({\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title\n      });\n    });\n    dispatch(setQuestionTable({\n      newTable: {}\n    }));\n  }, [allQuestions]);\n  useEffect(() => {\n    const newTable = [];\n    allFreeTextQuestion.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.push({\n        questionId: _id\n      });\n    });\n    dispatch(setQuestionTable({\n      newTable: {}\n    }));\n  }, [allFreeTextQuestion]);\n  useEffect(() => {\n    const newTable = [];\n    allMultipleChoice.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.push({\n        questionId: _id,\n        possibleAnswers: content.possibleAnswers\n      });\n    });\n    dispatch(setQuestionTable({\n      newTable: {}\n    }));\n  }, [allMultipleChoice]);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({\n      data\n    }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({\n      data\n    }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM).then(({\n      data\n    }) => {\n      setAllExams(data);\n    }).catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({\n      data\n    }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(({\n      data\n    }) => {\n      setAllMultipleChoice(data);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(ExamContext.Provider, {\n      value: {\n        allQuestions,\n        loadAllUsers,\n        allUsers\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx"],"names":["React","useState","useEffect","HttpService","apiRoutes","useDispatch","setExamTable","setQuestionTable","ExamContext","createContext","loadAllUsers","allUsers","rows","allQuestions","UserContextProvider","children","setAllUsers","setAllQuestions","allExams","setAllExams","allFreeTextQuestion","setAllFreeTextQuestion","allMultipleChoice","setAllMultipleChoice","dispatch","loadAllQuestions","loadAllExams","newTable","map","_id","content","push","examId","name","questionsById","questionId","questionType","text","timeLimitMs","title","possibleAnswers","get","USER","then","data","QUESTION","EXAM","catch","loadAllFreeText","FREE_TEXT_QUESTION","loadAllMultipleChoice","MULTIPLE_CHOICE_QUESTION"],"mappings":"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","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport { setExamTable, setQuestionTable } from \"../redux/actions\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: { rows: [] },\n  allQuestions: { rows: [] },\n  // allExams: { rows: [] },\n});\n\nexport default function UserContextProvider({ children }) {\n  const [allUsers, setAllUsers] = useState({ rows: [] });\n  const [allQuestions, setAllQuestions] = useState({ rows: [] });\n  const [allExams, setAllExams] = useState({ rows: [] });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({ rows: [] });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({ rows: [] });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllExams();\n  }, []);\n\n  useEffect(() => {\n    const newTable = {};\n    allExams.rows.map(({ _id, content }) => {\n      newTable.push({\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById,\n      });\n    });\n    dispatch(setExamTable({ newTable: {} }));\n  }, [allExams]);\n\n  useEffect(() => {\n    const newTable = [];\n    allQuestions.rows.map(({ _id, content }) => {\n      newTable.push({\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title,\n      });\n    });\n    dispatch(setQuestionTable({ newTable: {} }));\n  }, [allQuestions]);\n\n  useEffect(() => {\n    const newTable = [];\n    allQuestions.rows.map(({ _id, content }) => {\n      newTable.push({\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title,\n      });\n    });\n    dispatch(setQuestionTable({ newTable: {} }));\n  }, [allQuestions]);\n\n  useEffect(() => {\n    const newTable = [];\n    allFreeTextQuestion.rows.map(({ _id, content }) => {\n      newTable.push({\n        questionId: _id,\n      });\n    });\n    dispatch(setQuestionTable({ newTable: {} }));\n  }, [allFreeTextQuestion]);\n\n  useEffect(() => {\n    const newTable = [];\n    allMultipleChoice.rows.map(({ _id, content }) => {\n      newTable.push({\n        questionId: _id,\n        possibleAnswers: content.possibleAnswers,\n      });\n    });\n    dispatch(setQuestionTable({ newTable: {} }));\n  }, [allMultipleChoice]);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({ data }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM)\n      .then(({ data }) => {\n        setAllExams(data);\n      })\n      .catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({ data }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(\n      ({ data }) => {\n        setAllMultipleChoice(data);\n      }\n    );\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        allQuestions,\n        loadAllUsers,\n        allUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}