{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { questionTypes } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nexport default function Question({\n  questionType: questionTypeProp\n}) {\n  /**\n   * React Hooks\n   */\n  const [questionType, setQuestionType] = useState(\"\");\n  const [questionBody, setQuestionBody] = useState( /*#__PURE__*/React.createElement(React.Fragment, null));\n  /**\n   * Redux\n   */\n\n  const currentQuestionId = useSelector(state => state.examState.currentQuestionId);\n  const questionTable = useSelector(state => state.questionTable);\n  /**\n   * Hook Form\n   */\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setQuestionType(questionTypeProp);\n    } else {\n      console.log(\"new question type is\");\n      console.log(questionTable.byId[currentQuestionId].questionType);\n      setQuestionType(questionTable.byId[currentQuestionId].questionType);\n    }\n  }, [currentQuestionId, questionTypeProp]);\n  useEffect(() => {\n    console.log(\"using questionType\");\n    console.log(questionType);\n\n    switch (questionType) {\n      case questionTypes[0].name:\n        setQuestionBody( /*#__PURE__*/React.createElement(MakeFreeText, {\n          register: register,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          reset: reset,\n          questionId: currentQuestionId,\n          makeQuestion: makeQuestion,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }\n        }));\n        break;\n\n      case questionTypes[1].name:\n        setQuestionBody( /*#__PURE__*/React.createElement(MakeMultipleChoice, {\n          register: register,\n          questionId: currentQuestionId,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          reset: reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }\n        }));\n        break;\n\n      default:\n        setQuestionBody( /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }\n        }, \"Something went wrong\"));\n        break;\n    }\n  }, [questionType]);\n\n  const makeQuestion = ({\n    questionContent,\n    bodyContent,\n    makeBody,\n    answerContent,\n    makeAnswer\n  }) => {\n    HttpService.post(apiRoutes.QUESTION, {\n      content: questionContent\n    }).then(({\n      data\n    }) => {\n      makeBody({\n        id: data.id,\n        bodyContent\n      });\n      makeAnswer({\n        id: data.id,\n        answerContent\n      });\n    }).catch(error => {\n      console.log(\"error make Question\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 10\n    }\n  }, questionBody);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx"],"names":["React","useEffect","useState","useSelector","useForm","MakeFreeText","MakeMultipleChoice","questionTypes","HttpService","apiRoutes","Question","questionType","questionTypeProp","setQuestionType","questionBody","setQuestionBody","currentQuestionId","state","examState","questionTable","register","handleSubmit","watch","errors","reset","getValues","console","log","byId","name","makeQuestion","questionContent","bodyContent","makeBody","answerContent","makeAnswer","post","QUESTION","content","then","data","id","catch","error"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { questionTypes } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function Question({ questionType: questionTypeProp }) {\n  /**\n   * React Hooks\n   */\n  const [questionType, setQuestionType] = useState(\"\");\n  const [questionBody, setQuestionBody] = useState(<></>);\n  /**\n   * Redux\n   */\n  const currentQuestionId = useSelector(\n    (state: TRootState) => state.examState.currentQuestionId\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n\n  /**\n   * Hook Form\n   */\n\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  /**\n   * Effects\n   */\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setQuestionType(questionTypeProp);\n    } else {\n      console.log(\"new question type is\");\n\n      console.log(questionTable.byId[currentQuestionId].questionType);\n      setQuestionType(questionTable.byId[currentQuestionId].questionType);\n    }\n  }, [currentQuestionId, questionTypeProp]);\n\n  useEffect(() => {\n    console.log(\"using questionType\");\n    console.log(questionType);\n    switch (questionType) {\n      case questionTypes[0].name:\n        setQuestionBody(\n          <MakeFreeText\n            register={register}\n            handleSubmit={handleSubmit}\n            getValues={getValues}\n            reset={reset}\n            questionId={currentQuestionId}\n            makeQuestion={makeQuestion}\n          />\n        );\n        break;\n      case questionTypes[1].name:\n        setQuestionBody(\n          <MakeMultipleChoice\n            register={register}\n            questionId={currentQuestionId}\n            handleSubmit={handleSubmit}\n            getValues={getValues}\n            reset={reset}\n          />\n        );\n        break;\n      default:\n        setQuestionBody(<div>Something went wrong</div>);\n        break;\n    }\n  }, [questionType,]);\n\n  const makeQuestion = ({\n    questionContent,\n    bodyContent,\n    makeBody,\n    answerContent,\n    makeAnswer,\n  }) => {\n    HttpService.post(apiRoutes.QUESTION, { content: questionContent })\n      .then(({ data }) => {\n        makeBody({ id: data.id, bodyContent });\n        makeAnswer({ id: data.id, answerContent });\n      })\n      .catch((error) => {\n        console.log(\"error make Question\");\n      });\n  };\n\n  return <div>{questionBody}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}