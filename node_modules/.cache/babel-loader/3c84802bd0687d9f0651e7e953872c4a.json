{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Exam/index.tsx\";\nimport React, { useContext, useState } from \"react\";\nimport { v4 } from \"uuid\";\nimport { useForm } from \"react-hook-form\";\nimport { Input, Badge, Heading, Flex, Select, Button } from \"theme-ui\";\nimport { ExamContext } from \"../../../services/examContext\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nexport default function Exam() {\n  const {\n    allQuestions,\n    allUsers\n  } = useContext(ExamContext);\n  const [newExamState, setNewExamState] = useState({\n    addedUsers: [],\n    addedQuestions: []\n  });\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n\n  const addUser = () => {\n    const newUser = getValues().newUser;\n\n    if (!newExamState.addedUsers.find(el => newUser === el)) {\n      setNewExamState(old => ({ ...old,\n        addedUsers: [...old.addedUsers, newUser]\n      }));\n    }\n  };\n\n  const addQuestion = () => {\n    const newQuestion = getValues().newQuestion;\n\n    if (!newExamState.addedQuestions.find(el => newQuestion === el)) {\n      setNewExamState(old => ({ ...old,\n        addedQuestions: [...old.addedQuestions, newQuestion]\n      }));\n    }\n  };\n\n  const onSubmit = data => {\n    const {\n      addedUsers,\n      addedQuestions\n    } = newExamState;\n    const questionsById = [];\n    const examUsers = [];\n    addedQuestions.map(el => {\n      questionsById.push(JSON.parse(el)._id);\n    });\n    addedUsers.map(el => {\n      examUsers.push(JSON.parse(el)._id);\n    });\n    HttpService.post(apiRoutes.EXAM, {\n      content: {\n        name: data.examTitle,\n        questionsById: questionsById,\n        examUsers: examUsers\n      }\n    }).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Create New Exam\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      justifyContent: \"stretch\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    sx: {\n      marginTop: \"1rem\"\n    },\n    ref: register,\n    name: \"examTitle\",\n    placeholder: \"Provide a Exam Title here\",\n    defaultValue: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"row\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, newExamState.addedUsers.map(el => {\n    const person = JSON.parse(el);\n    return /*#__PURE__*/React.createElement(Badge, {\n      sx: {\n        margin: \"0.5rem\"\n      },\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, person.name);\n  })), /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"row\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    sx: {\n      margin: \"0.5rem\"\n    },\n    ref: register,\n    name: \"newUser\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, allUsers.rows.map(el => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: v4(),\n      value: JSON.stringify(el),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }, el.name);\n  })), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      margin: \"0.5rem\"\n    },\n    onClick: addUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"+\")), /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"row\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, newExamState.addedQuestions.map(el => {\n    const question = JSON.parse(el);\n    return /*#__PURE__*/React.createElement(Badge, {\n      sx: {\n        margin: \"0.5rem\"\n      },\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, question.content.title);\n  })), /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"row\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    sx: {\n      margin: \"0.5rem\"\n    },\n    ref: register,\n    name: \"newQuestion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, allQuestions.rows.map(el => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: v4(),\n      value: JSON.stringify(el),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 19\n      }\n    }, el.content.title);\n  })), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      margin: \"0.5rem\"\n    },\n    onClick: addQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"+\"))), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    variant: \"warning\",\n    onClick: () => {\n      setNewExamState({\n        addedUsers: [],\n        addedQuestions: []\n      });\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"reset\"), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      marginLeft: \"0.5rem\"\n    },\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Exam/index.tsx"],"names":["React","useContext","useState","v4","useForm","Input","Badge","Heading","Flex","Select","Button","ExamContext","HttpService","apiRoutes","Exam","allQuestions","allUsers","newExamState","setNewExamState","addedUsers","addedQuestions","register","handleSubmit","watch","errors","reset","getValues","addUser","newUser","find","el","old","addQuestion","newQuestion","onSubmit","data","questionsById","examUsers","map","push","JSON","parse","_id","post","EXAM","content","name","examTitle","catch","err","console","error","flexDirection","alignItems","justifyContent","marginTop","person","margin","rows","stringify","question","title","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\nimport { v4 } from \"uuid\";\nimport { useForm } from \"react-hook-form\";\nimport { Input, Badge, Heading, Flex, Select, Button } from \"theme-ui\";\n\nimport { ExamContext } from \"../../../services/examContext\";\nimport { findAllByAltText } from \"@testing-library/react\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function Exam() {\n  const { allQuestions, allUsers } = useContext(ExamContext);\n\n  const [newExamState, setNewExamState] = useState({\n    addedUsers: [],\n    addedQuestions: [],\n  });\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  const addUser = () => {\n    const newUser = getValues().newUser;\n    if (!newExamState.addedUsers.find((el) => newUser === el)) {\n      setNewExamState((old) => ({\n        ...old,\n        addedUsers: [...old.addedUsers, newUser],\n      }));\n    }\n  };\n  const addQuestion = () => {\n    const newQuestion = getValues().newQuestion;\n    if (!newExamState.addedQuestions.find((el) => newQuestion === el)) {\n      setNewExamState((old) => ({\n        ...old,\n        addedQuestions: [...old.addedQuestions, newQuestion],\n      }));\n    }\n  };\n\n  const onSubmit = (data) => {\n    const { addedUsers, addedQuestions } = newExamState;\n    const questionsById = [];\n    const examUsers = [];\n    addedQuestions.map((el) => {\n      questionsById.push(JSON.parse(el)._id);\n    });\n    addedUsers.map((el) => {\n      examUsers.push(JSON.parse(el)._id);\n    });\n    HttpService.post(apiRoutes.EXAM, {\n      content: {\n        name: data.examTitle,\n        questionsById: questionsById,\n        examUsers: examUsers,\n      },\n    }).catch((err) => console.error(err));\n  };\n\n  return (\n    <div>\n      <Heading as=\"h2\">Create New Exam</Heading>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Flex\n          sx={{\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            justifyContent: \"stretch\",\n          }}\n        >\n          <Input\n            sx={{ marginTop: \"1rem\" }}\n            ref={register}\n            name={\"examTitle\"}\n            placeholder=\"Provide a Exam Title here\"\n            defaultValue={\"\"}\n          />\n\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            {newExamState.addedUsers.map((el) => {\n              const person = JSON.parse(el);\n              return (\n                <Badge sx={{ margin: \"0.5rem\" }} key={v4()}>\n                  {person.name}\n                </Badge>\n              );\n            })}\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            <Select sx={{ margin: \"0.5rem\" }} ref={register} name=\"newUser\">\n              {allUsers.rows.map((el) => {\n                return (\n                  <option key={v4()} value={JSON.stringify(el)}>\n                    {el.name}\n                  </option>\n                );\n              })}\n            </Select>\n            <Button sx={{ margin: \"0.5rem\" }} onClick={addUser}>\n              +\n            </Button>\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            {newExamState.addedQuestions.map((el) => {\n              const question = JSON.parse(el);\n              return (\n                <Badge sx={{ margin: \"0.5rem\" }} key={v4()}>\n                  {question.content.title}\n                </Badge>\n              );\n            })}\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            <Select sx={{ margin: \"0.5rem\" }} ref={register} name=\"newQuestion\">\n              {allQuestions.rows.map((el) => {\n                return (\n                  <option key={v4()} value={JSON.stringify(el)}>\n                    {el.content.title}\n                  </option>\n                );\n              })}\n            </Select>\n          \n            <Button  sx={{ margin: \"0.5rem\" }} onClick={addQuestion}>\n              +\n            </Button>\n          </Flex>\n        </Flex>\n        <Button\n          type=\"button\"\n          variant=\"warning\"\n          onClick={() => {\n            setNewExamState({ addedUsers: [], addedQuestions: [] });\n            reset();\n          }}\n        >\n          reset\n        </Button>\n        <Button sx={{ marginLeft: \"0.5rem\" }} type=\"submit\">\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}