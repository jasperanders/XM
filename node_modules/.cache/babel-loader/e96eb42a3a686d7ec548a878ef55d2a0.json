{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport HttpService from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport { setExamTable, setQuestionTable, setQuestionBodyFreeTextTable, setQuestionBodyMultipleChoiceTable, setExamState } from \"../redux/actions\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const ExamContext = React.createContext({\n  loading: true,\n  loadAllUsers: () => {},\n  allUsers: {\n    rows: []\n  },\n  allQuestions: {\n    rows: []\n  }\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [loading, setLoading] = useState(false);\n  const [allUsers, setAllUsers] = useState({\n    rows: []\n  });\n  const [allQuestions, setAllQuestions] = useState({\n    rows: []\n  });\n  const [allExams, setAllExams] = useState({\n    rows: []\n  });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({\n    rows: []\n  });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({\n    rows: []\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n    console.log(\"load user\");\n    loadAllUsers();\n    console.log(\"load quest\");\n    loadAllQuestions();\n    console.log(\"load exam\");\n    loadAllExams();\n    console.log(\"load free\");\n    loadAllFreeText();\n    console.log(\"load mult\");\n    loadAllMultipleChoice();\n    setLoading(false);\n  }, []);\n  /**\n   * Exam Table\n   */\n\n  useEffect(() => {\n    var _allExams$rows$, _allExams$rows$$conte, _allExams$rows$2;\n\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    console.log(allExams);\n    const firstQuestionId = allExams === null || allExams === void 0 ? void 0 : (_allExams$rows$ = allExams.rows[0]) === null || _allExams$rows$ === void 0 ? void 0 : (_allExams$rows$$conte = _allExams$rows$.content) === null || _allExams$rows$$conte === void 0 ? void 0 : _allExams$rows$$conte.questionsById[0];\n    const firstExam = allExams === null || allExams === void 0 ? void 0 : (_allExams$rows$2 = allExams.rows[0]) === null || _allExams$rows$2 === void 0 ? void 0 : _allExams$rows$2._id;\n    allExams.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setExamTable({\n      newTable\n    }));\n    dispatch(setExamState({\n      newTable: {\n        currentExamId: firstExam,\n        currentQuestionIndex: 0,\n        currentQuestionId: firstQuestionId,\n        currentTime: null,\n        timerIsActive: true,\n        examFinished: false\n      }\n    }));\n  }, [allExams]);\n  /**\n   * Question Table\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allQuestions.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionTable({\n      newTable\n    }));\n  }, [allQuestions]);\n  /**\n   * FreeTextQuestions\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allFreeTextQuestion.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        questionId: _id\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionBodyFreeTextTable({\n      newTable\n    }));\n  }, [allFreeTextQuestion]);\n  /**\n   * MultipleChoiceQuestions\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allMultipleChoice.rows.map(({\n      _id,\n      content\n    }) => {\n      console.log(content);\n      newTable.byId[_id] = {\n        questionId: _id,\n        possibleAnswers: content.possibleAnswers\n      };\n      newTable.allIds.push(_id);\n    });\n    console.log(\"newTable\", newTable);\n    dispatch(setQuestionBodyMultipleChoiceTable({\n      newTable\n    }));\n    console.log(done);\n  }, [allMultipleChoice]);\n  /**\n   * Load Tables\n   *\n   */\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({\n      data\n    }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({\n      data\n    }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM).then(({\n      data\n    }) => {\n      setAllExams(data);\n    }).catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({\n      data\n    }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(({\n      data\n    }) => {\n      setAllMultipleChoice(data);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(ExamContext.Provider, {\n      value: {\n        loading,\n        allQuestions,\n        loadAllUsers,\n        allUsers\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx"],"names":["React","useState","useEffect","HttpService","apiRoutes","useDispatch","setExamTable","setQuestionTable","setQuestionBodyFreeTextTable","setQuestionBodyMultipleChoiceTable","setExamState","ExamContext","createContext","loading","loadAllUsers","allUsers","rows","allQuestions","UserContextProvider","children","setLoading","setAllUsers","setAllQuestions","allExams","setAllExams","allFreeTextQuestion","setAllFreeTextQuestion","allMultipleChoice","setAllMultipleChoice","dispatch","console","log","loadAllQuestions","loadAllExams","loadAllFreeText","loadAllMultipleChoice","newTable","byId","allIds","firstQuestionId","content","questionsById","firstExam","_id","map","examId","name","push","currentExamId","currentQuestionIndex","currentQuestionId","currentTime","timerIsActive","examFinished","questionId","questionType","text","timeLimitMs","title","possibleAnswers","done","get","USER","then","data","QUESTION","EXAM","catch","FREE_TEXT_QUESTION","MULTIPLE_CHOICE_QUESTION"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setExamTable,\n  setQuestionTable,\n  setAnswerBodyFreeTextTable,\n  setQuestionBodyFreeTextTable,\n  setQuestionBodyMultipleChoiceTable,\n  setCurrentQuestionId,\n  setExamState,\n} from \"../redux/actions\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loading: true,\n  loadAllUsers: () => {},\n  allUsers: { rows: [] },\n  allQuestions: { rows: [] },\n});\n\nexport default function UserContextProvider({ children }) {\n  const [loading, setLoading] = useState(false);\n  const [allUsers, setAllUsers] = useState({ rows: [] });\n  const [allQuestions, setAllQuestions] = useState({ rows: [] });\n  const [allExams, setAllExams] = useState({ rows: [] });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({ rows: [] });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({ rows: [] });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    console.log(\"load user\");\n\n    loadAllUsers();\n    console.log(\"load quest\");\n    loadAllQuestions();\n    console.log(\"load exam\");\n    loadAllExams();\n    console.log(\"load free\");\n    loadAllFreeText();\n    console.log(\"load mult\");\n    loadAllMultipleChoice();\n    setLoading(false);\n  }, []);\n\n  /**\n   * Exam Table\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    console.log(allExams);\n    const firstQuestionId = allExams?.rows[0]?.content?.questionsById[0];\n    const firstExam = allExams?.rows[0]?._id;\n    allExams.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setExamTable({ newTable }));\n    dispatch(\n      setExamState({\n        newTable: {\n          currentExamId: firstExam,\n          currentQuestionIndex: 0,\n          currentQuestionId: firstQuestionId,\n          currentTime: null,\n          timerIsActive: true,\n          examFinished: false,\n        },\n      })\n    );\n  }, [allExams]);\n\n  /**\n   * Question Table\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allQuestions.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionTable({ newTable }));\n  }, [allQuestions]);\n\n  /**\n   * FreeTextQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allFreeTextQuestion.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setQuestionBodyFreeTextTable({ newTable }));\n  }, [allFreeTextQuestion]);\n\n  /**\n   * MultipleChoiceQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allMultipleChoice.rows.map(({ _id, content }) => {\n      console.log(content);\n      newTable.byId[_id] = {\n        questionId: _id,\n        possibleAnswers: content.possibleAnswers,\n      };\n      newTable.allIds.push(_id);\n    });\n    console.log(\"newTable\", newTable);\n    dispatch(setQuestionBodyMultipleChoiceTable({ newTable }));\n    console.log(done);\n  }, [allMultipleChoice]);\n\n  /**\n   * Load Tables\n   *\n   */\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({ data }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM)\n      .then(({ data }) => {\n        setAllExams(data);\n      })\n      .catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({ data }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(\n      ({ data }) => {\n        setAllMultipleChoice(data);\n      }\n    );\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        loading,\n        allQuestions,\n        loadAllUsers,\n        allUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}