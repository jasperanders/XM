{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { ANSWER_FREE_TEXT_QUESTION, SET_QUESTION_START_TIME, SET_QUESTION_END_TIME, NEXT_QUESTION, SET_APP_TIMER, COUNT_DOWN_APP_TIMER } from \"./actions\";\nimport { initialAnswerTable, initialExamState, initialExamTable, initialQuestionTable } from \"./initialState\";\n\nfunction questionTable(state = initialQuestionTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_QUESTION_START_TIME:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n\n        if (question.timeStart === null) {\n          question.timeStart = Date.now();\n        }\n      });\n\n    case SET_QUESTION_END_TIME:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n        question.timeUsed = question.timeEnd - question.timeStart;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case \"value\":\n      break;\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, draft => {\n        const {\n          id,\n          currentQuestionIndex\n        } = draft.currentExam;\n        const examLength = draft.byId[id].questionsById.length;\n\n        if (currentQuestionIndex < examLength - 1) {\n          draft.currentExam.currentQuestionIndex += 1;\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction questionBodyMultipleChoiceTable(state = initialExamTable, {\n  type,\n  payload\n}) {}\n\nfunction questionBodyFreeTextTable(state = initialExamTable, {\n  type,\n  payload\n}) {}\n\nfunction answerBodyFreeTextTable(state = initialExamTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      payload;\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n        question.timeExpired = true;\n      });\n\n    default:\n      break;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(state = initialExamTable, {\n  type,\n  payload\n}) {}\n\nfunction examState(state = initialExamState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_APP_TIMER:\n      return produce(state, draftState => {\n        draftState.currentTime = payload.timeLimit;\n        return draftState;\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, draftState => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/reducers.ts"],"names":["combineReducers","produce","ANSWER_FREE_TEXT_QUESTION","SET_QUESTION_START_TIME","SET_QUESTION_END_TIME","NEXT_QUESTION","SET_APP_TIMER","COUNT_DOWN_APP_TIMER","initialAnswerTable","initialExamState","initialExamTable","initialQuestionTable","questionTable","state","type","payload","draftState","question","byId","questionId","timeStart","Date","now","timeEnd","timeUsed","answerTable","examTable","draft","id","currentQuestionIndex","currentExam","examLength","questionsById","length","questionBodyMultipleChoiceTable","questionBodyFreeTextTable","answerBodyFreeTextTable","answerText","timeExpired","answerBodyMultipleChoiceTable","examState","currentTime","timeLimit","countDownBy","console","log","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  SET_QUESTION_START_TIME,\n  SET_QUESTION_END_TIME,\n  PREVIOUS_QUESTION,\n  NEXT_QUESTION,\n  SET_APP_TIMER,\n  COUNT_DOWN_APP_TIMER,\n} from \"./actions\";\nimport {\n  initialAnswerTable,\n  initialExamState,\n  initialExamTable,\n  initialQuestionTable,\n} from \"./initialState\";\nimport { store } from \"..\";\nimport { useDispatch } from \"react-redux\";\n\nfunction questionTable(state = initialQuestionTable, { type, payload }) {\n  switch (type) {\n    case SET_QUESTION_START_TIME:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        if (question.timeStart === null) {\n          question.timeStart = Date.now();\n        }\n      });\n    case SET_QUESTION_END_TIME:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n        question.timeUsed = question.timeEnd - question.timeStart;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, { type, payload }) {\n  switch (type) {\n    case \"value\":\n      break;\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, { type, payload }) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, (draft) => {\n        const { id, currentQuestionIndex } = draft.currentExam;\n        const examLength = draft.byId[id].questionsById.length;\n        if (currentQuestionIndex < examLength - 1) {\n          draft.currentExam.currentQuestionIndex += 1;\n        }\n      });\n    default:\n      return state;\n  }\n}\n\nfunction questionBodyMultipleChoiceTable(\n  state = initialExamTable,\n  { type, payload }\n) {}\n\nfunction questionBodyFreeTextTable(\n  state = initialExamTable,\n  { type, payload }\n) {}\n\nfunction answerBodyFreeTextTable(state = initialExamTable, { type, payload }) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      payload\n\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n        question.timeExpired = true;\n      });\n  \n    default:\n      break;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(\n  state = initialExamTable,\n  { type, payload }\n) {}\n\nfunction examState(state = initialExamState, { type, payload }) {\n  switch (type) {\n    case SET_APP_TIMER:\n      return produce(state, (draftState) => {\n        draftState.currentTime = payload.timeLimit;\n        return draftState;\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, (draftState) => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}