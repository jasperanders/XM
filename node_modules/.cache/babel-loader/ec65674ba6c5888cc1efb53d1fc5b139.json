{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport HttpService from \"./http\";\nimport apiRoutes from \"./apiRoutes\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: {\n    rows: []\n  },\n  allQuestions: {\n    rows: []\n  }\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [allUsers, setAllUsers] = useState({\n    rows: []\n  });\n  const [allQuestions, setAllQuestions] = useState({\n    rows: []\n  });\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestios();\n  }, []);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({\n      data\n    }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestios = () => {\n    return HttpService.get(apiRoutes.QUESTION).then({\n      data\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(ExamContext.Provider, {\n      value: {\n        allQuestions,\n        loadAllUsers,\n        allUsers\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx"],"names":["React","useState","useEffect","HttpService","apiRoutes","ExamContext","createContext","loadAllUsers","allUsers","rows","allQuestions","UserContextProvider","children","setAllUsers","setAllQuestions","loadAllQuestios","get","USER","then","data","QUESTION"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAoDC,SAApD,QAAqE,OAArE;AAEA,OAAOC,WAAP,MAA6C,QAA7C;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,CAAoB;AAC7CC,EAAAA,YAAY,EAAE,MAAM,CAAE,CADuB;AAE7CC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAFmC;AAG7CC,EAAAA,YAAY,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR;AAH+B,CAApB,CAApB;AAMP,eAAe,SAASE,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACxD,QAAM,CAACJ,QAAD,EAAWK,WAAX,IAA0BZ,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAxC;AACA,QAAM,CAACC,YAAD,EAAeI,eAAf,IAAkCb,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAhD;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,YAAY;AACZQ,IAAAA,eAAe;AAChB,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMR,YAAY,GAAG,MAAM;AACzB,WAAOJ,WAAW,CAACa,GAAZ,CAAgBZ,SAAS,CAACa,IAA1B,EAAgCC,IAAhC,CAAqC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACxDN,MAAAA,WAAW,CAACM,IAAD,CAAX;AACD,KAFM,CAAP;AAGD,GAJD;;AAMA,QAAMJ,eAAe,GAAG,MAAM;AAC5B,WAAOZ,WAAW,CAACa,GAAZ,CAAgBZ,SAAS,CAACgB,QAA1B,EAAoCF,IAApC,CAA0C;AAACC,MAAAA;AAAD,KAA1C,CAAP;AACD,GAFD;;AAIA;AAAA;AACE;AACA;AACA;AACA;AACA,wBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AACLT,QAAAA,YADK;AAELH,QAAAA,YAFK;AAGLC,QAAAA;AAHK,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGI,QAPH;AALF;AAeD","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n  allUsers: { rows: [] },\n  allQuestions: { rows: [] },\n});\n\nexport default function UserContextProvider({ children }) {\n  const [allUsers, setAllUsers] = useState({ rows: [] });\n  const [allQuestions, setAllQuestions] = useState({ rows: [] });\n\n  useEffect(() => {\n    loadAllUsers();\n    loadAllQuestios();\n  }, []);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestios = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({data}))\n  }\n  \n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        allQuestions,\n        loadAllUsers,\n        allUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}