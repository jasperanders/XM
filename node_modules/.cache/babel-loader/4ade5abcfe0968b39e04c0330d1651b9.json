{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { v4 } from \"uuid\";\nimport HttpService from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport { setExamTable, setQuestionTable, setAnswerBodyFreeTextTable, setQuestionBodyFreeTextTable, setQuestionBodyMultipleChoiceTable, setExamState, setAnswerTable, setAnswerBodyMultipleChoiceTable } from \"../redux/actions\";\nimport { UserContext } from \"./userContext\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const ExamContext = React.createContext({\n  loading: true,\n  loadAllUsers: () => {},\n  allUsers: {\n    rows: []\n  },\n  allQuestions: {\n    rows: []\n  }\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const {\n    user\n  } = useContext(UserContext);\n  const [loading, setLoading] = useState(false);\n  const [allUsers, setAllUsers] = useState({\n    rows: []\n  });\n  const [allQuestions, setAllQuestions] = useState({\n    rows: []\n  });\n  const [allExams, setAllExams] = useState({\n    rows: []\n  });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({\n    rows: []\n  });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({\n    rows: []\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllExams();\n    loadAllFreeText();\n    loadAllMultipleChoice();\n    setLoading(false);\n  }, [user]);\n  /**\n   * Exam Table\n   */\n\n  useEffect(() => {\n    var _allExams$rows$, _allExams$rows$$conte, _allExams$rows$2;\n\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    console.log(allExams);\n    const firstQuestionId = allExams === null || allExams === void 0 ? void 0 : (_allExams$rows$ = allExams.rows[0]) === null || _allExams$rows$ === void 0 ? void 0 : (_allExams$rows$$conte = _allExams$rows$.content) === null || _allExams$rows$$conte === void 0 ? void 0 : _allExams$rows$$conte.questionsById[0];\n    const firstExam = allExams === null || allExams === void 0 ? void 0 : (_allExams$rows$2 = allExams.rows[0]) === null || _allExams$rows$2 === void 0 ? void 0 : _allExams$rows$2._id;\n    allExams.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setExamTable({\n      newTable\n    }));\n    dispatch(setExamState({\n      newTable: {\n        currentExamId: firstExam,\n        currentQuestionIndex: 0,\n        currentQuestionId: firstQuestionId,\n        currentTime: null,\n        timerIsActive: true,\n        examFinished: false\n      }\n    }));\n  }, [allExams]);\n  /**\n   * Question Table\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    const newAnswerTable = {\n      byId: {},\n      allIds: []\n    };\n    const newFreeTextAnswerTable = {\n      byId: {},\n      allIds: []\n    };\n    const newMultipleChoiceAnswerTable = {\n      byId: {},\n      allIds: []\n    };\n    allQuestions.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title\n      };\n      newTable.allIds.push(_id);\n      const newAnswerId = v4();\n      newAnswerTable.byId[_id] = {\n        questionId: _id,\n        answerId: newAnswerId,\n        timeStart: null,\n        timeEnd: null,\n        timeExpired: false\n      };\n      newAnswerTable.allIds.push(_id);\n\n      if (content.questionType === \"freeText\") {\n        newFreeTextAnswerTable.byId[_id] = {\n          questionId: _id,\n          answerId: newAnswerId,\n          answerText: \"\"\n        };\n        newFreeTextAnswerTable.allIds.push(newAnswerId);\n      } else if (content.questionType === \"multipleChoice\") {\n        newMultipleChoiceAnswerTable.byId[_id] = {\n          questionId: _id,\n          answerId: newAnswerId,\n          selectedAnswers: \"\"\n        };\n        newMultipleChoiceAnswerTable.allIds.push(newAnswerId);\n      }\n    });\n    dispatch(setQuestionTable({\n      newTable\n    }));\n    dispatch(setAnswerTable({\n      newTable: newAnswerTable\n    }));\n    dispatch(setAnswerBodyFreeTextTable({\n      newTable: newFreeTextAnswerTable\n    }));\n    dispatch(setAnswerBodyMultipleChoiceTable({\n      newTable: newMultipleChoiceAnswerTable\n    }));\n  }, [allQuestions]);\n  /**\n   * FreeTextQuestions\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allFreeTextQuestion.rows.map(({\n      _id,\n      content\n    }) => {\n      newTable.byId[content.questionId] = {\n        questionId: content.questionId\n      };\n      newTable.allIds.push(content.questionId);\n    });\n    dispatch(setQuestionBodyFreeTextTable({\n      newTable\n    }));\n  }, [allFreeTextQuestion]);\n  /**\n   * MultipleChoiceQuestions\n   */\n\n  useEffect(() => {\n    const newTable = {\n      byId: {},\n      allIds: []\n    };\n    allMultipleChoice.rows.map(({\n      _id,\n      content\n    }) => {\n      console.log(content);\n      newTable.byId[content.questionId] = {\n        questionId: content.questionIds,\n        possibleAnswers: content.possibleAnswers\n      };\n      newTable.allIds.push(_id);\n    });\n    console.log(\"newTable\", newTable);\n    dispatch(setQuestionBodyMultipleChoiceTable({\n      newTable\n    }));\n  }, [allMultipleChoice]);\n  /**\n   * Load Tables\n   *\n   */\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({\n      data\n    }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({\n      data\n    }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM).then(({\n      data\n    }) => {\n      setAllExams(data);\n    }).catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({\n      data\n    }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(({\n      data\n    }) => {\n      setAllMultipleChoice(data);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(ExamContext.Provider, {\n      value: {\n        loading,\n        allQuestions,\n        loadAllUsers,\n        allUsers\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx"],"names":["React","useState","useEffect","useContext","v4","HttpService","apiRoutes","useDispatch","setExamTable","setQuestionTable","setAnswerBodyFreeTextTable","setQuestionBodyFreeTextTable","setQuestionBodyMultipleChoiceTable","setExamState","setAnswerTable","setAnswerBodyMultipleChoiceTable","UserContext","ExamContext","createContext","loading","loadAllUsers","allUsers","rows","allQuestions","UserContextProvider","children","user","setLoading","setAllUsers","setAllQuestions","allExams","setAllExams","allFreeTextQuestion","setAllFreeTextQuestion","allMultipleChoice","setAllMultipleChoice","dispatch","loadAllQuestions","loadAllExams","loadAllFreeText","loadAllMultipleChoice","newTable","byId","allIds","console","log","firstQuestionId","content","questionsById","firstExam","_id","map","examId","name","push","currentExamId","currentQuestionIndex","currentQuestionId","currentTime","timerIsActive","examFinished","newAnswerTable","newFreeTextAnswerTable","newMultipleChoiceAnswerTable","questionId","questionType","text","timeLimitMs","title","newAnswerId","answerId","timeStart","timeEnd","timeExpired","answerText","selectedAnswers","questionIds","possibleAnswers","get","USER","then","data","QUESTION","EXAM","catch","FREE_TEXT_QUESTION","MULTIPLE_CHOICE_QUESTION"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { v4 } from \"uuid\";\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setExamTable,\n  setQuestionTable,\n  setAnswerBodyFreeTextTable,\n  setQuestionBodyFreeTextTable,\n  setQuestionBodyMultipleChoiceTable,\n  setCurrentQuestionId,\n  setExamState,\n  setAnswerTable,\n  setAnswerBodyMultipleChoiceTable,\n} from \"../redux/actions\";\nimport { UserContext } from \"./userContext\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loading: true,\n  loadAllUsers: () => {},\n  allUsers: { rows: [] },\n  allQuestions: { rows: [] },\n});\n\nexport default function UserContextProvider({ children }) {\n  const { user } = useContext(UserContext);\n\n  const [loading, setLoading] = useState(false);\n  const [allUsers, setAllUsers] = useState({ rows: [] });\n  const [allQuestions, setAllQuestions] = useState({ rows: [] });\n  const [allExams, setAllExams] = useState({ rows: [] });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({ rows: [] });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({ rows: [] });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllExams();\n    loadAllFreeText();\n    loadAllMultipleChoice();\n    setLoading(false);\n  }, [user]);\n\n  /**\n   * Exam Table\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    console.log(allExams);\n    const firstQuestionId = allExams?.rows[0]?.content?.questionsById[0];\n    const firstExam = allExams?.rows[0]?._id;\n\n    allExams.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setExamTable({ newTable }));\n    dispatch(\n      setExamState({\n        newTable: {\n          currentExamId: firstExam,\n          currentQuestionIndex: 0,\n          currentQuestionId: firstQuestionId,\n          currentTime: null,\n          timerIsActive: true,\n          examFinished: false,\n        },\n      })\n    );\n  }, [allExams]);\n\n  /**\n   * Question Table\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    const newAnswerTable = { byId: {}, allIds: [] };\n    const newFreeTextAnswerTable = { byId: {}, allIds: [] };\n    const newMultipleChoiceAnswerTable = { byId: {}, allIds: [] };\n    allQuestions.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title,\n      };\n      newTable.allIds.push(_id);\n      const newAnswerId = v4();\n      newAnswerTable.byId[_id] = {\n        questionId: _id,\n        answerId: newAnswerId,\n        timeStart: null,\n        timeEnd: null,\n        timeExpired: false,\n      };\n      newAnswerTable.allIds.push(_id);\n      if (content.questionType === \"freeText\") {\n        newFreeTextAnswerTable.byId[_id] = {\n          questionId: _id,\n          answerId: newAnswerId,\n          answerText: \"\",\n        };\n        newFreeTextAnswerTable.allIds.push(newAnswerId);\n      } else if (content.questionType === \"multipleChoice\") {\n        newMultipleChoiceAnswerTable.byId[_id] = {\n          questionId: _id,\n          answerId: newAnswerId,\n          selectedAnswers: \"\",\n        };\n        newMultipleChoiceAnswerTable.allIds.push(newAnswerId);\n      }\n    });\n    dispatch(setQuestionTable({ newTable }));\n    dispatch(setAnswerTable({ newTable: newAnswerTable }));\n    dispatch(setAnswerBodyFreeTextTable({ newTable: newFreeTextAnswerTable }));\n    dispatch(\n      setAnswerBodyMultipleChoiceTable({\n        newTable: newMultipleChoiceAnswerTable,\n      })\n    );\n  }, [allQuestions]);\n\n  /**\n   * FreeTextQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allFreeTextQuestion.rows.map(({ _id, content }) => {\n      newTable.byId[content.questionId] = {\n        questionId: content.questionId,\n      };\n      newTable.allIds.push(content.questionId);\n    });\n    dispatch(setQuestionBodyFreeTextTable({ newTable }));\n  }, [allFreeTextQuestion]);\n\n  /**\n   * MultipleChoiceQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allMultipleChoice.rows.map(({ _id, content }) => {\n      console.log(content);\n      newTable.byId[content.questionId] = {\n        questionId: content.questionIds,\n        possibleAnswers: content.possibleAnswers,\n      };\n      newTable.allIds.push(_id);\n    });\n    console.log(\"newTable\", newTable);\n    dispatch(setQuestionBodyMultipleChoiceTable({ newTable }));\n  }, [allMultipleChoice]);\n\n  /**\n   * Load Tables\n   *\n   */\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({ data }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM)\n      .then(({ data }) => {\n        setAllExams(data);\n      })\n      .catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({ data }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(\n      ({ data }) => {\n        setAllMultipleChoice(data);\n      }\n    );\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        loading,\n        allQuestions,\n        loadAllUsers,\n        allUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}