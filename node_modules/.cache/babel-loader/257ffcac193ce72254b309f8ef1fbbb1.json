{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx\";\nimport React, { useState } from \"react\";\nimport HttpService from \"./http\";\nimport apiRoutes from \"./apiRoutes\"; // Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\n\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {}\n});\nexport default function UserContextProvider({\n  children\n}) {\n  const [allUsers, setAllUsers] = useState([]);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({\n      data\n    }) => {\n      setAllUsers();\n      console.log(data);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    React.createElement(ExamContext.Provider, {\n      value: {\n        loadAllUsers\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, children)\n  );\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/examContext.tsx"],"names":["React","useState","HttpService","apiRoutes","ExamContext","createContext","loadAllUsers","UserContextProvider","children","allUsers","setAllUsers","get","USER","then","data","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAAqE,OAArE;AAEA,OAAOC,WAAP,MAA6C,QAA7C;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAN,CAAoB;AAC7CC,EAAAA,YAAY,EAAE,MAAM,CAAE;AADuB,CAApB,CAApB;AAIP,eAAe,SAASC,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACxD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMK,YAAY,GAAG,MAAM;AACzB,WAAOJ,WAAW,CAACS,GAAZ,CAAgBR,SAAS,CAACS,IAA1B,EAAgCC,IAAhC,CAAqC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACxDJ,MAAAA,WAAW;AACXK,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KAHM,CAAP;AAID,GALD;;AAOA;AAAA;AACE;AACA;AACA;AACA;AACA,wBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AACLR,QAAAA;AADK,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGE,QALH;AALF;AAaD","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loadAllUsers: () => {},\n});\n\nexport default function UserContextProvider({ children }) {\n  const [allUsers, setAllUsers] = useState([]);\n\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers()\n      console.log(data);\n    });\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        loadAllUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}