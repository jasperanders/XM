{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { Heading } from \"theme-ui\";\nimport Timer from \"../timer/Timer\"; //!Important\n\nimport { setAnswerStartTime } from \"../../redux/actions\";\nexport default function Question({\n  question\n}) {\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  const {\n    questionId,\n    questionType,\n    title,\n    text\n  } = question;\n  const dispatch = useDispatch();\n  const {\n    currentExamId\n  } = useSelector(state => state.examState);\n  const currentExam = useSelector(state => state.examTable.byId[currentExamId]);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n  useEffect(() => {\n    dispatch(setAnswerStartTime({\n      questionId\n    }));\n    reset();\n  }, [questionId, dispatch, reset]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return /*#__PURE__*/React.createElement(FreeTextQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          question: question,\n          getValues: getValues,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }\n        });\n\n      case \"multipleChoice\":\n        return /*#__PURE__*/React.createElement(MultipleChoiceQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          question: question,\n          getValues: getValues,\n          setCurrentAnswerAction: setCurrentAnswerAction,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, text), questionBody(), /*#__PURE__*/React.createElement(Timer, {\n    questionId: questionId,\n    currentExam: currentExam,\n    answerQuestionAction: currentAnswerAction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => console.log(getValues()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \" Click\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useForm","FreeTextQuestion","MultipleChoiceQuestion","Heading","Timer","setAnswerStartTime","Question","question","currentAnswerAction","setCurrentAnswerAction","questionId","questionType","title","text","dispatch","currentExamId","state","examState","currentExam","examTable","byId","register","handleSubmit","watch","errors","reset","getValues","questionBody","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { TQuestion, TRootState } from \"../../types/examTypes\";\nimport { Heading } from \"theme-ui\";\n\nimport Timer from \"../timer/Timer\"; //!Important\nimport { setAnswerStartTime } from \"../../redux/actions\";\n\nexport default function Question({ question }: TProps) {\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  const { questionId, questionType, title, text } = question;\n  const dispatch = useDispatch();\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n  const currentExam = useSelector(\n    (state: TRootState) => state.examTable.byId[currentExamId]\n  );\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  useEffect(() => {\n    dispatch(setAnswerStartTime({ questionId }));\n    reset();\n  }, [questionId, dispatch, reset]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return (\n          <FreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            question={question}\n            getValues={getValues}\n          />\n        );\n      case \"multipleChoice\":\n        return (\n          <MultipleChoiceQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            question={question}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n  return (\n    <div>\n      <Heading as={\"h2\"}>{title}</Heading>\n      <p>{text}</p>\n      {questionBody()}\n      <Timer\n        questionId={questionId}\n        currentExam={currentExam}\n        answerQuestionAction={currentAnswerAction}\n      ></Timer>\n      <button onClick={() => console.log(getValues())}> Click</button>\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}