{"ast":null,"code":"import _toConsumableArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from\"react\";import{v4}from\"uuid\";import{useForm}from\"react-hook-form\";import{Input,Badge,Heading,Flex,Select,Button}from\"theme-ui\";import{ExamContext}from\"../../../services/examContext\";import HttpService from\"../../../services/http\";import apiRoutes from\"../../../services/apiRoutes\";export default function Exam(){var _useContext=useContext(ExamContext),allQuestions=_useContext.allQuestions,allUsers=_useContext.allUsers;var _useState=useState({addedUsers:[],addedQuestions:[]}),_useState2=_slicedToArray(_useState,2),newExamState=_useState2[0],setNewExamState=_useState2[1];var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,reset=_useForm.reset,getValues=_useForm.getValues;var addUser=function addUser(){var newUser=getValues().newUser;if(!newExamState.addedUsers.find(function(el){return newUser===el;})){setNewExamState(function(old){return _objectSpread({},old,{addedUsers:[].concat(_toConsumableArray(old.addedUsers),[newUser])});});}};var addQuestion=function addQuestion(){var newQuestion=getValues().newQuestion;if(!newExamState.addedQuestions.find(function(el){return newQuestion===el;})){setNewExamState(function(old){return _objectSpread({},old,{addedQuestions:[].concat(_toConsumableArray(old.addedQuestions),[newQuestion])});});}};var onSubmit=function onSubmit(data){var addedUsers=newExamState.addedUsers,addedQuestions=newExamState.addedQuestions;var questionsById=[];var examUsers=[];addedQuestions.map(function(el){questionsById.push(JSON.parse(el)._id);});addedUsers.map(function(el){examUsers.push(JSON.parse(el)._id);});HttpService.post(apiRoutes.EXAM,{content:{name:data.examTitle,questionsById:questionsById,examUsers:examUsers}}).catch(function(err){return console.error(err);});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Heading,{as:\"h2\"},\"Create New Exam\"),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit(onSubmit)},/*#__PURE__*/React.createElement(Flex,{sx:{flexDirection:\"column\",alignItems:\"flex-start\",justifyContent:\"stretch\"}},/*#__PURE__*/React.createElement(Input,{sx:{marginTop:\"1rem\"},ref:register,name:\"examTitle\",placeholder:\"Provide a Exam Title here\",defaultValue:\"\"}),/*#__PURE__*/React.createElement(Flex,{sx:{flexDirection:\"row\"}},newExamState.addedUsers.map(function(el){var person=JSON.parse(el);return/*#__PURE__*/React.createElement(Badge,{sx:{margin:\"0.5rem\"},key:v4()},person.name);})),/*#__PURE__*/React.createElement(Flex,{sx:{flexDirection:\"row\"}},/*#__PURE__*/React.createElement(Select,{sx:{margin:\"0.5rem\"},ref:register,name:\"newUser\"},allUsers.rows.map(function(el){return/*#__PURE__*/React.createElement(\"option\",{key:v4(),value:JSON.stringify(el)},el.name);})),/*#__PURE__*/React.createElement(Button,{type:\"button\",sx:{margin:\"0.5rem\"},onClick:addUser},\"+\")),/*#__PURE__*/React.createElement(Flex,{sx:{flexDirection:\"row\"}},newExamState.addedQuestions.map(function(el){var question=JSON.parse(el);return/*#__PURE__*/React.createElement(Badge,{sx:{margin:\"0.5rem\"},key:v4()},question.content.title);})),/*#__PURE__*/React.createElement(Flex,{sx:{flexDirection:\"row\"}},/*#__PURE__*/React.createElement(Select,{sx:{margin:\"0.5rem\"},ref:register,name:\"newQuestion\"},allQuestions.rows.map(function(el){return/*#__PURE__*/React.createElement(\"option\",{key:v4(),value:JSON.stringify(el)},el.content.title);})),/*#__PURE__*/React.createElement(Button,{type:\"button\",sx:{margin:\"0.5rem\"},onClick:addQuestion},\"+\"))),/*#__PURE__*/React.createElement(Button,{type:\"button\",variant:\"warning\",onClick:function onClick(){setNewExamState({addedUsers:[],addedQuestions:[]});reset();}},\"reset\"),/*#__PURE__*/React.createElement(Button,{sx:{marginLeft:\"0.5rem\"},type:\"submit\"},\"Save\")));}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Exam/index.tsx"],"names":["React","useContext","useState","v4","useForm","Input","Badge","Heading","Flex","Select","Button","ExamContext","HttpService","apiRoutes","Exam","allQuestions","allUsers","addedUsers","addedQuestions","newExamState","setNewExamState","register","handleSubmit","reset","getValues","addUser","newUser","find","el","old","addQuestion","newQuestion","onSubmit","data","questionsById","examUsers","map","push","JSON","parse","_id","post","EXAM","content","name","examTitle","catch","err","console","error","flexDirection","alignItems","justifyContent","marginTop","person","margin","rows","stringify","question","title","marginLeft"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { v4 } from \"uuid\";\nimport { useForm } from \"react-hook-form\";\nimport { Input, Badge, Heading, Flex, Select, Button } from \"theme-ui\";\n\nimport { ExamContext } from \"../../../services/examContext\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function Exam() {\n  const { allQuestions, allUsers } = useContext(ExamContext);\n\n  const [newExamState, setNewExamState] = useState({\n    addedUsers: [],\n    addedQuestions: [],\n  });\n  const { register, handleSubmit, reset, getValues } = useForm();\n\n  const addUser = () => {\n    const newUser = getValues().newUser;\n    if (!newExamState.addedUsers.find((el) => newUser === el)) {\n      setNewExamState((old) => ({\n        ...old,\n        addedUsers: [...old.addedUsers, newUser],\n      }));\n    }\n  };\n  const addQuestion = () => {\n    const newQuestion = getValues().newQuestion;\n    if (!newExamState.addedQuestions.find((el) => newQuestion === el)) {\n      setNewExamState((old) => ({\n        ...old,\n        addedQuestions: [...old.addedQuestions, newQuestion],\n      }));\n    }\n  };\n\n  const onSubmit = (data) => {\n    const { addedUsers, addedQuestions } = newExamState;\n    const questionsById = [];\n    const examUsers = [];\n    addedQuestions.map((el) => {\n      questionsById.push(JSON.parse(el)._id);\n    });\n    addedUsers.map((el) => {\n      examUsers.push(JSON.parse(el)._id);\n    });\n    HttpService.post(apiRoutes.EXAM, {\n      content: {\n        name: data.examTitle,\n        questionsById: questionsById,\n        examUsers: examUsers,\n      },\n    }).catch((err) => console.error(err));\n  };\n\n  return (\n    <div>\n      <Heading as=\"h2\">Create New Exam</Heading>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Flex\n          sx={{\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            justifyContent: \"stretch\",\n          }}\n        >\n          <Input\n            sx={{ marginTop: \"1rem\" }}\n            ref={register}\n            name={\"examTitle\"}\n            placeholder=\"Provide a Exam Title here\"\n            defaultValue={\"\"}\n          />\n\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            {newExamState.addedUsers.map((el) => {\n              const person = JSON.parse(el);\n              return (\n                <Badge sx={{ margin: \"0.5rem\" }} key={v4()}>\n                  {person.name}\n                </Badge>\n              );\n            })}\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            <Select sx={{ margin: \"0.5rem\" }} ref={register} name=\"newUser\">\n              {allUsers.rows.map((el) => {\n                return (\n                  <option key={v4()} value={JSON.stringify(el)}>\n                    {el.name}\n                  </option>\n                );\n              })}\n            </Select>\n            <Button type=\"button\" sx={{ margin: \"0.5rem\" }} onClick={addUser}>\n              +\n            </Button>\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            {newExamState.addedQuestions.map((el) => {\n              const question = JSON.parse(el);\n              return (\n                <Badge sx={{ margin: \"0.5rem\" }} key={v4()}>\n                  {question.content.title}\n                </Badge>\n              );\n            })}\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            <Select sx={{ margin: \"0.5rem\" }} ref={register} name=\"newQuestion\">\n              {allQuestions.rows.map((el) => {\n                return (\n                  <option key={v4()} value={JSON.stringify(el)}>\n                    {el.content.title}\n                  </option>\n                );\n              })}\n            </Select>\n            <Button\n              type=\"button\"\n              sx={{ margin: \"0.5rem\" }}\n              onClick={addQuestion}\n            >\n              +\n            </Button>\n          </Flex>\n        </Flex>\n        <Button\n          type=\"button\"\n          variant=\"warning\"\n          onClick={() => {\n            setNewExamState({ addedUsers: [], addedQuestions: [] });\n            reset();\n          }}\n        >\n          reset\n        </Button>\n        <Button sx={{ marginLeft: \"0.5rem\" }} type=\"submit\">\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}