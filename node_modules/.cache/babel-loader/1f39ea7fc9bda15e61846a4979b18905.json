{"ast":null,"code":"import axios from \"axios\";\nimport settings from \"../settings\";\nimport { history } from \"../index\";\nconst REQUEST_METHOD = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PATCH: \"PATCH\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\"\n};\n/**\n * @class\n * @description This service class handles all REST Calls\n */\n\nclass HttpServiceClass {\n  /**\n   * @function\n   * @description Init the axios library and register the interceptors.\n   */\n  constructor() {\n    this.service = void 0;\n\n    this.setAuthToken = (token, stayLoggedIn = false) => {\n      this.service.defaults.headers.common.Authorization = token ? `Token ${token}` : \"\";\n\n      if (stayLoggedIn) {\n        localStorage.setItem(\"authToken\", token);\n      } else {\n        sessionStorage.setItem(\"authToken\", token);\n      }\n    };\n\n    this.removeAuthToken = () => {\n      delete this.service.defaults.headers.common.Authorization;\n      localStorage.removeItem(\"authToken\");\n      sessionStorage.removeItem(\"authToken\");\n    };\n\n    this.unauthorizedHandler = () => {\n      this.removeAuthToken();\n\n      if (window.location.pathname !== \"/\") {\n        history.push(\"/login/\");\n      } // Possibly routing to login\n\n    };\n\n    this.handleRequest = (method, path, data = {}, params = {}, noCache = false, t) => {\n      return this.service.request({\n        url: `${settings.REACT_APP_API_URL}${path}`,\n        method,\n        data,\n        params: { ...params,\n          ts: noCache ? Date.now() : null\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).catch(this.handleError);\n    };\n\n    this.handleError = error => {\n      console.log(error);\n\n      if (error.response) {\n        switch (error.response.status) {\n          case 401:\n            this.unauthorizedHandler();\n            break;\n\n          default:\n            break;\n        }\n\n        return Promise.reject(error);\n      } // Possibly toaster or log error\n\n\n      return Promise.reject(error);\n    };\n\n    this.get = (path, params = {}, noCache = false) => this.handleRequest(REQUEST_METHOD.GET, path, {}, params, noCache);\n\n    this.patch = (path, data) => this.handleRequest(REQUEST_METHOD.PATCH, path, data);\n\n    this.put = (path, data) => this.handleRequest(REQUEST_METHOD.PUT, path, data);\n\n    this.post = (path, data, params) => this.handleRequest(REQUEST_METHOD.POST, path, data, params);\n\n    this.delete = (path, data) => this.handleRequest(REQUEST_METHOD.DELETE, path, data);\n\n    this.service = axios.create({\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      } // withCredentials: true,\n\n    }); // The AuthToken is set after login. If the user was already loaded on init, we need to set it.\n\n    if (localStorage.getItem(\"authToken\")) {\n      this.setAuthToken(localStorage.getItem(\"authToken\"), true);\n    } else if (sessionStorage.getItem(\"authToken\")) {\n      this.setAuthToken(sessionStorage.getItem(\"authToken\"));\n    }\n  }\n  /**\n   * @function\n   * @description Set the auth token in the request header. Call this after successful login.\n   * @param {string} token is a token string.\n   * @param {boolean} stayLoggedIn logged in.\n   */\n\n\n}\n\nexport const storedAuthToken = () => localStorage.getItem(\"authToken\") || sessionStorage.getItem(\"authToken\");\nconst HttpService = new HttpServiceClass();\nexport default HttpService;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/http.tsx"],"names":["axios","settings","history","REQUEST_METHOD","GET","POST","PATCH","PUT","DELETE","HttpServiceClass","constructor","service","setAuthToken","token","stayLoggedIn","defaults","headers","common","Authorization","localStorage","setItem","sessionStorage","removeAuthToken","removeItem","unauthorizedHandler","window","location","pathname","push","handleRequest","method","path","data","params","noCache","t","request","url","REACT_APP_API_URL","ts","Date","now","catch","handleError","error","console","log","response","status","Promise","reject","get","patch","put","post","delete","create","getItem","storedAuthToken","HttpService"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport settings from \"../settings\";\nimport { history } from \"../index\";\n\nconst REQUEST_METHOD = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PATCH: \"PATCH\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\",\n};\n\n/**\n * @class\n * @description This service class handles all REST Calls\n */\n\nclass HttpServiceClass {\n  service: any;\n  /**\n   * @function\n   * @description Init the axios library and register the interceptors.\n   */\n  constructor() {\n    this.service = axios.create({\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      // withCredentials: true,\n    });\n\n    // The AuthToken is set after login. If the user was already loaded on init, we need to set it.\n    if (localStorage.getItem(\"authToken\")) {\n      this.setAuthToken(localStorage.getItem(\"authToken\"), true);\n    } else if (sessionStorage.getItem(\"authToken\")) {\n      this.setAuthToken(sessionStorage.getItem(\"authToken\"));\n    }\n  }\n\n  /**\n   * @function\n   * @description Set the auth token in the request header. Call this after successful login.\n   * @param {string} token is a token string.\n   * @param {boolean} stayLoggedIn logged in.\n   */\n  setAuthToken = (token, stayLoggedIn = false) => {\n    this.service.defaults.headers.common.Authorization = token\n      ? `Token ${token}`\n      : \"\";\n\n    if (stayLoggedIn) {\n      localStorage.setItem(\"authToken\", token);\n    } else {\n      sessionStorage.setItem(\"authToken\", token);\n    }\n  };\n\n  /**\n   * @function\n   * @description Removes the auth token in the header. Call this after logout.\n   */\n  removeAuthToken = () => {\n    delete this.service.defaults.headers.common.Authorization;\n    localStorage.removeItem(\"authToken\");\n    sessionStorage.removeItem(\"authToken\");\n  };\n\n  /**\n   * @function\n   * @description Handles unauthorized request, redirects to login\n   */\n  unauthorizedHandler = () => {\n    this.removeAuthToken();\n    if (window.location.pathname !== \"/\") {\n      history.push(\"/login/\");\n    }\n    // Possibly routing to login\n  };\n\n  /**\n   * @description Method to handle the request by method.\n   * @param method {string} th request method type.\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {*} data is an object with API data.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  handleRequest = (method, path, data = {}, params = {}, noCache = false, t) => {\n    return this.service\n      .request({\n        url: `${settings.REACT_APP_API_URL}${path}`,\n        method,\n        data,\n        params: { ...params, ts: noCache ? Date.now() : null },\n        headers: {\n          'Authorization': `Bearer ${token}` \n        }\n      })\n      .catch(this.handleError);\n  };\n  /**\n   * @function\n   * @description Interceptor for the error response\n   * @param {Object} error is a object with the error response from API.\n   * @return {*}\n   */\n  handleError = (error) => {\n    console.log(error);\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          this.unauthorizedHandler();\n          break;\n        default:\n          break;\n      }\n\n      return Promise.reject(error);\n    }\n\n    // Possibly toaster or log error\n\n    return Promise.reject(error);\n  };\n\n  /**\n   * @function\n   * @description Fires the get request\n   * @param {string} path is a string of API path.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {*}\n   */\n  get = (path, params = {}, noCache = false) =>\n    this.handleRequest(REQUEST_METHOD.GET, path, {}, params, noCache);\n\n  /**\n   * @function\n   * @description Fires the patch request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  patch = (path, data) => this.handleRequest(REQUEST_METHOD.PATCH, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  put = (path, data) => this.handleRequest(REQUEST_METHOD.PUT, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  post = (path, data, params) =>\n    this.handleRequest(REQUEST_METHOD.POST, path, data, params);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  delete = (path, data) =>\n    this.handleRequest(REQUEST_METHOD.DELETE, path, data);\n}\n\nexport const storedAuthToken = () =>\n  localStorage.getItem(\"authToken\") || sessionStorage.getItem(\"authToken\");\n\nconst HttpService = new HttpServiceClass();\n\nexport default HttpService;\n"]},"metadata":{},"sourceType":"module"}