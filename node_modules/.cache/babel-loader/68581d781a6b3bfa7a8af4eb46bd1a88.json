{"ast":null,"code":"import _slicedToArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{useForm}from\"react-hook-form\";import FreeTextQuestion from\"./questionType/FreeTextQuestion\";import MultipleChoiceQuestion from\"./questionType/MultipleChoice\";import{Heading}from\"theme-ui\";import Timer from\"../timer/Timer\";//!Important\nimport{setAnswerStartTime}from\"../../redux/actions\";export default function Question(_ref){var question=_ref.question;var _useState=useState(function(){}),_useState2=_slicedToArray(_useState,2),currentAnswerAction=_useState2[0],setCurrentAnswerAction=_useState2[1];var questionId=question.questionId,questionType=question.questionType,title=question.title,text=question.text;var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.examState;}),currentExamId=_useSelector.currentExamId;var currentExam=useSelector(function(state){return state.examTable.byId[currentExamId];});var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,watch=_useForm.watch,errors=_useForm.errors,reset=_useForm.reset,getValues=_useForm.getValues;useEffect(function(){dispatch(setAnswerStartTime({questionId:questionId}));reset();},[questionId,dispatch,reset]);var questionBody=function questionBody(){switch(questionType){case\"freeText\":return/*#__PURE__*/React.createElement(FreeTextQuestion,{register:register,handleSubmit:handleSubmit,question:question,getValues:getValues,setCurrentAnswerAction:setCurrentAnswerAction});case\"multipleChoice\":return/*#__PURE__*/React.createElement(MultipleChoiceQuestion,{register:register,handleSubmit:handleSubmit,question:question,getValues:getValues,setCurrentAnswerAction:setCurrentAnswerAction});default:return/*#__PURE__*/React.createElement(\"div\",null,\"Something went wrong\");}};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Heading,{as:\"h2\"},title),/*#__PURE__*/React.createElement(\"p\",null,text),questionBody(),/*#__PURE__*/React.createElement(Timer,{questionId:questionId,currentExam:currentExam,answerQuestionAction:currentAnswerAction}));}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/takeQuestion/Question.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","useForm","FreeTextQuestion","MultipleChoiceQuestion","Heading","Timer","setAnswerStartTime","Question","question","currentAnswerAction","setCurrentAnswerAction","questionId","questionType","title","text","dispatch","state","examState","currentExamId","currentExam","examTable","byId","register","handleSubmit","watch","errors","reset","getValues","questionBody"],"mappings":"wIAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAAuD,OAAvD,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,OAAT,KAAwB,iBAAxB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,iCAA7B,CACA,MAAOC,CAAAA,sBAAP,KAAmC,+BAAnC,CAEA,OAASC,OAAT,KAAwB,UAAxB,CAEA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CAAoC;AACpC,OAASC,kBAAT,KAAmC,qBAAnC,CAGA,cAAe,SAASC,CAAAA,QAAT,MAAwC,IAApBC,CAAAA,QAAoB,MAApBA,QAAoB,eACCV,QAAQ,CAAC,UAAM,CAAE,CAAT,CADT,wCAC9CW,mBAD8C,eACzBC,sBADyB,kBAE7CC,CAAAA,UAF6C,CAEHH,QAFG,CAE7CG,UAF6C,CAEjCC,YAFiC,CAEHJ,QAFG,CAEjCI,YAFiC,CAEnBC,KAFmB,CAEHL,QAFG,CAEnBK,KAFmB,CAEZC,IAFY,CAEHN,QAFG,CAEZM,IAFY,CAGrD,GAAMC,CAAAA,QAAQ,CAAGhB,WAAW,EAA5B,CAHqD,iBAI3BC,WAAW,CAAC,SAACgB,KAAD,QAAuBA,CAAAA,KAAK,CAACC,SAA7B,EAAD,CAJgB,CAI7CC,aAJ6C,cAI7CA,aAJ6C,CAKrD,GAAMC,CAAAA,WAAW,CAAGnB,WAAW,CAC7B,SAACgB,KAAD,QAAuBA,CAAAA,KAAK,CAACI,SAAN,CAAgBC,IAAhB,CAAqBH,aAArB,CAAvB,EAD6B,CAA/B,CALqD,aAQejB,OAAO,EARtB,CAQ7CqB,QAR6C,UAQ7CA,QAR6C,CAQnCC,YARmC,UAQnCA,YARmC,CAQrBC,KARqB,UAQrBA,KARqB,CAQdC,MARc,UAQdA,MARc,CAQNC,KARM,UAQNA,KARM,CAQCC,SARD,UAQCA,SARD,CAUrD9B,SAAS,CAAC,UAAM,CACdkB,QAAQ,CAACT,kBAAkB,CAAC,CAAEK,UAAU,CAAVA,UAAF,CAAD,CAAnB,CAAR,CACAe,KAAK,GACN,CAHQ,CAGN,CAACf,UAAD,CAAaI,QAAb,CAAuBW,KAAvB,CAHM,CAAT,CAKA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,OAAQhB,YAAR,EACE,IAAK,UAAL,CACE,mBACE,oBAAC,gBAAD,EACE,QAAQ,CAAEU,QADZ,CAEE,YAAY,CAAEC,YAFhB,CAGE,QAAQ,CAAEf,QAHZ,CAIE,SAAS,CAAEmB,SAJb,CAKE,sBAAsB,CAAEjB,sBAL1B,EADF,CASF,IAAK,gBAAL,CACE,mBACE,oBAAC,sBAAD,EACE,QAAQ,CAAEY,QADZ,CAEE,YAAY,CAAEC,YAFhB,CAGE,QAAQ,CAAEf,QAHZ,CAIE,SAAS,CAAEmB,SAJb,CAKE,sBAAsB,CAAEjB,sBAL1B,EADF,CASF,QACE,mBAAO,sDAAP,CAtBJ,CAwBD,CAzBD,CA0BA,mBACE,4CACE,oBAAC,OAAD,EAAS,EAAE,CAAE,IAAb,EAAoBG,KAApB,CADF,cAEE,6BAAIC,IAAJ,CAFF,CAGGc,YAAY,EAHf,cAIE,oBAAC,KAAD,EACE,UAAU,CAAEjB,UADd,CAEE,WAAW,CAAEQ,WAFf,CAGE,oBAAoB,CAAEV,mBAHxB,EAJF,CADF,CAYD","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { TQuestion, TRootState } from \"../../types/examTypes\";\nimport { Heading } from \"theme-ui\";\n\nimport Timer from \"../timer/Timer\"; //!Important\nimport { setAnswerStartTime } from \"../../redux/actions\";\nimport { UserContext } from \"../../services/userContext\";\n\nexport default function Question({ question }: TProps) {\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  const { questionId, questionType, title, text } = question;\n  const dispatch = useDispatch();\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n  const currentExam = useSelector(\n    (state: TRootState) => state.examTable.byId[currentExamId]\n  );\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  useEffect(() => {\n    dispatch(setAnswerStartTime({ questionId }));\n    reset();\n  }, [questionId, dispatch, reset]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return (\n          <FreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            question={question}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n          />\n        );\n      case \"multipleChoice\":\n        return (\n          <MultipleChoiceQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            question={question}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n  return (\n    <div>\n      <Heading as={\"h2\"}>{title}</Heading>\n      <p>{text}</p>\n      {questionBody()}\n      <Timer\n        questionId={questionId}\n        currentExam={currentExam}\n        answerQuestionAction={currentAnswerAction}\n      ></Timer>\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}