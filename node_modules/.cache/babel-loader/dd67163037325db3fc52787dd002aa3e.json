{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nexport default function Timer({\n  questionId,\n  currentExam,\n  answerQuestionAction\n}) {\n  const history = useHistory();\n  const useTimer = true;\n  const dispatch = useDispatch();\n  const answer = useSelector(state => state.answerTable.byId[questionId]);\n  const question = useSelector(state => state.questionTable.byId[questionId]);\n  const {\n    timeStart\n  } = answer;\n  const {\n    timeLimitMs\n  } = question;\n  const now = Date.now();\n  const [timeLeft, setTimeLeft] = useState((timeStart ? Math.round(timeLimitMs - (now - timeStart)) : timeLimitMs) / 1000);\n  useEffect(() => {\n    if (useTimer) {\n      setTimeLeft(timeLimitMs / 1000);\n      const interval = setInterval(() => {\n        const now = Date.now();\n        const timeStart = store.getState().answerTable.byId[questionId].timeStart;\n        const newTimeLeft = Math.round((timeLimitMs - (now - timeStart)) / 1000);\n\n        if (newTimeLeft > -1) {\n          setTimeLeft(newTimeLeft);\n        } else {\n          dispatch(answerQuestionAction()); // dispatch(nextQuestion({ currentExam }));\n\n          clearInterval(interval);\n        }\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [question.questionId, currentExam, dispatch, timeLimitMs, questionId, answerQuestionAction]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, timeLeft));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","useSelector","useDispatch","useHistory","store","Heading","Timer","questionId","currentExam","answerQuestionAction","history","useTimer","dispatch","answer","state","answerTable","byId","question","questionTable","timeStart","timeLimitMs","now","Date","timeLeft","setTimeLeft","Math","round","interval","setInterval","getState","newTimeLeft","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAIA,eAAe,SAASC,KAAT,CAAe;AAC5BC,EAAAA,UAD4B;AAE5BC,EAAAA,WAF4B;AAG5BC,EAAAA;AAH4B,CAAf,EAIZ;AACD,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAMQ,QAAQ,GAAG,IAAjB;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAGZ,WAAW,CACvBa,KAAD,IAAuBA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,CAAuBT,UAAvB,CADC,CAA1B;AAGA,QAAMU,QAAQ,GAAGhB,WAAW,CACzBa,KAAD,IAAuBA,KAAK,CAACI,aAAN,CAAoBF,IAApB,CAAyBT,UAAzB,CADG,CAA5B;AAIA,QAAM;AAAEY,IAAAA;AAAF,MAAgBN,MAAtB;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkBH,QAAxB;AACA,QAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CACtC,CAACmB,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAWN,WAAW,IAAIC,GAAG,GAAGF,SAAV,CAAtB,CAAH,GAAiDC,WAA3D,IACE,IAFoC,CAAxC;AAKArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,QAAJ,EAAc;AACZa,MAAAA,WAAW,CAACJ,WAAW,GAAG,IAAf,CAAX;AACA,YAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,cAAMP,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,cAAMF,SAAS,GAAGf,KAAK,CAACyB,QAAN,GAAiBd,WAAjB,CAA6BC,IAA7B,CAAkCT,UAAlC,EACfY,SADH;AAEA,cAAMW,WAAW,GAAGL,IAAI,CAACC,KAAL,CAClB,CAACN,WAAW,IAAIC,GAAG,GAAGF,SAAV,CAAZ,IAAoC,IADlB,CAApB;;AAGA,YAAIW,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpBN,UAAAA,WAAW,CAACM,WAAD,CAAX;AACD,SAFD,MAEO;AACLlB,UAAAA,QAAQ,CAACH,oBAAoB,EAArB,CAAR,CADK,CAEL;;AACAsB,UAAAA,aAAa,CAACJ,QAAD,CAAb;AACD;AACF,OAd2B,EAczB,IAdyB,CAA5B;AAgBA,aAAO,MAAM;AACXI,QAAAA,aAAa,CAACJ,QAAD,CAAb;AACD,OAFD;AAGD;AACF,GAvBQ,EAuBN,CACDV,QAAQ,CAACV,UADR,EAEDC,WAFC,EAGDI,QAHC,EAIDQ,WAJC,EAKDb,UALC,EAMDE,oBANC,CAvBM,CAAT;AAgCA,sBACE,uDACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBc,QAApB,CADF,CADF;AAKD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nimport { TRootState } from \"../../types/examTypes\";\nimport { nextQuestion } from \"../../redux/actions\";\n\nexport default function Timer({\n  questionId,\n  currentExam,\n  answerQuestionAction,\n}) {\n  const history = useHistory();\n  const useTimer = true;\n  const dispatch = useDispatch();\n  const answer = useSelector(\n    (state: TRootState) => state.answerTable.byId[questionId]\n  );\n  const question = useSelector(\n    (state: TRootState) => state.questionTable.byId[questionId]\n  );\n\n  const { timeStart } = answer;\n  const { timeLimitMs } = question;\n  const now = Date.now();\n\n  const [timeLeft, setTimeLeft] = useState(\n    (timeStart ? Math.round(timeLimitMs - (now - timeStart)) : timeLimitMs) /\n      1000\n  );\n\n  useEffect(() => {\n    if (useTimer) {\n      setTimeLeft(timeLimitMs / 1000);\n      const interval = setInterval(() => {\n        const now = Date.now();\n        const timeStart = store.getState().answerTable.byId[questionId]\n          .timeStart;\n        const newTimeLeft = Math.round(\n          (timeLimitMs - (now - timeStart)) / 1000\n        );\n        if (newTimeLeft > -1) {\n          setTimeLeft(newTimeLeft);\n        } else {\n          dispatch(answerQuestionAction());\n          // dispatch(nextQuestion({ currentExam }));\n          clearInterval(interval);\n        }\n      }, 1000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [\n    question.questionId,\n    currentExam,\n    dispatch,\n    timeLimitMs,\n    questionId,\n    answerQuestionAction,\n  ]);\n\n  return (\n    <>\n      <Heading as={\"h3\"}>{timeLeft}</Heading>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}