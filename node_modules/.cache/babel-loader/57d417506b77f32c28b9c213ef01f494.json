{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nexport default function Question({\n  questionType\n}) {\n  /**\n   * React Hooks\n   */\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  use;\n  /**\n   * Redux\n   */\n\n  const currentQuestionId = useSelector(state => state.examState.currentQuestionId);\n  const questionTable = useSelector(state => state.questionTable);\n  /**\n   * Hook Form\n   */\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (currentQuestionId) {\n      setCurrentQuestionState({\n        question: questionTable.byId[currentQuestionId]\n      });\n    }\n  }, [currentQuestionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"Free Text\":\n        return /*#__PURE__*/React.createElement(MakeFreeText, {\n          questionContent: questionState,\n          register: register,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          setCurrentAnswerAction: setCurrentAnswerAction,\n          reset: reset,\n          questionId: currentQuestionId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }\n        });\n\n      case \"Multiple Choice\":\n        return /*#__PURE__*/React.createElement(MakeMultipleChoice, {\n          questionContent: questionState,\n          register: register,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          setCurrentAnswerAction: setCurrentAnswerAction,\n          reset: reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 10\n    }\n  }, questionBody());\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx"],"names":["React","useEffect","useState","useSelector","useForm","MakeFreeText","MakeMultipleChoice","Question","questionType","currentAnswerAction","setCurrentAnswerAction","use","currentQuestionId","state","examState","questionTable","register","handleSubmit","watch","errors","reset","getValues","setCurrentQuestionState","question","byId","questionBody","questionState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAGA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAoC;AACjD;;;AAGA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDR,QAAQ,CAAC,MAAM,CAAE,CAAT,CAA9D;AACAS,EAAAA,GAAG;AACH;;;;AAGA,QAAMC,iBAAiB,GAAGT,WAAW,CAClCU,KAAD,IAAuBA,KAAK,CAACC,SAAN,CAAgBF,iBADJ,CAArC;AAGA,QAAMG,aAAa,GAAGZ,WAAW,CAAEU,KAAD,IAAuBA,KAAK,CAACE,aAA9B,CAAjC;AAEA;;;;AAIA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA,KAAzC;AAAgDC,IAAAA;AAAhD,MAA8DjB,OAAO,EAA3E;AAEA;;;;AAGAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,iBAAJ,EAAuB;AACrBU,MAAAA,uBAAuB,CAAC;AACtBC,QAAAA,QAAQ,EAAER,aAAa,CAACS,IAAd,CAAmBZ,iBAAnB;AADY,OAAD,CAAvB;AAGD;AACF,GANQ,EAMN,CAACA,iBAAD,CANM,CAAT;;AAQA,QAAMa,YAAY,GAAG,MAAM;AACzB,YAAQjB,YAAR;AACE,WAAK,WAAL;AACE,4BACE,oBAAC,YAAD;AACE,UAAA,eAAe,EAAEkB,aADnB;AAEE,UAAA,QAAQ,EAAEV,QAFZ;AAGE,UAAA,YAAY,EAAEC,YAHhB;AAIE,UAAA,SAAS,EAAEI,SAJb;AAKE,UAAA,sBAAsB,EAAEX,sBAL1B;AAME,UAAA,KAAK,EAAEU,KANT;AAOE,UAAA,UAAU,EAAER,iBAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAWF,WAAK,iBAAL;AACE,4BACE,oBAAC,kBAAD;AACE,UAAA,eAAe,EAAEc,aADnB;AAEE,UAAA,QAAQ,EAAEV,QAFZ;AAGE,UAAA,YAAY,EAAEC,YAHhB;AAIE,UAAA,SAAS,EAAEI,SAJb;AAKE,UAAA,sBAAsB,EAAEX,sBAL1B;AAME,UAAA,KAAK,EAAEU,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAUF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAzBJ;AA2BD,GA5BD;;AA6BA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMK,YAAY,EAAlB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { TRootState } from \"../../../types/examTypes\";\n\nexport default function Question({ questionType }) {\n  /**\n   * React Hooks\n   */\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  use\n  /**\n   * Redux\n   */\n  const currentQuestionId = useSelector(\n    (state: TRootState) => state.examState.currentQuestionId\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n\n  /**\n   * Hook Form\n   */\n\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  /**\n   * Effects\n   */\n  useEffect(() => {\n    if (currentQuestionId) {\n      setCurrentQuestionState({\n        question: questionTable.byId[currentQuestionId],\n      });\n    }\n  }, [currentQuestionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"Free Text\":\n        return (\n          <MakeFreeText\n            questionContent={questionState}\n            register={register}\n            handleSubmit={handleSubmit}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n            reset={reset}\n            questionId={currentQuestionId}\n          />\n        );\n      case \"Multiple Choice\":\n        return (\n          <MakeMultipleChoice\n            questionContent={questionState}\n            register={register}\n            handleSubmit={handleSubmit}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n            reset={reset}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n  return <div>{questionBody()}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}