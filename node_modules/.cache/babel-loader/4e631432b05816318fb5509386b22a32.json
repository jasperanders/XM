{"ast":null,"code":"import _objectSpread from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{Label,Checkbox,Button}from\"theme-ui\";import{v4}from\"uuid\";import{nextQuestion,answerMultipleChoiceQuestion,setAnswerEndTime}from\"../../../redux/actions\";import{multipleChoiceFormName}from\"../../../constants/constants\";export default function MultipleChoiceQuestion(_ref){var register=_ref.register,handleSubmit=_ref.handleSubmit,question=_ref.question,getValues=_ref.getValues,setCurrentAnswerAction=_ref.setCurrentAnswerAction;/**\n   * Redux hooks\n   */var dispatch=useDispatch();var _useState=useState({possibleAnswers:[]}),_useState2=_slicedToArray(_useState,2),questionState=_useState2[0],setQuestionState=_useState2[1];var questionBodyTable=useSelector(function(state){return state.questionBodyMultipleChoiceTable;});var currentExam=useSelector(function(state){return state.examTable;});var _useSelector=useSelector(function(state){return state.examState;}),currentExamId=_useSelector.currentExamId,currentQuestionId=_useSelector.currentQuestionId;/**\n   * miscellaneous functions\n   */var makeSelectedAnswers=function makeSelectedAnswers(data){var multipleChoice=data.multipleChoice;var selectedAnswers=[];questionState.possibleAnswers.forEach(function(el,i){if(data.multipleChoice[i]){selectedAnswers.push(el);}});return selectedAnswers;};/**\n   * Effect Hooks\n   */useEffect(function(){console.log(questionBodyTable);console.log(question);setCurrentAnswerAction(function(){return function(){// {nested: true} returns values as if they were submitted\nvar selectedAnswers=makeSelectedAnswers(getValues({nest:true}));return answerMultipleChoiceQuestion({questionId:question.questionId,selectedAnswers:selectedAnswers});};});setQuestionState(function(old){return _objectSpread({},old,{possibleAnswers:questionBodyTable.byId[question.questionId].possibleAnswers});});},[question]);/**\n   * Destructuring\n   */var onSubmit=function onSubmit(data){var selectedAnswers=makeSelectedAnswers(data);dispatch(answerMultipleChoiceQuestion({questionId:question.questionId,selectedAnswers:selectedAnswers}));dispatch(setAnswerEndTime({questionId:question.questionId}));dispatch(nextQuestion({currentExam:currentExam.byId[currentExamId]}));};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit(onSubmit)},questionState.possibleAnswers.map(function(possibleAnswer,index){return/*#__PURE__*/React.createElement(\"div\",{key:v4()},/*#__PURE__*/React.createElement(Label,null,/*#__PURE__*/React.createElement(Checkbox,{defaultChecked:false,name:\"\".concat(multipleChoiceFormName,\"[\").concat(index,\"]\"),ref:register}),possibleAnswer));}),/*#__PURE__*/React.createElement(Button,{type:\"submit\"},\"Save and Next Question\"));}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/takeQuestion/questionType/MultipleChoice.tsx"],"names":["React","useState","useEffect","useDispatch","useSelector","Label","Checkbox","Button","v4","nextQuestion","answerMultipleChoiceQuestion","setAnswerEndTime","multipleChoiceFormName","MultipleChoiceQuestion","register","handleSubmit","question","getValues","setCurrentAnswerAction","dispatch","possibleAnswers","questionState","setQuestionState","questionBodyTable","state","questionBodyMultipleChoiceTable","currentExam","examTable","examState","currentExamId","currentQuestionId","makeSelectedAnswers","data","multipleChoice","selectedAnswers","forEach","el","i","push","console","log","nest","questionId","old","byId","onSubmit","map","possibleAnswer","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { v4 } from \"uuid\";\nimport {\n  nextQuestion,\n  answerMultipleChoiceQuestion,\n  setAnswerEndTime,\n} from \"../../../redux/actions\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\n\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n}) {\n  /**\n   * Redux hooks\n   */\n  const dispatch = useDispatch();\n  const [questionState, setQuestionState] = useState({\n    possibleAnswers: [],\n  });\n\n  const questionBodyTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n\n  const { currentExamId, currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n\n  /**\n   * miscellaneous functions\n   */\n\n  const makeSelectedAnswers = (data) => {\n    const { multipleChoice } = data;\n    let selectedAnswers = [];\n    questionState.possibleAnswers.forEach((el, i) => {\n      if (data.multipleChoice[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    return selectedAnswers;\n  };\n\n  /**\n   * Effect Hooks\n   */\n\n  useEffect(() => {\n    console.log(questionBodyTable);\n    console.log(question);\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({ nest: true }));\n        return answerMultipleChoiceQuestion({\n          questionId: question.questionId,\n          selectedAnswers,\n        });\n      };\n    });\n    setQuestionState((old) => {\n      return {\n        ...old,\n        possibleAnswers:\n          questionBodyTable.byId[question.questionId].possibleAnswers,\n      };\n    });\n  }, [question]);\n\n  /**\n   * Destructuring\n   */\n  const onSubmit = (data) => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(\n      answerMultipleChoiceQuestion({\n        questionId: question.questionId,\n        selectedAnswers,\n      })\n    );\n    dispatch(setAnswerEndTime({ questionId: question.questionId }));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {questionState.possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`${multipleChoiceFormName}[${index}]`}\n                ref={register}\n              />\n              {possibleAnswer}\n            </Label>\n          </div>\n        );\n      })}\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}