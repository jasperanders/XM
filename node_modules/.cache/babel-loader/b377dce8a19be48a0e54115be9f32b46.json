{"ast":null,"code":"import _toConsumableArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useSelector}from\"react-redux\";import{v4}from\"uuid\";import{Textarea,Button,Input,Flex,Label,Checkbox}from\"theme-ui\";import HttpService from\"../../../services/http\";import apiRoutes from\"../../../services/apiRoutes\";import{useForm,Controller}from\"react-hook-form\";export default function MakeMultipleChoice(_ref){var makeQuestion=_ref.makeQuestion,questionId=_ref.questionId;/**\n   * React Hooks\n   */var _useState=useState({title:\"\",text:\"\",possibleAnswers:[\"\",\"\"],points:null}),_useState2=_slicedToArray(_useState,2),multipleChoiceState=_useState2[0],setMultipleChoiceState=_useState2[1];/**\n   * Redux Hooks\n   */var questionTable=useSelector(function(state){return state.questionTable;});var questionBodyMultipleChoiceTable=useSelector(function(state){return state.questionBodyMultipleChoiceTable;});/**\n   * Form Hook\n   */var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,watch=_useForm.watch,errors=_useForm.errors,control=_useForm.control,reset=_useForm.reset,getValues=_useForm.getValues;/**\n   * Effect\n   *\n   */useEffect(function(){if(questionId!==null){setMultipleChoiceState({title:questionTable.byId[questionId].title,text:questionTable.byId[questionId].text,possibleAnswers:questionBodyMultipleChoiceTable.byId[questionId].possibleAnswers,points:null});}else{setMultipleChoiceState({title:\"\",text:\"\",possibleAnswers:[\"\",\"\"],points:null});}},[questionId]);useEffect(function(){reset();},[multipleChoiceState.possibleAnswers]);/**\n   * Functions\n   */var checkedIndex=function checkedIndex(possible,correct){var res=[];possible.map(function(el,idx){el===correct[idx]?res.push(true):res.push(false);});return res;};var checkedSolutions=function checkedSolutions(possible,correct){var res=[];possible.map(function(el,idx){if(correct[idx])res.push(el);});return res;};var makeBody=function makeBody(_ref2){var id=_ref2.id,bodyContent=_ref2.bodyContent;HttpService.post(apiRoutes.MULTIPLE_CHOICE_QUESTION,{content:{questionId:id,possibleAnswers:bodyContent.possibleAnswers}}).catch(function(){console.error(\"error make body\");});};var makeAnswer=function makeAnswer(_ref3){var id=_ref3.id,answerContent=_ref3.answerContent;var answerData={questionId:id,master:true};var answerBody={questionId:id,answers:answerContent.selectedAnswers};HttpService.post(apiRoutes.ANSWER,{content:answerData}).then(function(_ref4){var data=_ref4.data;HttpService.post(apiRoutes.MULTIPLE_CHOICE_ANSWER,{content:_objectSpread({answerId:data.id},answerBody)}).catch(function(){console.error(\"error make answer body\");});}).catch(function(){console.error(\"error make answer\");});};var onSubmit=function onSubmit(data){var selectedAnswers=checkedSolutions(data.multipleChoiceAnswerText,data.multipleChoiceAnswer);var questionData={timeLimitMs:50000,questionType:\"multipleChoice\",title:data.questionTitle,text:data.questionText,points:data.questionPoints};makeQuestion({questionContent:questionData,bodyContent:{possibleAnswers:data.multipleChoiceAnswerText},makeBody:makeBody,answerContent:{selectedAnswers:selectedAnswers},makeAnswer:makeAnswer});};var possibleAnswers=multipleChoiceState.possibleAnswers,title=multipleChoiceState.title,text=multipleChoiceState.text;return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit(onSubmit)},/*#__PURE__*/React.createElement(Flex,{sx:{flexDirection:\"column\",alignItems:\"flex-start\"}},/*#__PURE__*/React.createElement(Input,{ref:register,name:\"questionTitle\",placeholder:\"Provide a Question Title here\",defaultValue:title}),/*#__PURE__*/React.createElement(Textarea,{rows:5,name:\"questionText\",placeholder:\"Provide a question here.\",ref:register,defaultValue:text}),/*#__PURE__*/React.createElement(Button,{sx:{flexGrow:0},onClick:function onClick(){setMultipleChoiceState(function(old){return _objectSpread({},old,{possibleAnswers:[].concat(_toConsumableArray(old.possibleAnswers),[\"\"])});});}},\"Add Answer\"),possibleAnswers.map(function(possibleAnswer,index){return/*#__PURE__*/React.createElement(\"div\",{key:v4(),style:{marginTop:\"0.5rem\",alignContent:\"center\"}},/*#__PURE__*/React.createElement(Flex,{sx:{flexDirection:\"row\",alignSelf:\"stretch\"}},/*#__PURE__*/React.createElement(Label,null,/*#__PURE__*/React.createElement(Controller,{sx:{marginTop:\"0.5rem\"},as:Checkbox,name:\"multipleChoiceAnswer[\".concat(index,\"]\"),control:control,defaultValue:false}),/*#__PURE__*/React.createElement(Input,{ref:register,name:\"multipleChoiceAnswerText[\".concat(index,\"]\"),placeholder:\"Provide an Answer\",defaultValue:possibleAnswer?possibleAnswer:null})),/*#__PURE__*/React.createElement(Button,{sx:{margin:\"0\",marginLeft:\"0.5rem\"},variant:\"warning\",onClick:function onClick(){setMultipleChoiceState(function(old){old.possibleAnswers.splice(index,1);return old;});}},\"x\")));}),/*#__PURE__*/React.createElement(Input,{sx:{marginTop:\"0.5rem\",maxWidth:\"20%\"},ref:register,name:\"questionPoints\",type:\"number\",placeholder:\"Points\",defaultValue:multipleChoiceState.points}),/*#__PURE__*/React.createElement(Flex,null,/*#__PURE__*/React.createElement(Button,{sx:{marginRight:\"0.5rem\"},variant:\"warning\",onClick:function onClick(){reset();}},\"Reset\"),/*#__PURE__*/React.createElement(Button,{type:\"submit\"},\"Save\"))));}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx"],"names":["React","useState","useEffect","useSelector","v4","Textarea","Button","Input","Flex","Label","Checkbox","HttpService","apiRoutes","useForm","Controller","MakeMultipleChoice","makeQuestion","questionId","title","text","possibleAnswers","points","multipleChoiceState","setMultipleChoiceState","questionTable","state","questionBodyMultipleChoiceTable","register","handleSubmit","watch","errors","control","reset","getValues","byId","checkedIndex","possible","correct","res","map","el","idx","push","checkedSolutions","makeBody","id","bodyContent","post","MULTIPLE_CHOICE_QUESTION","content","catch","console","error","makeAnswer","answerContent","answerData","master","answerBody","answers","selectedAnswers","ANSWER","then","data","MULTIPLE_CHOICE_ANSWER","answerId","onSubmit","multipleChoiceAnswerText","multipleChoiceAnswer","questionData","timeLimitMs","questionType","questionTitle","questionText","questionPoints","questionContent","flexDirection","alignItems","flexGrow","old","possibleAnswer","index","marginTop","alignContent","alignSelf","margin","marginLeft","splice","maxWidth","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\n\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nexport default function MakeMultipleChoice({ makeQuestion, questionId }) {\n  /**\n   * React Hooks\n   */\n\n  const [multipleChoiceState, setMultipleChoiceState] = useState({\n    title: \"\",\n    text: \"\",\n    possibleAnswers: [\"\", \"\"],\n    points: null,\n  });\n\n  /**\n   * Redux Hooks\n   */\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  /**\n   * Form Hook\n   */\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    control,\n    reset,\n    getValues,\n  } = useForm();\n\n  /**\n   * Effect\n   *\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMultipleChoiceState({\n        title: questionTable.byId[questionId].title,\n        text: questionTable.byId[questionId].text,\n        possibleAnswers:\n          questionBodyMultipleChoiceTable.byId[questionId].possibleAnswers,\n        points: null,\n      });\n    } else {\n      setMultipleChoiceState({\n        title: \"\",\n        text: \"\",\n        possibleAnswers: [\"\", \"\"],\n        points: null,\n      });\n    }\n  }, [questionId]);\n\n  useEffect(() => {\n    reset();\n  }, [multipleChoiceState.possibleAnswers]);\n\n  /**\n   * Functions\n   */\n\n  const checkedIndex = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      el === correct[idx] ? res.push(true) : res.push(false);\n    });\n    return res;\n  };\n\n  const checkedSolutions = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      if (correct[idx]) res.push(el);\n    });\n    return res;\n  };\n\n  const makeBody = ({ id, bodyContent }) => {\n    HttpService.post(apiRoutes.MULTIPLE_CHOICE_QUESTION, {\n      content: { questionId: id, possibleAnswers: bodyContent.possibleAnswers },\n    }).catch(() => {\n      console.error(\"error make body\");\n    });\n  };\n\n  const makeAnswer = ({ id, answerContent }) => {\n    const answerData = { questionId: id, master: true };\n    const answerBody = {\n      questionId: id,\n      answers: answerContent.selectedAnswers,\n    };\n    HttpService.post(apiRoutes.ANSWER, { content: answerData })\n      .then(({ data }) => {\n        HttpService.post(apiRoutes.MULTIPLE_CHOICE_ANSWER, {\n          content: {\n            answerId: data.id,\n            ...answerBody,\n          },\n        }).catch(() => {\n          console.error(\"error make answer body\");\n        });\n      })\n      .catch(() => {\n        console.error(\"error make answer\");\n      });\n  };\n\n  const onSubmit = (data) => {\n    const selectedAnswers = checkedSolutions(\n      data.multipleChoiceAnswerText,\n      data.multipleChoiceAnswer\n    );\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"multipleChoice\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints,\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: { possibleAnswers: data.multipleChoiceAnswerText },\n      makeBody,\n      answerContent: { selectedAnswers },\n      makeAnswer,\n    });\n  };\n\n  const { possibleAnswers, title, text } = multipleChoiceState;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex\n        sx={{\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        <Input\n          ref={register}\n          name={\"questionTitle\"}\n          placeholder=\"Provide a Question Title here\"\n          defaultValue={title}\n        />\n        <Textarea\n          rows={5}\n          name={\"questionText\"}\n          placeholder={\"Provide a question here.\"}\n          ref={register}\n          defaultValue={text}\n        />\n        <Button\n          sx={{ flexGrow: 0 }}\n          onClick={() => {\n            setMultipleChoiceState((old) => ({\n              ...old,\n              possibleAnswers: [...old.possibleAnswers, \"\"],\n            }));\n          }}\n        >\n          Add Answer\n        </Button>\n\n        {possibleAnswers.map((possibleAnswer, index) => {\n          return (\n            <div\n              key={v4()}\n              style={{ marginTop: \"0.5rem\", alignContent: \"center\" }}\n            >\n              <Flex\n                sx={{\n                  flexDirection: \"row\",\n                  alignSelf: \"stretch\",\n                }}\n              >\n                <Label>\n                  {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n                  <Controller\n                    sx={{ marginTop: \"0.5rem\" }}\n                    as={Checkbox}\n                    name={`multipleChoiceAnswer[${index}]`}\n                    control={control}\n                    defaultValue={false}\n                  />\n                  <Input\n                    ref={register}\n                    name={`multipleChoiceAnswerText[${index}]`}\n                    placeholder=\"Provide an Answer\"\n                    defaultValue={possibleAnswer ? possibleAnswer : null}\n                  />\n                </Label>\n                <Button\n                  sx={{ margin: \"0\", marginLeft: \"0.5rem\" }}\n                  variant=\"warning\"\n                  onClick={() => {\n                    setMultipleChoiceState((old) => {\n                      old.possibleAnswers.splice(index, 1);\n                      return old;\n                    });\n                  }}\n                >\n                  x\n                </Button>\n              </Flex>\n            </div>\n          );\n        })}\n        <Input\n          sx={{ marginTop: \"0.5rem\", maxWidth: \"20%\" }}\n          ref={register}\n          name={\"questionPoints\"}\n          type=\"number\"\n          placeholder=\"Points\"\n          defaultValue={multipleChoiceState.points}\n        />\n        <Flex>\n          <Button\n            sx={{ marginRight: \"0.5rem\" }}\n            variant=\"warning\"\n            onClick={() => {\n              reset();\n            }}\n          >\n            Reset\n          </Button>\n          <Button type=\"submit\">Save</Button>\n        </Flex>\n      </Flex>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}