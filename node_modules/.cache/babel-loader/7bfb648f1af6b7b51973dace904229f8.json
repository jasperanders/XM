{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeFreeText.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Textarea, Button, Input } from \"theme-ui\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nexport default function MakeFreeText({\n  register,\n  handleSubmit,\n  getValues,\n  reset,\n  questionId,\n  makeQuestion\n}) {\n  /**\n   * React Hooks\n   */\n  const [makeFreeTextState, setMakeFreeTextState] = useState({\n    title: null,\n    questionText: null,\n    masterAnswer: null,\n    points: null\n  });\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const questionTable = useSelector(state => state.questionTable);\n  /**\n   * Form Hook\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMakeFreeTextState({\n        title: questionTable.byId[questionId].title,\n        questionText: questionTable.byId[questionId].text,\n        masterAnswer: \"\",\n        points: 0\n      });\n    } else {\n      setMakeFreeTextState(() => ({\n        title: \"\",\n        questionText: \"\",\n        masterAnswer: \"\",\n        points: null\n      }));\n    }\n\n    reset();\n  }, [questionId]);\n\n  const makeBody = ({\n    id,\n    bodyContent\n  }) => {\n    HttpService.post(apiRoutes.FREE_TEXT_QUESTION, {\n      questionId: id\n    });\n  };\n\n  const makeAnswer = ({\n    id,\n    answerContent\n  }) => {\n    const answerData = {\n      questionId: id,\n      master: true\n    };\n    const answerBody = {\n      questionId: id,\n      answerText: answerContent\n    };\n    HttpService.post(apiRoutes.ANSWER, answerData).then(({\n      data\n    }) => {\n      HttpService.post(apiRoutes.FREE_TEXT_ANSWER, {\n        ananswerBody\n      });\n    });\n  };\n\n  const onSubmit = data => {\n    console.log(\"submitted\");\n    console.log(data);\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"freeText\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: {},\n      makeBody,\n      answerContent: {},\n      makeAnswer\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    name: \"questionTitle\",\n    placeholder: \"Provide a Question Title here\",\n    defaultValue: makeFreeTextState.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Textarea, {\n    rows: 5,\n    name: \"questionText\",\n    placeholder: \"Provide a question here.\",\n    ref: register,\n    defaultValue: makeFreeTextState.questionText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Textarea, {\n    rows: 10,\n    name: \"masterAnswer\",\n    placeholder: \"Provide master Answer here\",\n    defaultValue: makeFreeTextState.masterAnswer,\n    ref: register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    name: \"questionPoints\",\n    type: \"number\",\n    placeholder: \"Points\",\n    defaultValue: makeFreeTextState.points,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      marginRight: \"0.5rem\"\n    },\n    variant: \"warning\",\n    onClick: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Save\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeFreeText.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","Textarea","Button","Input","HttpService","apiRoutes","MakeFreeText","register","handleSubmit","getValues","reset","questionId","makeQuestion","makeFreeTextState","setMakeFreeTextState","title","questionText","masterAnswer","points","dispatch","questionTable","state","byId","text","makeBody","id","bodyContent","post","FREE_TEXT_QUESTION","makeAnswer","answerContent","answerData","master","answerBody","answerText","ANSWER","then","data","FREE_TEXT_ANSWER","ananswerBody","onSubmit","console","log","questionData","timeLimitMs","questionType","questionTitle","questionPoints","questionContent","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Textarea, Button, Input, Grid } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function MakeFreeText({\n  register,\n  handleSubmit,\n  getValues,\n  reset,\n  questionId,\n  makeQuestion,\n}) {\n  /**\n   * React Hooks\n   */\n  const [makeFreeTextState, setMakeFreeTextState] = useState({\n    title: null,\n    questionText: null,\n    masterAnswer: null,\n    points: null,\n  });\n\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  /**\n   * Form Hook\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMakeFreeTextState({\n        title: questionTable.byId[questionId].title,\n        questionText: questionTable.byId[questionId].text,\n        masterAnswer: \"\",\n        points: 0,\n      });\n    } else {\n      setMakeFreeTextState(() => ({\n        title: \"\",\n        questionText: \"\",\n        masterAnswer: \"\",\n        points: null,\n      }));\n    }\n    reset();\n  }, [questionId]);\n\n  const makeBody = ({ id, bodyContent }) => {\n    HttpService.post(apiRoutes.FREE_TEXT_QUESTION, { questionId: id });\n  };\n\n  const makeAnswer = ({ id, answerContent }) => {\n    const answerData = { questionId: id, master: true };\n    const answerBody = { questionId: id, answerText: answerContent };\n    HttpService.post(apiRoutes.ANSWER, answerData).then(({ data }) => {\n      HttpService.post(apiRoutes.FREE_TEXT_ANSWER, {ananswerBody});\n    });\n  };\n\n  const onSubmit = (data) => {\n    console.log(\"submitted\");\n    console.log(data);\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"freeText\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints,\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: {},\n      makeBody,\n      answerContent: {},\n      makeAnswer,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input\n        ref={register}\n        name={\"questionTitle\"}\n        placeholder=\"Provide a Question Title here\"\n        defaultValue={makeFreeTextState.title}\n      />\n      <Textarea\n        rows={5}\n        name={\"questionText\"}\n        placeholder={\"Provide a question here.\"}\n        ref={register}\n        defaultValue={makeFreeTextState.questionText}\n      />\n      <Textarea\n        rows={10}\n        name={\"masterAnswer\"}\n        placeholder={\"Provide master Answer here\"}\n        defaultValue={makeFreeTextState.masterAnswer}\n        ref={register}\n      />\n      <Input\n        ref={register}\n        name={\"questionPoints\"}\n        type=\"number\"\n        placeholder=\"Points\"\n        defaultValue={makeFreeTextState.points}\n      />\n      <Button sx={{ marginRight: \"0.5rem\" }} variant=\"warning\" onClick={reset}>\n        Reset\n      </Button>\n      <Button type=\"submit\">Save</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}