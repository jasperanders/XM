{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nexport default function MakeMultipleChoice({\n  register,\n  handleSubmit,\n  getValues,\n  setCurrentAnswerAction,\n  reset\n}) {\n  /**\n   * React Hooks\n   */\n  const [multipe, setPossibleAnswers] = useState([]);\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const {\n    currentQuestionId\n  } = useSelector(state => state.examState);\n  const questionTable = useSelector(state => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(state => state.questionBodyMultipleChoiceTable);\n  let question = undefined;\n  let questionBody = undefined;\n\n  if (currentQuestionId) {\n    question = questionTable.byId[currentQuestionId];\n    questionBody = questionBodyMultipleChoiceTable.byId[currentQuestionId];\n  }\n  /**\n   * Form Hook\n   */\n\n  /**\n   * Effect\n   *\n   */\n\n\n  useEffect(() => {\n    console.log(\"effect triggerd\");\n\n    if (currentQuestionId) {\n      setPossibleAnswers(questionBody.possibleAnswers);\n    } else {\n      setPossibleAnswers([\"\", \"\"]);\n    }\n  }, [currentQuestionId]);\n  useEffect(() => {\n    console.log(\"reset\");\n    reset();\n  }, [possibleAnswers]);\n  /**\n   * Functions\n   */\n\n  const onSubmit = data => {\n    console.log(\"submitted\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    sx: {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: register,\n    name: \"questionTitle\",\n    placeholder: \"Provide a Question Title here\",\n    defaultValue: question ? question.title : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Textarea, {\n    rows: 5,\n    name: \"questionText\",\n    placeholder: \"Provide a question here.\",\n    ref: register,\n    defaultValue: question ? question.text : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      flexGrow: 0\n    },\n    onClick: () => {\n      setPossibleAnswers(oldArray => [...oldArray, \"\"]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Add Answer\"), possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      style: {\n        marginTop: \"0.5rem\",\n        alignContent: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Flex, {\n      sx: {\n        flexDirection: \"row\",\n        alignSelf: \"stretch\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      sx: {\n        marginTop: \"0.5rem\"\n      },\n      defaultChecked: false,\n      name: `multipleChoiceAnswer_[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      ref: register,\n      name: `multipleChoiceAnswerText_[${index}]`,\n      placeholder: \"Provide an Answer\",\n      defaultValue: possibleAnswer ? possibleAnswer : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      sx: {\n        margin: \"0\",\n        marginLeft: \"0.5rem\"\n      },\n      variant: \"warning\",\n      onClick: () => {\n        setPossibleAnswers(old => {\n          old.splice(index, 1);\n          return old;\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, \"x\")));\n  }), /*#__PURE__*/React.createElement(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    sx: {\n      marginRight: \"0.5rem\"\n    },\n    variant: \"warning\",\n    onClick: () => {\n      reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeMultipleChoice.tsx"],"names":["React","useState","useEffect","useDispatch","useSelector","v4","Textarea","Button","Input","Flex","Label","Checkbox","MakeMultipleChoice","register","handleSubmit","getValues","setCurrentAnswerAction","reset","multipe","setPossibleAnswers","dispatch","currentQuestionId","state","examState","questionTable","questionBodyMultipleChoiceTable","question","undefined","questionBody","byId","console","log","possibleAnswers","onSubmit","data","flexDirection","alignItems","title","text","flexGrow","oldArray","map","possibleAnswer","index","marginTop","alignContent","alignSelf","margin","marginLeft","old","splice","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\n\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\n\nexport default function MakeMultipleChoice({\n  register,\n  handleSubmit,\n  getValues,\n  setCurrentAnswerAction,\n  reset,\n}) {\n  /**\n   * React Hooks\n   */\n\n  const [multipe, setPossibleAnswers] = useState([]);\n\n  /**\n   * Redux Hooks\n   */\n  const dispatch = useDispatch();\n  const { currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  let question = undefined;\n  let questionBody = undefined;\n\n  if (currentQuestionId) {\n    question = questionTable.byId[currentQuestionId];\n    questionBody = questionBodyMultipleChoiceTable.byId[currentQuestionId];\n  }\n\n  /**\n   * Form Hook\n   */\n\n  /**\n   * Effect\n   *\n   */\n\n  useEffect(() => {\n    console.log(\"effect triggerd\");\n    if (currentQuestionId) {\n      setPossibleAnswers(questionBody.possibleAnswers);\n    } else {\n      setPossibleAnswers([\"\", \"\"]);\n    }\n  }, [currentQuestionId]);\n\n  useEffect(() => {\n    console.log(\"reset\");\n    reset();\n  }, [possibleAnswers]);\n\n  /**\n   * Functions\n   */\n\n  const onSubmit = (data) => {\n    console.log(\"submitted\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex\n        sx={{\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        <Input\n          ref={register}\n          name={\"questionTitle\"}\n          placeholder=\"Provide a Question Title here\"\n          defaultValue={question ? question.title : null}\n        />\n        <Textarea\n          rows={5}\n          name={\"questionText\"}\n          placeholder={\"Provide a question here.\"}\n          ref={register}\n          defaultValue={question ? question.text : null}\n        />\n        <Button\n          sx={{ flexGrow: 0 }}\n          onClick={() => {\n            setPossibleAnswers((oldArray) => [...oldArray, \"\"]);\n          }}\n        >\n          Add Answer\n        </Button>\n\n        {possibleAnswers.map((possibleAnswer, index) => {\n          return (\n            <div\n              key={v4()}\n              style={{ marginTop: \"0.5rem\", alignContent: \"center\" }}\n            >\n              <Flex\n                sx={{\n                  flexDirection: \"row\",\n                  alignSelf: \"stretch\",\n                }}\n              >\n                <Label>\n                  {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n                  <Checkbox\n                    sx={{ marginTop: \"0.5rem\" }}\n                    defaultChecked={false}\n                    name={`multipleChoiceAnswer_[${index}]`}\n                    ref={register}\n                  />\n                  <Input\n                    ref={register}\n                    name={`multipleChoiceAnswerText_[${index}]`}\n                    placeholder=\"Provide an Answer\"\n                    defaultValue={possibleAnswer ? possibleAnswer : null}\n                  />\n                </Label>\n                <Button\n                  sx={{ margin: \"0\", marginLeft: \"0.5rem\" }}\n                  variant=\"warning\"\n                  onClick={() => {\n                    setPossibleAnswers((old) => {\n                      old.splice(index, 1);\n                      return old;\n                    });\n                  }}\n                >\n                  x\n                </Button>\n              </Flex>\n            </div>\n          );\n        })}\n        <Flex>\n          <Button\n            sx={{ marginRight: \"0.5rem\" }}\n            variant=\"warning\"\n            onClick={() => {\n              reset();\n            }}\n          >\n            Reset\n          </Button>\n          <Button type=\"submit\">Save</Button>\n        </Flex>\n      </Flex>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}