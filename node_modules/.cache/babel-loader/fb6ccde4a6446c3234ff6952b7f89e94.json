{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/takeQuestion/questionType/MultipleChoice.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { v4 } from \"uuid\";\nimport { nextQuestion, answerMultipleChoiceQuestion, setAnswerEndTime } from \"../../../redux/actions\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction\n}) {\n  /**\n   * Redux hooks\n   */\n  const dispatch = useDispatch();\n  const questionBodyTable = useSelector(state => state.questionBodyMultipleChoiceTable);\n  const currentExam = useSelector(state => state.examTable);\n  const {\n    currentExamId\n  } = useSelector(state => state.examState);\n  /**\n   * miscellaneous functions\n   */\n\n  const makeSelectedAnswers = data => {\n    const {\n      multipleChoice\n    } = data;\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      if (data.multipleChoice[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    return selectedAnswers;\n  };\n  /**\n   * Effect Hooks\n   */\n\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({\n          nest: true\n        }));\n        return answerMultipleChoiceQuestion({\n          questionId,\n          selectedAnswers\n        });\n      };\n    });\n  }, [question]);\n  /**\n   * Destructuring\n   */\n\n  const {\n    possibleAnswers,\n    questionId\n  } = questionBodyTable.byId[currentExamId];\n\n  const onSubmit = data => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(answerMultipleChoiceQuestion({\n      questionId: questionId,\n      selectedAnswers\n    }));\n    dispatch(setAnswerEndTime({\n      questionId: questionId\n    }));\n    dispatch(nextQuestion({\n      currentExam: currentExam.byId[currentExamId]\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      defaultChecked: false,\n      name: `${multipleChoiceFormName}[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }), possibleAnswer));\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Save and Next Question\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/takeQuestion/questionType/MultipleChoice.tsx"],"names":["React","useEffect","useDispatch","useSelector","Label","Checkbox","Button","v4","nextQuestion","answerMultipleChoiceQuestion","setAnswerEndTime","multipleChoiceFormName","MultipleChoiceQuestion","register","handleSubmit","question","getValues","setCurrentAnswerAction","dispatch","questionBodyTable","state","questionBodyMultipleChoiceTable","currentExam","examTable","currentExamId","examState","makeSelectedAnswers","data","multipleChoice","selectedAnswers","possibleAnswers","forEach","el","i","push","nest","questionId","byId","onSubmit","map","possibleAnswer","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { v4 } from \"uuid\";\nimport {\n  nextQuestion,\n  answerMultipleChoiceQuestion,\n  setAnswerEndTime,\n} from \"../../../redux/actions\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\n\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n}) {\n  /**\n   * Redux hooks\n   */\n  const dispatch = useDispatch();\n\n  const questionBodyTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n\n  /**\n   * miscellaneous functions\n   */\n\n  const makeSelectedAnswers = (data) => {\n    const { multipleChoice } = data;\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      if (data.multipleChoice[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    return selectedAnswers;\n  };\n\n  /**\n   * Effect Hooks\n   */\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({ nest: true }));\n        return answerMultipleChoiceQuestion({\n          questionId,\n          selectedAnswers,\n        });\n      };\n    });\n  }, [question]);\n\n  /**\n   * Destructuring\n   */\n\n  const { possibleAnswers, questionId } = questionBodyTable.byId[currentExamId];\n\n  const onSubmit = (data) => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(\n      answerMultipleChoiceQuestion({\n        questionId: questionId,\n        selectedAnswers,\n      })\n    );\n    dispatch(setAnswerEndTime({ questionId: questionId }));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`${multipleChoiceFormName}[${index}]`}\n                ref={register}\n              />\n              {possibleAnswer}\n            </Label>\n          </div>\n        );\n      })}\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}