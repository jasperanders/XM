{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nexport default function Question({}) {\n  /**\n   * React Hooks\n   */\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  const [currentQuestionState, setCurrentQuestionState] = useState({\n    questionType: \"freeText\",\n    question: null\n  });\n  /**\n   * Redux\n   */\n\n  const currentQuestionId = useSelector(state => state.examState.currentQuestionId);\n  const questionTable = useSelector(state => state.questionTable);\n  /**\n   * Hook Form\n   */\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (currentQuestionId) {\n      setCurrentQuestionState({\n        questionType: questionTable.byId[currentQuestionId].questionType,\n        question: questionTable.byId[currentQuestionId]\n      });\n    }\n  }, [currentQuestionId]);\n\n  const questionBody = () => {\n    switch (currentQuestionState.questionType) {\n      case \"freeText\":\n        return /*#__PURE__*/React.createElement(MakeFreeText, {\n          register: register,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          setCurrentAnswerAction: setCurrentAnswerAction,\n          reset: reset,\n          questionId: currentQuestionId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }\n        });\n\n      case \"multipleChoice\":\n        return /*#__PURE__*/React.createElement(MakeMultipleChoice, {\n          register: register,\n          handleSubmit: handleSubmit,\n          getValues: getValues,\n          setCurrentAnswerAction: setCurrentAnswerAction,\n          reset: reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }, questionBody());\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/index.tsx"],"names":["React","useEffect","useState","useSelector","useForm","MakeFreeText","MakeMultipleChoice","Question","currentAnswerAction","setCurrentAnswerAction","currentQuestionState","setCurrentQuestionState","questionType","question","currentQuestionId","state","examState","questionTable","register","handleSubmit","watch","errors","reset","getValues","byId","questionBody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAGA,eAAe,SAASC,QAAT,CAAkB,EAAlB,EAAsB;AACnC;;;AAGA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDP,QAAQ,CAAC,MAAM,CAAE,CAAT,CAA9D;AACA,QAAM,CAACQ,oBAAD,EAAuBC,uBAAvB,IAAkDT,QAAQ,CAAC;AAC/DU,IAAAA,YAAY,EAAE,UADiD;AAE/DC,IAAAA,QAAQ,EAAE;AAFqD,GAAD,CAAhE;AAIA;;;;AAGA,QAAMC,iBAAiB,GAAGX,WAAW,CAClCY,KAAD,IAAuBA,KAAK,CAACC,SAAN,CAAgBF,iBADJ,CAArC;AAGA,QAAMG,aAAa,GAAGd,WAAW,CAAEY,KAAD,IAAuBA,KAAK,CAACE,aAA9B,CAAjC;AAEA;;;;AAIA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA,KAAzC;AAAgDC,IAAAA;AAAhD,MAA8DnB,OAAO,EAA3E;AAEA;;;;AAGAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,iBAAJ,EAAuB;AACrBH,MAAAA,uBAAuB,CAAC;AACtBC,QAAAA,YAAY,EAAEK,aAAa,CAACO,IAAd,CAAmBV,iBAAnB,EAAsCF,YAD9B;AAEtBC,QAAAA,QAAQ,EAAEI,aAAa,CAACO,IAAd,CAAmBV,iBAAnB;AAFY,OAAD,CAAvB;AAID;AACF,GAPQ,EAON,CAACA,iBAAD,CAPM,CAAT;;AASA,QAAMW,YAAY,GAAG,MAAM;AACzB,YAAQf,oBAAoB,CAACE,YAA7B;AACE,WAAK,UAAL;AACE,4BACE,oBAAC,YAAD;AACE,UAAA,QAAQ,EAAEM,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,SAAS,EAAEI,SAHb;AAIE,UAAA,sBAAsB,EAAEd,sBAJ1B;AAKE,UAAA,KAAK,EAAEa,KALT;AAME,UAAA,UAAU,EAAER,iBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAUF,WAAK,gBAAL;AACE,4BACE,oBAAC,kBAAD;AACE,UAAA,QAAQ,EAAEI,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,SAAS,EAAEI,SAHb;AAIE,UAAA,sBAAsB,EAAEd,sBAJ1B;AAKE,UAAA,KAAK,EAAEa,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAvBJ;AAyBD,GA1BD;;AA2BA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMG,YAAY,EAAlB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { TRootState } from \"../../../types/examTypes\";\n\nexport default function Question({}) {\n  /**\n   * React Hooks\n   */\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  const [currentQuestionState, setCurrentQuestionState] = useState({\n    questionType: \"freeText\",\n    question: null,\n  });\n  /**\n   * Redux\n   */\n  const currentQuestionId = useSelector(\n    (state: TRootState) => state.examState.currentQuestionId\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n\n  /**\n   * Hook Form\n   */\n\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  /**\n   * Effects\n   */\n  useEffect(() => {\n    if (currentQuestionId) {\n      setCurrentQuestionState({\n        questionType: questionTable.byId[currentQuestionId].questionType,\n        question: questionTable.byId[currentQuestionId],\n      });\n    }\n  }, [currentQuestionId]);\n\n  const questionBody = () => {\n    switch (currentQuestionState.questionType) {\n      case \"freeText\":\n        return (\n          <MakeFreeText\n            register={register}\n            handleSubmit={handleSubmit}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n            reset={reset}\n            questionId={currentQuestionId}\n          />\n        );\n      case \"multipleChoice\":\n        return (\n          <MakeMultipleChoice\n            register={register}\n            handleSubmit={handleSubmit}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n            reset={reset}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n  return <div>{questionBody()}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}