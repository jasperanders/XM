{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { Heading } from \"theme-ui\";\nimport Timer from \"../timer/Timer\";\nimport { setAnswerStartTime } from \"../../redux/actions\";\nexport default function Question({\n  question\n}) {\n  const {\n    questionId,\n    questionType,\n    title,\n    text\n  } = question;\n  const dispatch = useDispatch();\n  const {\n    currentExamId\n  } = useSelector(state => state.examState);\n  const currentExam = useSelector(state => state.examTable[currentExamId]);\n  console.log(currentExam);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset\n  } = useForm();\n  useEffect(() => {\n    dispatch(setAnswerStartTime({\n      questionId\n    }));\n    reset();\n  }, [questionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return /*#__PURE__*/React.createElement(FreeTextQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          question: question,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }\n        });\n\n      case \"multipleChoice\":\n        return /*#__PURE__*/React.createElement(MultipleChoiceQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          question: question,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, text), questionBody(), /*#__PURE__*/React.createElement(Timer, {\n    questionId: questionId,\n    currentExam: currentExam,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx"],"names":["React","useEffect","useDispatch","useSelector","useForm","FreeTextQuestion","MultipleChoiceQuestion","Heading","Timer","setAnswerStartTime","Question","question","questionId","questionType","title","text","dispatch","currentExamId","state","examState","currentExam","examTable","console","log","register","handleSubmit","watch","errors","reset","questionBody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,sBAAP,MAAmC,+BAAnC;AAEA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AACrD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,YAAd;AAA4BC,IAAAA,KAA5B;AAAmCC,IAAAA;AAAnC,MAA4CJ,QAAlD;AACA,QAAMK,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAoBd,WAAW,CAAEe,KAAD,IAAuBA,KAAK,CAACC,SAA9B,CAArC;AACA,QAAMC,WAAW,GAAGjB,WAAW,CAC5Be,KAAD,IAAuBA,KAAK,CAACG,SAAN,CAAgBJ,aAAhB,CADM,CAA/B;AAGAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,QAAM;AAAEI,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA;AAAzC,MAAmDxB,OAAO,EAAhE;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACP,kBAAkB,CAAC;AAAEG,MAAAA;AAAF,KAAD,CAAnB,CAAR;AACAgB,IAAAA,KAAK;AACN,GAHQ,EAGN,CAAChB,UAAD,CAHM,CAAT;;AAKA,QAAMiB,YAAY,GAAG,MAAM;AACzB,YAAQhB,YAAR;AACE,WAAK,UAAL;AACE,4BACE,oBAAC,gBAAD;AACE,UAAA,QAAQ,EAAEW,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAEhB,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF,WAAK,gBAAL;AACE,4BACE,oBAAC,sBAAD;AACE,UAAA,QAAQ,EAAEa,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAEhB,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAtBJ;AAwBD,GAzBD;;AA2BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBG,KAApB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAJ,CAFF,EAGGc,YAAY,EAHf,eAIE,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEjB,UAAnB;AAA+B,IAAA,WAAW,EAAEQ,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { TQuestion, TRootState } from \"../../types/examTypes\";\nimport { Heading } from \"theme-ui\";\n\nimport Timer from \"../timer/Timer\";\nimport { setAnswerStartTime } from \"../../redux/actions\";\n\nexport default function Question({ question }: TProps) {\n  const { questionId, questionType, title, text } = question;\n  const dispatch = useDispatch();\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n  const currentExam = useSelector(\n    (state: TRootState) => state.examTable[currentExamId]\n  );\n  console.log(currentExam);\n  const { register, handleSubmit, watch, errors, reset } = useForm();\n\n  useEffect(() => {\n    dispatch(setAnswerStartTime({ questionId }));\n    reset();\n  }, [questionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return (\n          <FreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            question={question}\n          />\n        );\n      case \"multipleChoice\":\n        return (\n          <MultipleChoiceQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            question={question}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n\n  return (\n    <div>\n      <Heading as={\"h2\"}>{title}</Heading>\n      <p>{text}</p>\n      {questionBody()}\n      <Timer questionId={questionId} currentExam={currentExam}></Timer>\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}