{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { ANSWER_FREE_TEXT_QUESTION, PREVIOUS_QUESTION, NEXT_QUESTION } from \"./actions\";\nimport { initialAppState, initialExam, initialQuestions } from \"./initialState\";\n\nfunction questions(state = initialQuestions, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      const {\n        answerText\n      } = payload;\n      const nextState = produce(state, draftState => {\n        draftState.byId[\"question_01\"].answerText = answerText;\n        const [propertyName] = arrayToDestruct;\n      });\n      return nextState;\n\n    default:\n      return state;\n  }\n}\n\nfunction exams(state = initialExam, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction appState(state = initialAppState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case PREVIOUS_QUESTION:\n      return state;\n\n    case NEXT_QUESTION:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  exams,\n  questions,\n  appState\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/reducers.ts"],"names":["combineReducers","produce","ANSWER_FREE_TEXT_QUESTION","PREVIOUS_QUESTION","NEXT_QUESTION","initialAppState","initialExam","initialQuestions","questions","state","type","payload","answerText","nextState","draftState","byId","propertyName","arrayToDestruct","exams","appState","rootReducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SACEC,yBADF,EAIEC,iBAJF,EAKEC,aALF,QAMO,WANP;AAOA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,gBAAvC,QAA+D,gBAA/D;;AAEA,SAASC,SAAT,CAAmBC,KAAK,GAAGF,gBAA3B,EAA6C;AAAEG,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA7C,EAAgE;AAC9D,UAAQD,IAAR;AACE,SAAKR,yBAAL;AACE,YAAM;AAAEU,QAAAA;AAAF,UAAiBD,OAAvB;AACA,YAAME,SAAS,GAAGZ,OAAO,CAACQ,KAAD,EAASK,UAAD,IAAgB;AAC/CA,QAAAA,UAAU,CAACC,IAAX,CAAgB,aAAhB,EAA+BH,UAA/B,GAA4CA,UAA5C;AACA,cAAM,CAACI,YAAD,IAAiBC,eAAvB;AACD,OAHwB,CAAzB;AAIA,aAAOJ,SAAP;;AAEF;AACE,aAAOJ,KAAP;AAVJ;AAYD;;AAED,SAASS,KAAT,CAAeT,KAAK,GAAGH,WAAvB,EAAoC;AAAEI,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApC,EAAuD;AACrD,UAAQD,IAAR;AACE;AACE,aAAOD,KAAP;AAFJ;AAID;;AAED,SAASU,QAAT,CAAkBV,KAAK,GAAGJ,eAA1B,EAA2C;AAAEK,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA3C,EAA8D;AAC5D,UAAQD,IAAR;AACE,SAAKP,iBAAL;AACE,aAAOM,KAAP;;AACF,SAAKL,aAAL;AACE,aAAOK,KAAP;;AAEF;AACE,aAAOA,KAAP;AAPJ;AASD;;AAED,OAAO,MAAMW,WAAW,GAAGpB,eAAe,CAAC;AACzCkB,EAAAA,KADyC;AAEzCV,EAAAA,SAFyC;AAGzCW,EAAAA;AAHyC,CAAD,CAAnC;AAMP,eAAeC,WAAf","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  START_TIMER,\n  END_TIMER,\n  PREVIOUS_QUESTION,\n  NEXT_QUESTION,\n} from \"./actions\";\nimport { initialAppState, initialExam, initialQuestions } from \"./initialState\";\n\nfunction questions(state = initialQuestions, { type, payload }) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      const { answerText } = payload;\n      const nextState = produce(state, (draftState) => {\n        draftState.byId[\"question_01\"].answerText = answerText;\n        const [propertyName] = arrayToDestruct\n      });\n      return nextState;\n\n    default:\n      return state;\n  }\n}\n\nfunction exams(state = initialExam, { type, payload }) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction appState(state = initialAppState, { type, payload }) {\n  switch (type) {\n    case PREVIOUS_QUESTION:\n      return state;\n    case NEXT_QUESTION:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  exams,\n  questions,\n  appState,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}