{"ast":null,"code":"import _objectSpread from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{Textarea,Button,Input}from\"theme-ui\";import HttpService from\"../../../services/http\";import apiRoutes from\"../../../services/apiRoutes\";import{useForm}from\"react-hook-form\";export default function MakeFreeText(_ref){var makeQuestion=_ref.makeQuestion,questionId=_ref.questionId;/**\n   * React Hooks\n   */var _useState=useState({title:null,questionText:null,masterAnswer:null,points:null}),_useState2=_slicedToArray(_useState,2),makeFreeTextState=_useState2[0],setMakeFreeTextState=_useState2[1];/**\n   * Redux Hooks\n   */var dispatch=useDispatch();var questionTable=useSelector(function(state){return state.questionTable;});/**\n   * Form Hook\n   */var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,watch=_useForm.watch,errors=_useForm.errors,reset=_useForm.reset,getValues=_useForm.getValues;useEffect(function(){if(questionId!==null){setMakeFreeTextState({title:questionTable.byId[questionId].title,questionText:questionTable.byId[questionId].text,masterAnswer:\"\",points:0});}else{setMakeFreeTextState(function(){return{title:\"\",questionText:\"\",masterAnswer:\"\",points:null};});}reset();},[questionId]);var makeBody=function makeBody(_ref2){var id=_ref2.id,bodyContent=_ref2.bodyContent;HttpService.post(apiRoutes.FREE_TEXT_QUESTION,{content:{questionId:id}}).catch(function(){console.error(\"error make body\");});};var makeAnswer=function makeAnswer(_ref3){var id=_ref3.id,answerContent=_ref3.answerContent;var answerData={questionId:id,master:true};var answerBody={questionId:id,answerText:answerContent.text};HttpService.post(apiRoutes.ANSWER,{content:answerData}).then(function(_ref4){var data=_ref4.data;HttpService.post(apiRoutes.FREE_TEXT_ANSWER,{content:_objectSpread({answerId:data.id},answerBody)}).catch(function(){console.error(\"error make answer body\");});}).catch(function(){console.error(\"error make answer\");});};var onSubmit=function onSubmit(data){var questionData={timeLimitMs:50000,questionType:\"freeText\",title:data.questionTitle,text:data.questionText,points:data.questionPoints};makeQuestion({questionContent:questionData,bodyContent:{},makeBody:makeBody,answerContent:{text:data.masterAnswer},makeAnswer:makeAnswer});};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit(onSubmit)},/*#__PURE__*/React.createElement(Input,{ref:register,name:\"questionTitle\",placeholder:\"Provide a Question Title here\",defaultValue:makeFreeTextState.title}),/*#__PURE__*/React.createElement(Textarea,{rows:5,name:\"questionText\",placeholder:\"Provide a question here.\",ref:register,defaultValue:makeFreeTextState.questionText}),/*#__PURE__*/React.createElement(Textarea,{rows:10,name:\"masterAnswer\",placeholder:\"Provide master Answer here\",defaultValue:makeFreeTextState.masterAnswer,ref:register}),/*#__PURE__*/React.createElement(Input,{ref:register,name:\"questionPoints\",type:\"number\",placeholder:\"Points\",defaultValue:makeFreeTextState.points}),/*#__PURE__*/React.createElement(Button,{sx:{marginRight:\"0.5rem\"},variant:\"warning\",onClick:reset},\"Reset\"),/*#__PURE__*/React.createElement(Button,{type:\"submit\"},\"Save\"));}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/components/make/Question/MakeFreeText.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","Textarea","Button","Input","HttpService","apiRoutes","useForm","MakeFreeText","makeQuestion","questionId","title","questionText","masterAnswer","points","makeFreeTextState","setMakeFreeTextState","dispatch","questionTable","state","register","handleSubmit","watch","errors","reset","getValues","byId","text","makeBody","id","bodyContent","post","FREE_TEXT_QUESTION","content","catch","console","error","makeAnswer","answerContent","answerData","master","answerBody","answerText","ANSWER","then","data","FREE_TEXT_ANSWER","answerId","onSubmit","questionData","timeLimitMs","questionType","questionTitle","questionPoints","questionContent","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Textarea, Button, Input, Grid } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function MakeFreeText({ makeQuestion, questionId }) {\n  /**\n   * React Hooks\n   */\n  const [makeFreeTextState, setMakeFreeTextState] = useState({\n    title: null,\n    questionText: null,\n    masterAnswer: null,\n    points: null,\n  });\n\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  /**\n   * Form Hook\n   */\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMakeFreeTextState({\n        title: questionTable.byId[questionId].title,\n        questionText: questionTable.byId[questionId].text,\n        masterAnswer: \"\",\n        points: 0,\n      });\n    } else {\n      setMakeFreeTextState(() => ({\n        title: \"\",\n        questionText: \"\",\n        masterAnswer: \"\",\n        points: null,\n      }));\n    }\n    reset();\n  }, [questionId]);\n\n  const makeBody = ({ id, bodyContent }) => {\n    HttpService.post(apiRoutes.FREE_TEXT_QUESTION, {\n      content: { questionId: id },\n    }).catch(() => {\n      console.error(\"error make body\");\n    });\n  };\n\n  const makeAnswer = ({ id, answerContent }) => {\n    const answerData = { questionId: id, master: true };\n    const answerBody = { questionId: id, answerText: answerContent.text };\n    HttpService.post(apiRoutes.ANSWER, { content: answerData })\n      .then(({ data }) => {\n        HttpService.post(apiRoutes.FREE_TEXT_ANSWER, {\n          content: {\n            answerId: data.id,\n            ...answerBody,\n          },\n        }).catch(() => {\n          console.error(\"error make answer body\");\n        });\n      })\n      .catch(() => {\n        console.error(\"error make answer\");\n      });\n  };\n\n  const onSubmit = (data) => {\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"freeText\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints,\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: {},\n      makeBody,\n      answerContent: { text: data.masterAnswer },\n      makeAnswer,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input\n        ref={register}\n        name={\"questionTitle\"}\n        placeholder=\"Provide a Question Title here\"\n        defaultValue={makeFreeTextState.title}\n      />\n      <Textarea\n        rows={5}\n        name={\"questionText\"}\n        placeholder={\"Provide a question here.\"}\n        ref={register}\n        defaultValue={makeFreeTextState.questionText}\n      />\n      <Textarea\n        rows={10}\n        name={\"masterAnswer\"}\n        placeholder={\"Provide master Answer here\"}\n        defaultValue={makeFreeTextState.masterAnswer}\n        ref={register}\n      />\n      <Input\n        ref={register}\n        name={\"questionPoints\"}\n        type=\"number\"\n        placeholder=\"Points\"\n        defaultValue={makeFreeTextState.points}\n      />\n      <Button sx={{ marginRight: \"0.5rem\" }} variant=\"warning\" onClick={reset}>\n        Reset\n      </Button>\n      <Button type=\"submit\">Save</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}