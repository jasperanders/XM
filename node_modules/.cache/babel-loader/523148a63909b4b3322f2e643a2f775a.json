{"ast":null,"code":"import _slicedToArray from\"/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import HttpService,{storedAuthToken}from\"./http\";import apiRoutes from\"./apiRoutes\";// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport var UserContext=React.createContext({user:{_id:null,role:null},loadUser:function loadUser(){},wipeUser:function wipeUser(){},setUser:function setUser(value){}});export default function UserContextProvider(_ref){var children=_ref.children;var _useState=useState({_id:null,role:null}),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];useEffect(function(){loadUser();},[]);/**\n   * the loadUser function returns a promise, because we want to wait for the state to be set, before anything else\n   * happens. The state is only set only when there isn't already a user loaded and if an authtoken lies in the\n   * session storage. Otherwise the promise is resolved, without doing anything other.\n   * If an user is already loaded, we don't need to make an API-call, we just resolve the promise.\n   *\n   * The loadUser function does not return a user but loads the user into the UserContext.\n   * @returns {Promise<any>}\n   */var loadUser=function loadUser(){var authToken=storedAuthToken();if(!user._id&&authToken){return HttpService.get(apiRoutes.USER_ME,authToken).then(function(_ref2){var data=_ref2.data;console.log(\"data is\",data);setUser(data);}).catch(function(){return false;});}return new Promise(function(resolve){return resolve();});};var wipeUser=function wipeUser(){HttpService.removeAuthToken();setUser({_id:null,role:null});};return/*#__PURE__*/ // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n// In this case we provide an user object and both the load- and wipe-user function to the react context.\n// In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n// do that the function cannot access the component state and thus cannot change the user-context.\nReact.createElement(UserContext.Provider,{value:{user:user,setUser:setUser,loadUser:loadUser,wipeUser:wipeUser}},children,/*#__PURE__*/React.createElement(\"button\",{onClick:wipeUser},\"Logout\"));}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/frontend/src/services/userContext.tsx"],"names":["React","useState","useEffect","HttpService","storedAuthToken","apiRoutes","UserContext","createContext","user","_id","role","loadUser","wipeUser","setUser","value","UserContextProvider","children","authToken","get","USER_ME","then","data","console","log","catch","Promise","resolve","removeAuthToken"],"mappings":"wIAAA,MAAOA,CAAAA,KAAP,EAA2BC,QAA3B,CAAoDC,SAApD,KAAqE,OAArE,CAGA,MAAOC,CAAAA,WAAP,EAAsBC,eAAtB,KAA6C,QAA7C,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAEA;AACA;AACA,MAAO,IAAMC,CAAAA,WAAW,CAAGN,KAAK,CAACO,aAAN,CAAoB,CAC7CC,IAAI,CAAE,CAAEC,GAAG,CAAE,IAAP,CAAaC,IAAI,CAAE,IAAnB,CADuC,CAE7CC,QAAQ,CAAE,mBAAM,CAAE,CAF2B,CAG7CC,QAAQ,CAAE,mBAAM,CAAE,CAH2B,CAI7CC,OAAO,CAAE,iBAACC,KAAD,CAAW,CAAE,CAJuB,CAApB,CAApB,CAOP,cAAe,SAASC,CAAAA,mBAAT,MAA2C,IAAZC,CAAAA,QAAY,MAAZA,QAAY,eAChCf,QAAQ,CAAC,CAC/BQ,GAAG,CAAE,IAD0B,CAE/BC,IAAI,CAAE,IAFyB,CAAD,CADwB,wCACjDF,IADiD,eAC3CK,OAD2C,eAMxDX,SAAS,CAAC,UAAM,CACdS,QAAQ,GACT,CAFQ,CAEN,EAFM,CAAT,CAIA;;;;;;;;KASA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAMM,CAAAA,SAAS,CAAGb,eAAe,EAAjC,CACA,GAAI,CAACI,IAAI,CAACC,GAAN,EAAaQ,SAAjB,CAA4B,CAC1B,MAAOd,CAAAA,WAAW,CAACe,GAAZ,CAAgBb,SAAS,CAACc,OAA1B,CAAmCF,SAAnC,EACJG,IADI,CACC,eAAc,IAAXC,CAAAA,IAAW,OAAXA,IAAW,CAClBC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBF,IAAvB,EACER,OAAO,CAACQ,IAAD,CAAP,CACH,CAJI,EAKJG,KALI,CAKE,iBAAM,MAAN,EALF,CAAP,CAMD,CACD,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,QAAaA,CAAAA,OAAO,EAApB,EAAZ,CAAP,CACD,CAXD,CAaA,GAAMd,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrBT,WAAW,CAACwB,eAAZ,GACAd,OAAO,CAAC,CACNJ,GAAG,CAAE,IADC,CAENC,IAAI,CAAE,IAFA,CAAD,CAAP,CAID,CAND,CAQA,oBACE;AACA;AACA;AACA;AACA,oBAAC,WAAD,CAAa,QAAb,EACE,KAAK,CAAE,CACLF,IAAI,CAAJA,IADK,CAELK,OAAO,CAAPA,OAFK,CAGLF,QAAQ,CAARA,QAHK,CAILC,QAAQ,CAARA,QAJK,CADT,EAQGI,QARH,cASE,8BAAQ,OAAO,CAAEJ,QAAjB,WATF,CALF,CAiBD","sourcesContent":["import React, { Component, useState, createContext, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const UserContext = React.createContext({\n  user: { _id: null, role: null },\n  loadUser: () => {},\n  wipeUser: () => {},\n  setUser: (value) => {},\n});\n\nexport default function UserContextProvider({ children }) {\n  const [user, setUser] = useState({\n    _id: null,\n    role: null,\n  });\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  /**\n   * the loadUser function returns a promise, because we want to wait for the state to be set, before anything else\n   * happens. The state is only set only when there isn't already a user loaded and if an authtoken lies in the\n   * session storage. Otherwise the promise is resolved, without doing anything other.\n   * If an user is already loaded, we don't need to make an API-call, we just resolve the promise.\n   *\n   * The loadUser function does not return a user but loads the user into the UserContext.\n   * @returns {Promise<any>}\n   */\n  const loadUser = () => {\n    const authToken = storedAuthToken();\n    if (!user._id && authToken) {\n      return HttpService.get(apiRoutes.USER_ME, authToken)\n        .then(({ data }) => {\n          console.log(\"data is\", data);\n            setUser(data);\n        })\n        .catch(() => false);\n    }\n    return new Promise((resolve) => resolve());\n  };\n\n  const wipeUser = () => {\n    HttpService.removeAuthToken();\n    setUser({\n      _id: null,\n      role: null,\n    });\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <UserContext.Provider\n      value={{\n        user,\n        setUser,\n        loadUser,\n        wipeUser,\n      }}\n    >\n      {children}\n      <button onClick={wipeUser}>Logout</button>\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}