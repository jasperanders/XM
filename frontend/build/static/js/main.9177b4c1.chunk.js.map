{"version":3,"sources":["constants/constants.ts","redux/actions.ts","components/takeQuestion/questionType/FreeTextQuestion.tsx","components/takeQuestion/questionType/MultipleChoice.tsx","components/timer/Timer.tsx","components/takeQuestion/Question.tsx","components/layout/Layout.tsx","components/head/ExamProgress.tsx","settings.tsx","services/http.tsx","services/apiRoutes.tsx","services/userContext.tsx","services/examContext.tsx","routes/takeExam.tsx","components/side/makeSidePanel/QuestionList.tsx","components/side/makeSidePanel/ExamList.tsx","components/basics/Tab.tsx","components/side/makeSidePanel/index.tsx","components/make/Question/MakeFreeText.tsx","components/make/Question/MakeMultipleChoice.tsx","components/make/Question/index.tsx","components/make/Exam/index.tsx","components/make/index.tsx","routes/makeExam.tsx","routes/login.tsx","routes/index.tsx","App.tsx","redux/initialState.ts","redux/reducers.ts","theme.ts","index.tsx","redux/store.ts","redux/localStorage.ts"],"names":["questionTypes","name","display","answerFreeTextQuestion","payload","type","answerMultipleChoiceQuestion","nextQuestion","setCurrentQuestionId","FreeTexTFreeTextQuestion","register","handleSubmit","question","getValues","setCurrentAnswerAction","dispatch","useDispatch","currentExam","useSelector","state","examTable","currentExamId","examState","useEffect","answer","nest","questionId","onSubmit","data","byId","rows","columns","onPaste","e","preventDefault","onCopy","defaultValue","storedAnswer","ref","MultipleChoiceQuestion","useState","possibleAnswers","questionState","setQuestionState","questionBodyTable","questionBodyMultipleChoiceTable","makeSelectedAnswers","currentQuestionId","multipleChoice","selectedAnswers","forEach","el","i","push","console","log","old","map","possibleAnswer","index","key","v4","defaultChecked","Timer","answerQuestionAction","useHistory","answerTable","questionTable","timeStart","timeLimitMs","Math","round","Date","now","timeLeft","setTimeLeft","interval","setInterval","store","getState","newTimeLeft","clearInterval","as","Question","currentAnswerAction","questionType","title","text","useForm","reset","questionBody","Layout","sidePanel","undefined","mainContent","header","variant","gap","fallback","ExamProgress","exams","currentQuestionIndex","questionsById","sx","alignItems","justifyContent","background","margin","flexDirection","marginBottom","max","length","value","settings","REACT_APP_API_URL","REQUEST_METHOD","storedAuthToken","localStorage","getItem","sessionStorage","HttpService","service","setAuthToken","token","stayLoggedIn","defaults","headers","common","Authorization","setItem","removeAuthToken","removeItem","unauthorizedHandler","window","location","pathname","history","handleRequest","method","path","params","noCache","authToken","request","url","master","ts","catch","handleError","error","response","status","Promise","reject","get","patch","put","post","delete","this","axios","create","apiRoutes","USER","USER_ME","AUTH","QUESTION","ANSWER","EXAM","FREE_TEXT_QUESTION","FREE_TEXT_ANSWER","MULTIPLE_CHOICE_QUESTION","MULTIPLE_CHOICE_ANSWER","UserContext","React","createContext","user","_id","role","loadUser","wipeUser","setUser","UserContextProvider","children","then","resolve","ExamContext","loading","loadAllUsers","allUsers","allQuestions","useContext","setLoading","setAllUsers","setAllQuestions","allExams","setAllExams","allFreeTextQuestion","setAllFreeTextQuestion","allMultipleChoice","setAllMultipleChoice","loadAllQuestions","loadAllExams","loadAllFreeText","loadAllMultipleChoice","newTable","allIds","firstQuestionId","content","firstExam","examId","setExamState","currentTime","timerIsActive","examFinished","newAnswerTable","newFreeTextAnswerTable","newMultipleChoiceAnswerTable","newAnswerId","answerId","timeEnd","timeExpired","answerText","setAnswerTable","setAnswerBodyFreeTextTable","setAnswerBodyMultipleChoiceTable","questionIds","Exam","questions","QuestionList","table","id","idx","odd","tr","td","onClick","newQuestionId","newQuestionIndex","ExamList","onclick","MakeSidePanel","tabNames","tabComponents","activeTab","setActiveTab","btnName","MakeFreeText","makeQuestion","questionText","masterAnswer","points","makeFreeTextState","setMakeFreeTextState","watch","errors","makeBody","bodyContent","makeAnswer","answerData","answerBody","answerContent","questionData","questionTitle","questionPoints","questionContent","placeholder","marginRight","MakeMultipleChoice","multipleChoiceState","setMultipleChoiceState","control","answers","possible","correct","res","checkedSolutions","multipleChoiceAnswerText","multipleChoiceAnswer","flexGrow","style","marginTop","alignContent","alignSelf","Checkbox","marginLeft","splice","maxWidth","questionTypeProp","makeQuestionState","setMakeQuestionState","setQuestionBody","oldState","addedUsers","addedQuestions","newExamState","setNewExamState","examUsers","JSON","parse","examTitle","err","person","stringify","newUser","find","newQuestion","Make","mode","qstn","makeQuestionCmpArr","Creation","Login","formError","setFormError","email","password","ExamEnd","lazy","Routes","exact","to","App","className","question_01","question_02","question_03","initialQuestionTable","initialAnswerTable","initialExamTable","initialQuestionBodyFreeTextTable","initialQuestionBodyMultipleChoiceTable","initialAnswerBodyFreeTextTable","initialAnswerBodyMultipleChoiceTable","initialExamState","rootReducer","combineReducers","produce","d","questionBodyFreeTextTable","answerBodyFreeTextTable","answerBodyMultipleChoiceTable","breakpoints","space","fonts","body","heading","monospace","fontSizes","fontWeights","bold","lineHeights","colors","primary","secondary","muted","light","inactive","active","warning","fontFamily","lineHeight","fontWeight","color","styles","root","fontSize","h1","h2","h3","h4","h5","h6","pre","overflowX","code","width","borderCollapse","borderSpacing","th","textAlign","borderBottomStyle","padding","backgroundColor","progress","height","layout","container","masterContainer","paddingLeft","paddingRight","cards","borderRadius","boxShadow","compact","border","borderColor","blueBorder","borderTopLeftRadius","borderTopRightRadius","forms","textarea","minWidth","minHeight","buttons","borderBottomLeftRadius","borderBottomRightRadius","mutedTab","tiny","createBrowserHistory","hydrateState","serializedState","loadState","configureStore","reducer","middleware","getDefaultMiddleware","configureAppStore","subscribe","saveState","ReactDOM","render","StrictMode","theme","document","getElementById"],"mappings":"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","file":"static/js/main.9177b4c1.chunk.js","sourcesContent":["export const freeTextFormName = \"answerText\";\nexport const multipleChoiceFormName = \"multipleChoice\";\n\nexport const questionTypes = [\n  { name: \"freeText\", display: \"Free Text\" },\n  { name: \"multipleChoice\", display: \"Multiple Choice\" },\n];\n","import {\n  TAnswerFreeTextPayload,\n  TUseTimerPayload,\n  TAnswerMultipleChoicePayload,\n  TSetCurrentQuestionId,\n} from \"../types/reduxTypes\";\n\nexport const ANSWER_FREE_TEXT_QUESTION = \"ANSWER_FREE_TEXT_QUESTION\";\nexport const ANSWER_MULTIPLE_CHOICE_QUESTION =\n  \"ANSWER_MULTIPLE_CHOICE_QUESTION\";\nexport const SET_ANSWER_START_TIME = \"SET_ANSWER_START_TIME\";\nexport const SET_ANSWER_END_TIME = \"SET_ANSWER_END_TIME\";\nexport const NEXT_QUESTION = \"NEXT_QUESTION\";\nexport const PREVIOUS_QUESTION = \"PREVIOUS_QUESTION\";\nexport const SET_APP_TIMER = \"SET_APP_TIMER\";\nexport const COUNT_DOWN_APP_TIMER = \"COUNT_DOWN_APP_TIMER\";\nexport const SET_CURRENT_QUESTION_ID = \"SET_CURRENT_QUESTION_ID\";\n\nexport const SET_ANSWER_TABLE = \"SET_ANSWER_TABLE\";\nexport const SET_QUESTION_TABLE = \"SET_QUESTION_TABLE\";\nexport const SET_EXAM_TABLE = \"SET_EXAM_TABLE\";\nexport const SET_EXAM_STATE = \"SET_EXAM_STATE\";\n\nexport const SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE =\n  \"SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE\";\nexport const SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE =\n  \"SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE\";\nexport const SET_QUESTION_BODY_FREE_TEXT_TABLE =\n  \"SET_QUESTION_BODY_FREE_TEXT_TABLE\";\nexport const SET_ANSWER_BODY_FREE_TEXT_TABLE =\n  \"SET_ANSWER_BODY_FREE_TEXT_TABLE\";\n\nexport function answerFreeTextQuestion(payload: TAnswerFreeTextPayload) {\n  return { type: ANSWER_FREE_TEXT_QUESTION, payload };\n}\n\nexport function answerMultipleChoiceQuestion(\n  payload: TAnswerMultipleChoicePayload\n) {\n  return { type: ANSWER_MULTIPLE_CHOICE_QUESTION, payload };\n}\n\nexport function setAnswerStartTime(payload: TUseTimerPayload) {\n  return { type: SET_ANSWER_START_TIME, payload };\n}\n\nexport function setAnswerEndTime(payload: TUseTimerPayload) {\n  return { type: SET_ANSWER_END_TIME, payload };\n}\n\nexport function nextQuestion(payload) {\n  return { type: NEXT_QUESTION, payload };\n}\n\nexport function previousQuestion(payload) {\n  return { type: PREVIOUS_QUESTION, payload };\n}\n\nexport function countDownAppTimer(payload) {\n  return { type: COUNT_DOWN_APP_TIMER, payload };\n}\n\nexport function setCurrentQuestionId(payload: TSetCurrentQuestionId) {\n  return { type: SET_CURRENT_QUESTION_ID, payload };\n}\n\n/**\n * Whole table actions\n */\nexport function setAnswerTable(payload) {\n  return { type: SET_ANSWER_TABLE, payload };\n}\nexport function setQuestionTable(payload) {\n  return { type: SET_QUESTION_TABLE, payload };\n}\nexport function setExamTable(payload) {\n  return { type: SET_EXAM_TABLE, payload };\n}\nexport function setExamState(payload) {\n  return { type: SET_EXAM_STATE, payload };\n}\n\nexport function setQuestionBodyFreeTextTable(payload) {\n  return { type: SET_QUESTION_BODY_FREE_TEXT_TABLE, payload };\n}\nexport function setQuestionBodyMultipleChoiceTable(payload) {\n  return { type: SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE, payload };\n}\nexport function setAnswerBodyFreeTextTable(payload) {\n  return { type: SET_ANSWER_BODY_FREE_TEXT_TABLE, payload };\n}\nexport function setAnswerBodyMultipleChoiceTable(payload) {\n  return { type: SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE, payload };\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { freeTextFormName } from \"../../../constants/constants\";\nimport { Textarea, Button } from \"theme-ui\";\nimport { answerFreeTextQuestion, nextQuestion } from \"../../../redux/actions\";\nimport { TRootState } from \"../../../types/examTypes\";\n\nexport default function FreeTexTFreeTextQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n}) {\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n\n  /**\n   * Effect Hooks\n   */\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const answer = getValues({ nest: true })[freeTextFormName];\n\n        return answerFreeTextQuestion({\n          questionId: questionId,\n          answer,\n        });\n      };\n    });\n  }, [question, getValues, ]);\n\n  const { questionId } = question;\n\n  const onSubmit = (data) => {\n    const answer = data[freeTextFormName];\n    const payload = { questionId, answer };\n    dispatch(answerFreeTextQuestion(payload));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Textarea\n        rows={10}\n        columns={20}\n        onPaste={(e) => {\n          e.preventDefault();\n          return false;\n        }}\n        onCopy={(e) => {\n          e.preventDefault();\n          return false;\n        }}\n        name={freeTextFormName}\n        defaultValue={question.storedAnswer}\n        ref={register}\n      />\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { v4 } from \"uuid\";\nimport {\n  nextQuestion,\n  answerMultipleChoiceQuestion,\n  setAnswerEndTime,\n} from \"../../../redux/actions\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\n\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n}) {\n  /**\n   * Redux hooks\n   */\n  const dispatch = useDispatch();\n  const [questionState, setQuestionState] = useState({\n    possibleAnswers: [],\n  });\n\n  const questionBodyTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n\n  const { currentExamId, currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n\n  /**\n   * miscellaneous functions\n   */\n\n  const makeSelectedAnswers = (data) => {\n    const { multipleChoice } = data;\n    let selectedAnswers = [];\n    questionState.possibleAnswers.forEach((el, i) => {\n      if (data.multipleChoice[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    return selectedAnswers;\n  };\n\n  /**\n   * Effect Hooks\n   */\n\n  useEffect(() => {\n    console.log(questionBodyTable);\n    console.log(question);\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({ nest: true }));\n        return answerMultipleChoiceQuestion({\n          questionId: question.questionId,\n          selectedAnswers,\n        });\n      };\n    });\n    setQuestionState((old) => {\n      return {\n        ...old,\n        possibleAnswers:\n          questionBodyTable.byId[question.questionId].possibleAnswers,\n      };\n    });\n  }, [question]);\n\n  /**\n   * Destructuring\n   */\n  const onSubmit = (data) => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(\n      answerMultipleChoiceQuestion({\n        questionId: question.questionId,\n        selectedAnswers,\n      })\n    );\n    dispatch(setAnswerEndTime({ questionId: question.questionId }));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {questionState.possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`${multipleChoiceFormName}[${index}]`}\n                ref={register}\n              />\n              {possibleAnswer}\n            </Label>\n          </div>\n        );\n      })}\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nimport { TRootState } from \"../../types/examTypes\";\nimport { nextQuestion } from \"../../redux/actions\";\n\nexport default function Timer({\n  questionId,\n  currentExam,\n  answerQuestionAction,\n}) {\n  const history = useHistory();\n  const useTimer = true;\n  const dispatch = useDispatch();\n  const answer = useSelector(\n    (state: TRootState) => state.answerTable.byId[questionId]\n  );\n  const question = useSelector(\n    (state: TRootState) => state.questionTable.byId[questionId]\n  );\n\n  const { timeStart } = answer;\n  const { timeLimitMs } = question;\n\n  const [timeLeft, setTimeLeft] = useState(\n    (timeStart\n      ? Math.round(timeLimitMs - (Date.now() - timeStart))\n      : timeLimitMs) / 1000\n  );\n\n  useEffect(() => {\n    if (useTimer) {\n      setTimeLeft(timeLimitMs / 1000);\n      const interval = setInterval(() => {\n        const now = Date.now();\n        const timeStart = store.getState().answerTable.byId[questionId]\n          .timeStart;\n        const newTimeLeft = Math.round(\n          (timeLimitMs - (now - timeStart)) / 1000\n        );\n        if (newTimeLeft > -1) {\n          setTimeLeft(newTimeLeft);\n        } else {\n          console.log(questionId);\n          dispatch(answerQuestionAction());\n          // dispatch(nextQuestion({ currentExam }));\n          clearInterval(interval);\n        }\n      }, 1000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [\n    question.questionId,\n    currentExam,\n    dispatch,\n    timeLimitMs,\n    questionId,\n    answerQuestionAction,\n  ]);\n\n  return (\n    <>\n      <Heading as={\"h3\"}>{timeLeft}</Heading>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { TQuestion, TRootState } from \"../../types/examTypes\";\nimport { Heading } from \"theme-ui\";\n\nimport Timer from \"../timer/Timer\"; //!Important\nimport { setAnswerStartTime } from \"../../redux/actions\";\n\nexport default function Question({ question }: TProps) {\n  const [currentAnswerAction, setCurrentAnswerAction] = useState(() => {});\n  const { questionId, questionType, title, text } = question;\n  const dispatch = useDispatch();\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n  const currentExam = useSelector(\n    (state: TRootState) => state.examTable.byId[currentExamId]\n  );\n  const { register, handleSubmit, reset, getValues } = useForm();\n\n  useEffect(() => {\n    dispatch(setAnswerStartTime({ questionId }));\n    reset();\n  }, [questionId, dispatch, reset]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return (\n          <FreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            question={question}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n          />\n        );\n      case \"multipleChoice\":\n        return (\n          <MultipleChoiceQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            question={question}\n            getValues={getValues}\n            setCurrentAnswerAction={setCurrentAnswerAction}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n  return (\n    <div>\n      <Heading as={\"h2\"}>{title}</Heading>\n      <p>{text}</p>\n      {questionBody()}\n      <Timer\n        questionId={questionId}\n        currentExam={currentExam}\n        answerQuestionAction={currentAnswerAction}\n      ></Timer>\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n","import React, { Suspense } from \"react\";\nimport { Box, Grid, Card, Container, Flex } from \"theme-ui\";\n\nexport default function Layout({\n  sidePanel = undefined,\n  mainContent = undefined,\n  header = undefined,\n}) {\n  const columns = sidePanel ? [1, \"2fr 3fr\", \"2fr 3fr\"] : [1];\n  return (\n    <Container variant=\"masterContainer\">\n      {header && <Container>{header}</Container>}\n      <Grid columns={columns} gap={3}>\n        {sidePanel && <Card>{sidePanel}</Card>}\n        {mainContent && (\n          <Card>\n            <Suspense fallback={<div>Loading...</div>}>{mainContent}</Suspense>\n          </Card>\n        )}\n      </Grid>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Heading, Progress, Flex } from \"theme-ui\";\nimport { TRootState } from \"../../types/examTypes\";\n\nexport default function ExamProgress() {\n  const exams = useSelector((state: TRootState) => state.examTable);\n  const { currentExamId, currentQuestionIndex } = useSelector(\n    (state: TRootState) => state.examState\n  );\n\n  const questionsById = exams?.byId[currentExamId]?.questionsById;\n\n  return (\n    <Flex\n      sx={{\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"primary\",\n        margin: \"1rem\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Heading as=\"h1\" sx={{ marginBottom: \"2rem\" }}>\n        {exams.byId[currentExamId].name}\n      </Heading>\n      <Progress max={questionsById.length} value={currentQuestionIndex + 1} />\n    </Flex>\n  );\n}\n","const settings = { REACT_APP_API_URL: \"http://localhost:9000/api\" };\n\nexport default settings;\n","import axios from \"axios\";\nimport settings from \"../settings\";\nimport { history } from \"../index\";\n\nconst REQUEST_METHOD = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PATCH: \"PATCH\",\n  PUT: \"PUT\",\n  DELETE: \"DELETE\",\n};\n\n/**\n * @class\n * @description This service class handles all REST Calls\n */\n\nclass HttpServiceClass {\n  service: any;\n  /**\n   * @function\n   * @description Init the axios library and register the interceptors.\n   */\n  constructor() {\n    this.service = axios.create({\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      // withCredentials: true,\n    });\n\n    // The AuthToken is set after login. If the user was already loaded on init, we need to set it.\n    if (localStorage.getItem(\"authToken\")) {\n      this.setAuthToken(localStorage.getItem(\"authToken\"), true);\n    } else if (sessionStorage.getItem(\"authToken\")) {\n      this.setAuthToken(sessionStorage.getItem(\"authToken\"));\n    }\n  }\n\n  /**\n   * @function\n   * @description Set the auth token in the request header. Call this after successful login.\n   * @param {string} token is a token string.\n   * @param {boolean} stayLoggedIn logged in.\n   */\n  setAuthToken = (token, stayLoggedIn = false) => {\n    this.service.defaults.headers.common.Authorization = token\n      ? `Token ${token}`\n      : \"\";\n\n    if (stayLoggedIn) {\n      localStorage.setItem(\"authToken\", token);\n    } else {\n      sessionStorage.setItem(\"authToken\", token);\n    }\n  };\n\n  /**\n   * @function\n   * @description Removes the auth token in the header. Call this after logout.\n   */\n  removeAuthToken = () => {\n    delete this.service.defaults.headers.common.Authorization;\n    localStorage.removeItem(\"authToken\");\n    sessionStorage.removeItem(\"authToken\");\n  };\n\n  /**\n   * @function\n   * @description Handles unauthorized request, redirects to login\n   */\n  unauthorizedHandler = () => {\n    this.removeAuthToken();\n    if (window.location.pathname !== \"/\") {\n      history.push(\"/login/\");\n    }\n    // Possibly routing to login\n  };\n\n  /**\n   * @description Method to handle the request by method.\n   * @param method {string} th request method type.\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {*} data is an object with API data.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {Promise<AxiosResponse<any>>}\n   */\n  handleRequest = (method, path, data = {}, params = {}, noCache = false) => {\n    const authToken = storedAuthToken();\n    return this.service\n      .request({\n        url: `${settings.REACT_APP_API_URL}${path}`,\n        method,\n        data,\n        params: { ...params, master: \"a\", ts: noCache ? Date.now() : null },\n        headers: {\n          Authorization: authToken ? `Bearer ${authToken}` : undefined,\n        },\n      })\n      .catch(this.handleError);\n  };\n  /**\n   * @function\n   * @description Interceptor for the error response\n   * @param {Object} error is a object with the error response from API.\n   * @return {*}\n   */\n  handleError = (error) => {\n    console.error(error);\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          this.unauthorizedHandler();\n          break;\n        default:\n          break;\n      }\n\n      return Promise.reject(error);\n    }\n\n    // Possibly toaster or log error\n\n    return Promise.reject(error);\n  };\n\n  /**\n   * @function\n   * @description Fires the get request\n   * @param {string} path is a string of API path.\n   * @param {*} params is an object with API params.\n   * @param {boolean} noCache is a boolean to whether add a time stamp or not\n   * @return {*}\n   */\n  get = (path, params = {}, noCache = false) =>\n    this.handleRequest(REQUEST_METHOD.GET, path, {}, params, noCache);\n\n  /**\n   * @function\n   * @description Fires the patch request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  patch = (path, data) => this.handleRequest(REQUEST_METHOD.PATCH, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  put = (path, data) => this.handleRequest(REQUEST_METHOD.PUT, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  post = (path, data) => this.handleRequest(REQUEST_METHOD.POST, path, data);\n\n  /**\n   * @function\n   * @description Fires the put request\n   * @param {string} path A relative path that comes after the API URL defined in settings.js, e.g. \"reports\"\n   * @param {Object} data is an object to submit to API.\n   * @return {*}\n   */\n  delete = (path, data) =>\n    this.handleRequest(REQUEST_METHOD.DELETE, path, data);\n}\n\nexport const storedAuthToken = () =>\n  localStorage.getItem(\"authToken\") || sessionStorage.getItem(\"authToken\");\n\nconst HttpService = new HttpServiceClass();\n\nexport default HttpService;\n","const apiRoutes = {\n  USER: \"/users/\",\n  USER_ME: \"/users/me/\",\n  AUTH: \"/auth/\",\n  QUESTION: \"/questions/\",\n  ANSWER: \"/answers/\",\n  EXAM: \"/exams/\",\n  FREE_TEXT_QUESTION: \"/free_text_questions/\",\n  FREE_TEXT_ANSWER: \"/free_text_answers/\",\n  MULTIPLE_CHOICE_QUESTION: \"/multiple_choice_questions/\",\n  MULTIPLE_CHOICE_ANSWER: \"/multiple_choice_answers/\",\n};\n\nexport default apiRoutes;\n","import React, { useState, useEffect } from \"react\";\n\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const UserContext = React.createContext({\n  user: { _id: null, role: null },\n  loadUser: () => {},\n  wipeUser: () => {},\n  setUser: (value) => {},\n});\n\nexport default function UserContextProvider({ children }) {\n  const [user, setUser] = useState({\n    _id: null,\n    role: null,\n  });\n\n  useEffect(() => {\n    loadUser();\n  });\n\n  /**\n   * the loadUser function returns a promise, because we want to wait for the state to be set, before anything else\n   * happens. The state is only set only when there isn't already a user loaded and if an authtoken lies in the\n   * session storage. Otherwise the promise is resolved, without doing anything other.\n   * If an user is already loaded, we don't need to make an API-call, we just resolve the promise.\n   *\n   * The loadUser function does not return a user but loads the user into the UserContext.\n   * @returns {Promise<any>}\n   */\n  const loadUser = () => {\n    const authToken = storedAuthToken();\n    if (!user._id && authToken) {\n      return HttpService.get(apiRoutes.USER_ME, authToken)\n        .then(({ data }) => {\n          console.log(\"data is\", data);\n          setUser(data);\n        })\n        .catch(() => false);\n    }\n    return new Promise((resolve) => resolve());\n  };\n\n  const wipeUser = () => {\n    HttpService.removeAuthToken();\n    setUser({\n      _id: null,\n      role: null,\n    });\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <UserContext.Provider\n      value={{\n        user,\n        setUser,\n        loadUser,\n        wipeUser,\n      }}\n    >\n      {children}\n      <button onClick={wipeUser}>Logout</button>\n    </UserContext.Provider>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { v4 } from \"uuid\";\nimport HttpService, { storedAuthToken } from \"./http\";\nimport apiRoutes from \"./apiRoutes\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setExamTable,\n  setQuestionTable,\n  setAnswerBodyFreeTextTable,\n  setQuestionBodyFreeTextTable,\n  setQuestionBodyMultipleChoiceTable,\n  setCurrentQuestionId,\n  setExamState,\n  setAnswerTable,\n  setAnswerBodyMultipleChoiceTable,\n} from \"../redux/actions\";\nimport { UserContext } from \"./userContext\";\n\n// Initializes the Context. This constant must be imported, wherever\n// you need to access the user context\nexport const ExamContext = React.createContext({\n  loading: true,\n  loadAllUsers: () => {},\n  allUsers: { rows: [] },\n  allQuestions: { rows: [] },\n});\n\nexport default function UserContextProvider({ children }) {\n  const { user } = useContext(UserContext);\n\n  const [loading, setLoading] = useState(true);\n  const [allUsers, setAllUsers] = useState({ rows: [] });\n  const [allQuestions, setAllQuestions] = useState({ rows: [] });\n  const [allExams, setAllExams] = useState({ rows: [] });\n  const [allFreeTextQuestion, setAllFreeTextQuestion] = useState({ rows: [] });\n  const [allMultipleChoice, setAllMultipleChoice] = useState({ rows: [] });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    loadAllUsers();\n    loadAllQuestions();\n    loadAllExams();\n    loadAllFreeText();\n    loadAllMultipleChoice();\n    setLoading(false);\n  }, [user]);\n\n  /**\n   * Exam Table\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    console.log(allExams);\n    const firstQuestionId = allExams?.rows[0]?.content?.questionsById[0];\n    const firstExam = allExams?.rows[0]?._id;\n\n    allExams.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        examId: _id,\n        name: content.name,\n        questionsById: content.questionsById,\n      };\n      newTable.allIds.push(_id);\n    });\n    dispatch(setExamTable({ newTable }));\n    dispatch(\n      setExamState({\n        newTable: {\n          currentExamId: firstExam,\n          currentQuestionIndex: 0,\n          currentQuestionId: firstQuestionId,\n          currentTime: null,\n          timerIsActive: true,\n          examFinished: false,\n        },\n      })\n    );\n  }, [allExams]);\n\n  /**\n   * Question Table\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    const newAnswerTable = { byId: {}, allIds: [] };\n    const newFreeTextAnswerTable = { byId: {}, allIds: [] };\n    const newMultipleChoiceAnswerTable = { byId: {}, allIds: [] };\n    allQuestions.rows.map(({ _id, content }) => {\n      newTable.byId[_id] = {\n        questionId: _id,\n        questionType: content.questionType,\n        text: content.text,\n        timeLimitMs: content.timeLimitMs,\n        title: content.title,\n      };\n      newTable.allIds.push(_id);\n      const newAnswerId = v4();\n      newAnswerTable.byId[_id] = {\n        questionId: _id,\n        answerId: newAnswerId,\n        timeStart: null,\n        timeEnd: null,\n        timeExpired: false,\n      };\n      newAnswerTable.allIds.push(_id);\n      if (content.questionType === \"freeText\") {\n        newFreeTextAnswerTable.byId[_id] = {\n          questionId: _id,\n          answerId: newAnswerId,\n          answerText: \"\",\n        };\n        newFreeTextAnswerTable.allIds.push(newAnswerId);\n      } else if (content.questionType === \"multipleChoice\") {\n        newMultipleChoiceAnswerTable.byId[_id] = {\n          questionId: _id,\n          answerId: newAnswerId,\n          selectedAnswers: \"\",\n        };\n        newMultipleChoiceAnswerTable.allIds.push(newAnswerId);\n      }\n    });\n    dispatch(setQuestionTable({ newTable }));\n    dispatch(setAnswerTable({ newTable: newAnswerTable }));\n    dispatch(setAnswerBodyFreeTextTable({ newTable: newFreeTextAnswerTable }));\n    dispatch(\n      setAnswerBodyMultipleChoiceTable({\n        newTable: newMultipleChoiceAnswerTable,\n      })\n    );\n  }, [allQuestions]);\n\n  /**\n   * FreeTextQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allFreeTextQuestion.rows.map(({ _id, content }) => {\n      newTable.byId[content.questionId] = {\n        questionId: content.questionId,\n      };\n      newTable.allIds.push(content.questionId);\n    });\n    dispatch(setQuestionBodyFreeTextTable({ newTable }));\n  }, [allFreeTextQuestion]);\n\n  /**\n   * MultipleChoiceQuestions\n   */\n  useEffect(() => {\n    const newTable = { byId: {}, allIds: [] };\n    allMultipleChoice.rows.map(({ _id, content }) => {\n      console.log(content);\n      newTable.byId[content.questionId] = {\n        questionId: content.questionIds,\n        possibleAnswers: content.possibleAnswers,\n      };\n      newTable.allIds.push(content.questionId);\n    });\n    console.log(\"newTable\", newTable);\n    dispatch(setQuestionBodyMultipleChoiceTable({ newTable }));\n  }, [allMultipleChoice]);\n\n  /**\n   * Load Tables\n   *\n   */\n  const loadAllUsers = () => {\n    return HttpService.get(apiRoutes.USER).then(({ data }) => {\n      setAllUsers(data);\n    });\n  };\n\n  const loadAllQuestions = () => {\n    return HttpService.get(apiRoutes.QUESTION).then(({ data }) => {\n      setAllQuestions(data);\n    });\n  };\n\n  const loadAllExams = () => {\n    return HttpService.get(apiRoutes.EXAM)\n      .then(({ data }) => {\n        setAllExams(data);\n      })\n      .catch(\"fetch Exams failed\");\n  };\n\n  const loadAllFreeText = () => {\n    return HttpService.get(apiRoutes.FREE_TEXT_QUESTION).then(({ data }) => {\n      setAllFreeTextQuestion(data);\n    });\n  };\n\n  const loadAllMultipleChoice = () => {\n    return HttpService.get(apiRoutes.MULTIPLE_CHOICE_QUESTION).then(\n      ({ data }) => {\n        setAllMultipleChoice(data);\n      }\n    );\n  };\n\n  return (\n    // For more details on how the React Context API works, take a look at https://reactjs.org/docs/context.html\n    // In this case we provide an user object and both the load- and wipe-user function to the react context.\n    // In order to access the right component scope we also need to bind the this-context. In a case, where we don't\n    // do that the function cannot access the component state and thus cannot change the user-context.\n    <ExamContext.Provider\n      value={{\n        loading,\n        allQuestions,\n        loadAllUsers,\n        allUsers,\n      }}\n    >\n      {children}\n    </ExamContext.Provider>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport Question from \"../components/takeQuestion/Question\";\nimport { TRootState } from \"../types/examTypes\";\nimport Layout from \"../components/layout/Layout\";\nimport ExamProgress from \"../components/head/ExamProgress\";\nimport { ExamContext } from \"../services/examContext\";\nimport { Spinner } from \"theme-ui\";\n\nfunction Exam() {\n  const { loading } = useContext(ExamContext);\n  const questions = useSelector((state: TRootState) => state.questionTable);\n  const { currentQuestionId, examFinished } = useSelector(\n    (state: TRootState) => state.examState\n  );\n\n  return (\n    <>\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Layout\n          mainContent={\n            <Question question={questions.byId[currentQuestionId]} />\n          }\n          header={<ExamProgress />}\n        />\n      )}\n    </>\n  );\n}\n\nexport default Exam;\n","import React from \"react\";\nimport { Styled, Button } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCurrentQuestionId } from \"../../../redux/actions\";\n\nconst QuestionList = () => {\n  const questions = useSelector((state: TRootState) => state.questionTable);\n\n  const dispatch = useDispatch();\n\n  return (\n    <Styled.table>\n      {questions.allIds.map((id, idx) => {\n        const odd = idx % 2 === 0 ? \"odd\" : \"even\";\n        return (\n          <Styled.tr variant={odd}>\n            <Styled.td>{questions.byId[id].title}</Styled.td>\n            <Styled.td>{questions.byId[id].text}</Styled.td>\n            <Styled.td>\n              <Button\n                variant=\"tiny\"\n                onClick={() => {\n                  dispatch(\n                    setCurrentQuestionId({\n                      newQuestionId: id,\n                      newQuestionIndex: null,\n                    })\n                  );\n                }}\n              >\n                Show\n              </Button>\n            </Styled.td>\n          </Styled.tr>\n        );\n      })}\n      <Button\n        onClick={() =>\n          dispatch(\n            setCurrentQuestionId({\n              newQuestionId: null,\n              newQuestionIndex: null,\n            })\n          )\n        }\n      >\n        New question\n      </Button>\n    </Styled.table>\n  );\n};\n\nexport default QuestionList;\n","import React from \"react\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Styled } from \"theme-ui\";\n\nconst ExamList = () => {\n  const exams = useSelector((state: TRootState) => state.examTable);\n\n  return (\n    <Styled.table>\n      {exams.allIds.map((id, idx) => {\n        const odd = idx % 2 === 0 ? \"odd\" : \"even\";\n        return (\n          <Styled.tr variant={odd}>\n            <Styled.td>{exams.byId[id].name}</Styled.td>\n            <Styled.td>Date</Styled.td>\n            <Styled.td>\n              <Button\n                variant=\"tiny\"\n                onClick={() => {\n                  console.log(\"dispatch set current question\");\n                }}\n              >\n                Edit\n              </Button>\n            </Styled.td>\n          </Styled.tr>\n        );\n      })}\n      <Button onclick={() => console.log(\"Dispatch set currentQuestion Null\")}>\n        New Exam\n      </Button>\n    </Styled.table>\n  );\n};\n\nexport default ExamList;\n","import React, { useState } from \"react\";\nimport { Grid, Button, Card } from \"theme-ui\";\nimport { castDraft } from \"immer\";\n\nexport default function MakeSidePanel({ tabNames, tabComponents }) {\n  const [activeTab, setActiveTab] = useState(0);\n  return (\n    <div>\n      <Grid columns={[1, 2, 2]} gap={3}>\n        {tabNames.map((btnName, idx) => {\n          return (\n            <Button\n              onClick={() => {\n                setActiveTab(idx);\n              }}\n              variant={idx === activeTab ? \"activeTab\" : \"mutedTab\"}\n            >\n              {btnName.display}\n            </Button>\n          );\n        })}\n      </Grid>\n      <Card variant=\"blueBorder\">{tabComponents[activeTab]}</Card>\n    </div>\n  );\n}\n","import React from \"react\";\nimport QuestionList from \"./QuestionList\";\nimport ExamList from \"./ExamList\";\nimport Tabs from \"../../basics/Tab\";\n\nexport default function MakeSidePanel() {\n  return (\n    <div>\n      <Tabs\n        tabNames={[\n          { name: \"question\", display: \"Questions\" },\n          { display: \"Exams\", name: \"question\" },\n        ]}\n        tabComponents={[<QuestionList />, <ExamList />]}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Textarea, Button, Input, Grid } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nimport { useForm } from \"react-hook-form\";\n\nexport default function MakeFreeText({ makeQuestion, questionId }) {\n  /**\n   * React Hooks\n   */\n  const [makeFreeTextState, setMakeFreeTextState] = useState({\n    title: null,\n    questionText: null,\n    masterAnswer: null,\n    points: null,\n  });\n\n  /**\n   * Redux Hooks\n   */\n\n  const dispatch = useDispatch();\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  /**\n   * Form Hook\n   */\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMakeFreeTextState({\n        title: questionTable.byId[questionId].title,\n        questionText: questionTable.byId[questionId].text,\n        masterAnswer: \"\",\n        points: 0,\n      });\n    } else {\n      setMakeFreeTextState(() => ({\n        title: \"\",\n        questionText: \"\",\n        masterAnswer: \"\",\n        points: null,\n      }));\n    }\n    reset();\n  }, [questionId]);\n\n  const makeBody = ({ id, bodyContent }) => {\n    HttpService.post(apiRoutes.FREE_TEXT_QUESTION, {\n      content: { questionId: id },\n    }).catch(() => {\n      console.error(\"error make body\");\n    });\n  };\n\n  const makeAnswer = ({ id, answerContent }) => {\n    const answerData = { questionId: id, master: true };\n    const answerBody = { questionId: id, answerText: answerContent.text };\n    HttpService.post(apiRoutes.ANSWER, { content: answerData })\n      .then(({ data }) => {\n        HttpService.post(apiRoutes.FREE_TEXT_ANSWER, {\n          content: {\n            answerId: data.id,\n            ...answerBody,\n          },\n        }).catch(() => {\n          console.error(\"error make answer body\");\n        });\n      })\n      .catch(() => {\n        console.error(\"error make answer\");\n      });\n  };\n\n  const onSubmit = (data) => {\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"freeText\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints,\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: {},\n      makeBody,\n      answerContent: { text: data.masterAnswer },\n      makeAnswer,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Input\n        ref={register}\n        name={\"questionTitle\"}\n        placeholder=\"Provide a Question Title here\"\n        defaultValue={makeFreeTextState.title}\n      />\n      <Textarea\n        rows={5}\n        name={\"questionText\"}\n        placeholder={\"Provide a question here.\"}\n        ref={register}\n        defaultValue={makeFreeTextState.questionText}\n      />\n      <Textarea\n        rows={10}\n        name={\"masterAnswer\"}\n        placeholder={\"Provide master Answer here\"}\n        defaultValue={makeFreeTextState.masterAnswer}\n        ref={register}\n      />\n      <Input\n        ref={register}\n        name={\"questionPoints\"}\n        type=\"number\"\n        placeholder=\"Points\"\n        defaultValue={makeFreeTextState.points}\n      />\n      <Button sx={{ marginRight: \"0.5rem\" }} variant=\"warning\" onClick={reset}>\n        Reset\n      </Button>\n      <Button type=\"submit\">Save</Button>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 } from \"uuid\";\n\nimport { Textarea, Button, Input, Flex, Label, Checkbox } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { multipleChoiceFormName } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nexport default function MakeMultipleChoice({ makeQuestion, questionId }) {\n  /**\n   * React Hooks\n   */\n\n  const [multipleChoiceState, setMultipleChoiceState] = useState({\n    title: \"\",\n    text: \"\",\n    possibleAnswers: [\"\", \"\"],\n    points: null,\n  });\n\n  /**\n   * Redux Hooks\n   */\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n  const questionBodyMultipleChoiceTable = useSelector(\n    (state: TRootState) => state.questionBodyMultipleChoiceTable\n  );\n\n  /**\n   * Form Hook\n   */\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    control,\n    reset,\n    getValues,\n  } = useForm();\n\n  /**\n   * Effect\n   *\n   */\n\n  useEffect(() => {\n    if (questionId !== null) {\n      setMultipleChoiceState({\n        title: questionTable.byId[questionId].title,\n        text: questionTable.byId[questionId].text,\n        possibleAnswers:\n          questionBodyMultipleChoiceTable.byId[questionId].possibleAnswers,\n        points: null,\n      });\n    } else {\n      setMultipleChoiceState({\n        title: \"\",\n        text: \"\",\n        possibleAnswers: [\"\", \"\"],\n        points: null,\n      });\n    }\n  }, [questionId]);\n\n  useEffect(() => {\n    reset();\n  }, [multipleChoiceState.possibleAnswers]);\n\n  /**\n   * Functions\n   */\n\n  const checkedIndex = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      el === correct[idx] ? res.push(true) : res.push(false);\n    });\n    return res;\n  };\n\n  const checkedSolutions = (possible, correct) => {\n    const res = [];\n    possible.map((el, idx) => {\n      if (correct[idx]) res.push(el);\n    });\n    return res;\n  };\n\n  const makeBody = ({ id, bodyContent }) => {\n    HttpService.post(apiRoutes.MULTIPLE_CHOICE_QUESTION, {\n      content: { questionId: id, possibleAnswers: bodyContent.possibleAnswers },\n    }).catch(() => {\n      console.error(\"error make body\");\n    });\n  };\n\n  const makeAnswer = ({ id, answerContent }) => {\n    const answerData = { questionId: id, master: true };\n    const answerBody = {\n      questionId: id,\n      answers: answerContent.selectedAnswers,\n    };\n    HttpService.post(apiRoutes.ANSWER, { content: answerData })\n      .then(({ data }) => {\n        HttpService.post(apiRoutes.MULTIPLE_CHOICE_ANSWER, {\n          content: {\n            answerId: data.id,\n            ...answerBody,\n          },\n        }).catch(() => {\n          console.error(\"error make answer body\");\n        });\n      })\n      .catch(() => {\n        console.error(\"error make answer\");\n      });\n  };\n\n  const onSubmit = (data) => {\n    const selectedAnswers = checkedSolutions(\n      data.multipleChoiceAnswerText,\n      data.multipleChoiceAnswer\n    );\n    const questionData = {\n      timeLimitMs: 50000,\n      questionType: \"multipleChoice\",\n      title: data.questionTitle,\n      text: data.questionText,\n      points: data.questionPoints,\n    };\n    makeQuestion({\n      questionContent: questionData,\n      bodyContent: { possibleAnswers: data.multipleChoiceAnswerText },\n      makeBody,\n      answerContent: { selectedAnswers },\n      makeAnswer,\n    });\n  };\n\n  const { possibleAnswers, title, text } = multipleChoiceState;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex\n        sx={{\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        <Input\n          ref={register}\n          name={\"questionTitle\"}\n          placeholder=\"Provide a Question Title here\"\n          defaultValue={title}\n        />\n        <Textarea\n          rows={5}\n          name={\"questionText\"}\n          placeholder={\"Provide a question here.\"}\n          ref={register}\n          defaultValue={text}\n        />\n        <Button\n          sx={{ flexGrow: 0 }}\n          onClick={() => {\n            setMultipleChoiceState((old) => ({\n              ...old,\n              possibleAnswers: [...old.possibleAnswers, \"\"],\n            }));\n          }}\n        >\n          Add Answer\n        </Button>\n\n        {possibleAnswers.map((possibleAnswer, index) => {\n          return (\n            <div\n              key={v4()}\n              style={{ marginTop: \"0.5rem\", alignContent: \"center\" }}\n            >\n              <Flex\n                sx={{\n                  flexDirection: \"row\",\n                  alignSelf: \"stretch\",\n                }}\n              >\n                <Label>\n                  {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n                  <Controller\n                    sx={{ marginTop: \"0.5rem\" }}\n                    as={Checkbox}\n                    name={`multipleChoiceAnswer[${index}]`}\n                    control={control}\n                    defaultValue={false}\n                  />\n                  <Input\n                    ref={register}\n                    name={`multipleChoiceAnswerText[${index}]`}\n                    placeholder=\"Provide an Answer\"\n                    defaultValue={possibleAnswer ? possibleAnswer : null}\n                  />\n                </Label>\n                <Button\n                  sx={{ margin: \"0\", marginLeft: \"0.5rem\" }}\n                  variant=\"warning\"\n                  onClick={() => {\n                    setMultipleChoiceState((old) => {\n                      old.possibleAnswers.splice(index, 1);\n                      return old;\n                    });\n                  }}\n                >\n                  x\n                </Button>\n              </Flex>\n            </div>\n          );\n        })}\n        <Input\n          sx={{ marginTop: \"0.5rem\", maxWidth: \"20%\" }}\n          ref={register}\n          name={\"questionPoints\"}\n          type=\"number\"\n          placeholder=\"Points\"\n          defaultValue={multipleChoiceState.points}\n        />\n        <Flex>\n          <Button\n            sx={{ marginRight: \"0.5rem\" }}\n            variant=\"warning\"\n            onClick={() => {\n              reset();\n            }}\n          >\n            Reset\n          </Button>\n          <Button type=\"submit\">Save</Button>\n        </Flex>\n      </Flex>\n    </form>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport MakeFreeText from \"./MakeFreeText\";\nimport MakeMultipleChoice from \"./MakeMultipleChoice\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { questionTypes } from \"../../../constants/constants\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function Question({ questionType: questionTypeProp }) {\n  /**\n   * React Hooks\n   */\n  const [makeQuestionState, setMakeQuestionState] = useState({\n    questionId: null,\n    questionType: null,\n  });\n  const [questionBody, setQuestionBody] = useState(<></>);\n  /**\n   * Redux\n   */\n  const currentQuestionId = useSelector(\n    (state: TRootState) => state.examState.currentQuestionId\n  );\n  const questionTable = useSelector((state: TRootState) => state.questionTable);\n\n  /**\n   * Hook Form\n   */\n\n\n  /**\n   * Effects\n   */\n  useEffect(() => {\n    if (!currentQuestionId) {\n      setMakeQuestionState((oldState) => ({\n        ...oldState,\n        questionType: questionTypeProp,\n      }));\n    } else {\n      setMakeQuestionState({\n        questionId: currentQuestionId,\n        questionType: questionTable.byId[currentQuestionId].questionType,\n      });\n    }\n  }, [currentQuestionId, questionTypeProp]);\n\n  useEffect(() => {\n    const { questionType } = makeQuestionState;\n    switch (questionType) {\n      case questionTypes[0].name:\n        setQuestionBody(\n          <MakeFreeText\n            makeQuestion={makeQuestion}\n            questionId={currentQuestionId}\n          />\n        );\n        break;\n      case questionTypes[1].name:\n        setQuestionBody(\n          <MakeMultipleChoice\n            makeQuestion={makeQuestion}\n            questionId={currentQuestionId}\n          />\n        );\n        break;\n      default:\n        setQuestionBody(<div>Something went wrong</div>);\n        break;\n    }\n  }, [makeQuestionState]);\n\n  const makeQuestion = ({\n    questionContent,\n    bodyContent,\n    makeBody,\n    answerContent,\n    makeAnswer,\n  }) => {\n    HttpService.post(apiRoutes.QUESTION, { content: questionContent })\n      .then(({ data }) => {\n        makeBody({ id: data.id, bodyContent });\n        makeAnswer({ id: data.id, answerContent });\n      })\n      .catch((error) => {\n        console.error(\"error make Question\");\n      });\n  };\n\n  return <div>{questionBody}</div>;\n}\n","import React, { useContext, useState } from \"react\";\nimport { v4 } from \"uuid\";\nimport { useForm } from \"react-hook-form\";\nimport { Input, Badge, Heading, Flex, Select, Button } from \"theme-ui\";\n\nimport { ExamContext } from \"../../../services/examContext\";\nimport HttpService from \"../../../services/http\";\nimport apiRoutes from \"../../../services/apiRoutes\";\n\nexport default function Exam() {\n  const { allQuestions, allUsers } = useContext(ExamContext);\n\n  const [newExamState, setNewExamState] = useState({\n    addedUsers: [],\n    addedQuestions: [],\n  });\n  const { register, handleSubmit, reset, getValues } = useForm();\n\n  const addUser = () => {\n    const newUser = getValues().newUser;\n    if (!newExamState.addedUsers.find((el) => newUser === el)) {\n      setNewExamState((old) => ({\n        ...old,\n        addedUsers: [...old.addedUsers, newUser],\n      }));\n    }\n  };\n  const addQuestion = () => {\n    const newQuestion = getValues().newQuestion;\n    if (!newExamState.addedQuestions.find((el) => newQuestion === el)) {\n      setNewExamState((old) => ({\n        ...old,\n        addedQuestions: [...old.addedQuestions, newQuestion],\n      }));\n    }\n  };\n\n  const onSubmit = (data) => {\n    const { addedUsers, addedQuestions } = newExamState;\n    const questionsById = [];\n    const examUsers = [];\n    addedQuestions.map((el) => {\n      questionsById.push(JSON.parse(el)._id);\n    });\n    addedUsers.map((el) => {\n      examUsers.push(JSON.parse(el)._id);\n    });\n    HttpService.post(apiRoutes.EXAM, {\n      content: {\n        name: data.examTitle,\n        questionsById: questionsById,\n        examUsers: examUsers,\n      },\n    }).catch((err) => console.error(err));\n  };\n\n  return (\n    <div>\n      <Heading as=\"h2\">Create New Exam</Heading>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Flex\n          sx={{\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            justifyContent: \"stretch\",\n          }}\n        >\n          <Input\n            sx={{ marginTop: \"1rem\" }}\n            ref={register}\n            name={\"examTitle\"}\n            placeholder=\"Provide a Exam Title here\"\n            defaultValue={\"\"}\n          />\n\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            {newExamState.addedUsers.map((el) => {\n              const person = JSON.parse(el);\n              return (\n                <Badge sx={{ margin: \"0.5rem\" }} key={v4()}>\n                  {person.name}\n                </Badge>\n              );\n            })}\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            <Select sx={{ margin: \"0.5rem\" }} ref={register} name=\"newUser\">\n              {allUsers.rows.map((el) => {\n                return (\n                  <option key={v4()} value={JSON.stringify(el)}>\n                    {el.name}\n                  </option>\n                );\n              })}\n            </Select>\n            <Button type=\"button\" sx={{ margin: \"0.5rem\" }} onClick={addUser}>\n              +\n            </Button>\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            {newExamState.addedQuestions.map((el) => {\n              const question = JSON.parse(el);\n              return (\n                <Badge sx={{ margin: \"0.5rem\" }} key={v4()}>\n                  {question.content.title}\n                </Badge>\n              );\n            })}\n          </Flex>\n          <Flex\n            sx={{\n              flexDirection: \"row\",\n            }}\n          >\n            <Select sx={{ margin: \"0.5rem\" }} ref={register} name=\"newQuestion\">\n              {allQuestions.rows.map((el) => {\n                return (\n                  <option key={v4()} value={JSON.stringify(el)}>\n                    {el.content.title}\n                  </option>\n                );\n              })}\n            </Select>\n            <Button\n              type=\"button\"\n              sx={{ margin: \"0.5rem\" }}\n              onClick={addQuestion}\n            >\n              +\n            </Button>\n          </Flex>\n        </Flex>\n        <Button\n          type=\"button\"\n          variant=\"warning\"\n          onClick={() => {\n            setNewExamState({ addedUsers: [], addedQuestions: [] });\n            reset();\n          }}\n        >\n          reset\n        </Button>\n        <Button sx={{ marginLeft: \"0.5rem\" }} type=\"submit\">\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Question from \"./Question\";\nimport Tabs from \"../basics/Tab\";\nimport { questionTypes } from \"../../constants/constants\";\nimport Exam from \"./Exam\";\n\nexport default function Make() {\n  const [mode, setMode] = useState(\"exam\");\n  const makeQuestionCmpArr = () => {\n    const res = [];\n    questionTypes.map((qstn) => {\n      res.push(<Question questionType={qstn.name} />);\n    });\n    return res;\n  };\n\n  return (\n    <div>\n      {mode === \"question\" ? (\n        <Tabs tabNames={questionTypes} tabComponents={makeQuestionCmpArr()} />\n      ) : (\n        <Exam />\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Layout from \"../components/layout/Layout\";\nimport MakeSidePanel from \"../components/side/makeSidePanel\";\nimport Make from \"../components/make\";\nimport { Heading } from \"theme-ui\";\n\nexport default function Creation() {\n  return (\n    <Layout\n      header={<Heading as=\"h1\">XM</Heading>}\n      sidePanel={<MakeSidePanel />}\n      mainContent={<Make />}\n    />\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport { Input, Button, Heading, Text } from \"theme-ui\";\nimport { useForm } from \"react-hook-form\";\nimport Layout from \"../components/layout/Layout\";\nimport HttpService from \"../services/http\";\nimport apiRoutes from \"../services/apiRoutes\";\nimport { UserContext } from \"../services/userContext\";\n\nexport default function Login() {\n  const { setUser } = useContext(UserContext);\n  const { register, handleSubmit } = useForm();\n  const [formError, setFormError] = useState(\"\");\n\n  const onSubmit = (data) => {\n    console.log(data);\n    const { email, password } = data;\n    HttpService.post(apiRoutes.AUTH, { email, password })\n      .then(({ data }) => {\n        HttpService.setAuthToken(data.token, true);\n        setUser(data);\n      })\n      .catch((error) => {\n        setFormError(error);\n      });\n  };\n\n  return (\n    <Layout\n      header={<Heading as=\"h1\">XM</Heading>}\n      mainContent={\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Input ref={register} name={\"email\"} placeholder=\"Email\" />\n          <Input\n            sx={{ marginTop: \"0.5rem\", marginBottom: \"0.5rem\" }}\n            placeholder=\"Password\"\n            type=\"password\"\n            ref={register}\n            name={\"password\"}\n          />\n          {formError && (\n            <Text variant=\"warning\">Something went wrong. Try again.</Text>\n          )}\n          <Button type={\"submit\"}>Login</Button>\n        </form>\n      }\n    />\n  );\n}\n","import React, { lazy, useContext } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport TakeExam from \"./takeExam\";\nimport MakeExam from \"./makeExam\";\nimport Layout from \"../components/layout/Layout\";\nimport { importMDX } from \"mdx.macro\";\nimport ExamProgress from \"../components/head/ExamProgress\";\nimport { useSelector } from \"react-redux\";\nimport { TRootState } from \"../types/examTypes\";\nimport Login from \"./login\";\nimport { UserContext } from \"../services/userContext\";\nconst ExamEnd = lazy(() => importMDX(\"../mdx/examEnd.mdx\"));\n\nexport default function Routes() {\n  const { user } = useContext(UserContext);\n  const examFinished = useSelector(\n    (state: TRootState) => state.examState.examFinished\n  );\n\n  return (\n    <Switch>\n      {user.role === \"user\" && (\n        <>\n          <Route exact path=\"/\">\n            {examFinished ? (\n              <Redirect to=\"/exam/done/\" />\n            ) : (\n              <Redirect to=\"/exam/\" />\n            )}\n          </Route>\n          <Route exact path=\"/exam/\">\n            {examFinished ? <Redirect to=\"/exam/done/\" /> : <TakeExam />}\n          </Route>\n          <Route exact path=\"/exam/done/\">\n            {examFinished ? (\n              <Layout header={<ExamProgress />} mainContent={<ExamEnd />} />\n            ) : (\n              <Redirect to=\"/exam/\" />\n            )}\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/exam/\" />\n          </Route>\n        </>\n      )}\n      {user.role === \"admin\" && (\n        <Route path=\"/\">\n          <MakeExam />\n        </Route>\n      )}\n      <>\n        <Route path=\"/login/\">\n          <Login />\n        </Route>\n        <Route path=\"/\">\n          <Redirect to=\"/login/\" />\n        </Route>\n      </>\n    </Switch>\n  );\n}\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Question from \"./components/takeQuestion/Question\";\r\nimport { TRootState } from \"./types/examTypes\";\r\nimport Layout from \"./components/layout/Layout\";\r\nimport ExamProgress from \"./components/head/ExamProgress\";\r\nimport Routes from \"./routes\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { v4 } from \"uuid\";\nimport {\n  TQuestion,\n  TQuestionBodyFreeText,\n  TQuestionBodyMultipleChoice,\n  TAnswerBodyFreeText,\n  TAnswerBodyMultipleChoice,\n  TAnswer,\n  TExam,\n  TQuestionTable,\n  TExamTable,\n  TAnswerTable,\n  TExamState,\n  TQuestionBodyMultipleChoiceTable,\n  TQuestionBodyFreeTextTable,\n  TAnswerBodyFreeTextTable,\n  TAnswerBodyMultipleChoiceTable,\n} from \"../types/examTypes\";\n\n// ============== Task 01 ===================\nconst question_01: TQuestion = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  timeLimitMs: 40000,\n  title: \"That is the Question\",\n  text: \"What does the Fox say?\",\n};\n\nconst answer_01: TAnswer = {\n  answerId: v4(),\n  questionId: question_01.questionId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false,\n};\n\nconst question_01_body: TQuestionBodyFreeText = {\n  questionBodyId: v4(),\n  questionId: question_01.questionId,\n};\n\nconst answer_01_body: TAnswerBodyFreeText = {\n  answerId: question_01.questionId,\n  questionId: question_01_body.questionId,\n  answerText: \"\",\n};\n\n// ============== Task 02 ===================\nconst question_02: TQuestion = {\n  questionId: v4(),\n  questionType: \"freeText\",\n  timeLimitMs: 50000,\n  title: \"Even better Question\",\n  text: \"How many roads must a man walk down?\",\n};\n\nconst answer_02: TAnswer = {\n  answerId: v4(),\n  questionId: question_02.questionId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false,\n};\n\nconst question_02_body: TQuestionBodyFreeText = {\n  questionBodyId: v4(),\n  questionId: question_02.questionId,\n};\n\nconst answer_02_body: TAnswerBodyFreeText = {\n  questionId: question_02.questionId,\n  answerId: answer_02.answerId,\n  answerText: \"\",\n};\n\n// ============== Task 03 ===================\n\nconst question_03: TQuestion = {\n  questionId: v4(),\n  questionType: \"multipleChoice\",\n  timeLimitMs: 60000,\n  title: \"Your choice\",\n  text: \"Yes or No?\",\n};\n\nconst answer_03: TAnswer = {\n  answerId: v4(),\n  questionId: question_03.questionId,\n  timeStart: null,\n  timeEnd: null,\n  timeExpired: false,\n};\n\nconst question_03_body: TQuestionBodyMultipleChoice = {\n  questionId: question_03.questionId,\n  possibleAnswers: [\"Yes\", \"No\"],\n};\n\nconst answer_03_body: TAnswerBodyMultipleChoice = {\n  questionId: question_03.questionId,\n  answerId: answer_03.answerId,\n  selectedAnswers: [],\n};\n\n// =============== exam_01 ===========\n\nconst exam_01: TExam = {\n  examId: v4(),\n  name: \"Platform Economy\",\n  questionsById: [\n    question_03.questionId,\n    question_01.questionId,\n    question_02.questionId,\n  ],\n};\n\n// =============== tables ================\n\nexport const initialQuestionTable: TQuestionTable = {\n  byId: {},\n  allIds: [],\n};\n\nexport const initialAnswerTable: TAnswerTable = {\n  byId: {},\n  allIds: [],\n};\n\nexport const initialExamTable: TExamTable = {\n  byId: {},\n  allIds: [],\n};\n\n// ================ Body Table ===================\nexport const initialQuestionBodyFreeTextTable: TQuestionBodyFreeTextTable = {\n  byId: {},\n  allIds: [],\n};\n\nexport const initialQuestionBodyMultipleChoiceTable: TQuestionBodyMultipleChoiceTable = {\n  byId: {},\n  allIds: [],\n};\n\nexport const initialAnswerBodyFreeTextTable: TAnswerBodyFreeTextTable = {\n  byId: {},\n  allIds: [],\n};\n\nexport const initialAnswerBodyMultipleChoiceTable: TAnswerBodyMultipleChoiceTable = {\n  byId: {},\n  allIds: [],\n};\n\n// =============== Exam State ====================\n\nexport const initialExamState: TExamState = {\n  currentExamId: null,\n  currentQuestionIndex: null,\n  // currentQuestionId: null,\n  currentQuestionId: null,\n  currentTime: null,\n  timerIsActive: true,\n  examFinished: false,\n};\n\n// =========================================\n// =========================================\n/*\nexport const initialExam: TExamState = {\n  byId: {\n    exam_01: {\n      id: \"exam_01\",\n      name: \"Platform Economy\",\n      questionsById: [\"question_01\", \"question_03\", \"question_02\"],\n    },\n  },\n  allIds: [\"exam_01\"],\n  currentExam: {\n    id: \"exam_01\",\n    currentQuestionIndex: 0,\n  },\n};\n\nexport const initialQuestions: TFreeTextQuestionState = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionTitle: \"General Question\",\n      questionText: \"What does the fox say?\",\n      answerType: \"freeText\",\n      answerText: \"quest01\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionTitle: \"General Question\",\n      questionText: \"How many roads must a man walk down?\",\n      answerType: \"freeText\",\n      answerText: \"quest02\",\n      timeLimit: 20,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n  },\n  allIds: [\"question_01\", \"question_02\"],\n};\n\nexport const initialMultipleChoiceQuestions: TMultipleChoiceQuestionState = {\n  byId: {\n    question_03: {\n      questionId: \"question_03\",\n      questionTitle: \"\",\n      questionText: \"Ja, oder Nein\",\n      answerType: \"multipleChoice\",\n      possibleAnswers: [\"Ja\", \"Nein\"],\n      answerSelection: [],\n      timeLimit: 51,\n      timeUsed: null,\n      timeStart: null,\n      timeEnd: null,\n      timeExpired: false,\n    },\n  },\n  allIds: [\"question_03\"],\n};\n\nexport const initialQuestionTypes: TQuestionTypes = {\n  byId: {\n    question_01: {\n      questionId: \"question_01\",\n      questionType: \"freeTextQuestion\",\n    },\n    question_02: {\n      questionId: \"question_02\",\n      questionType: \"freeTextQuestion\",\n    },\n    question_03: {\n      questionId: \"question_03\",\n      questionType: \"multipleChoiceQuestion\",\n    },\n  },\n  allIds: [\"question_01\", \"question_02\", \"question_03\"],\n};\n\nexport const initialAppState = {\n  currentTime: null,\n  timerIsActive: true,\n};\n*/\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  ANSWER_MULTIPLE_CHOICE_QUESTION,\n  SET_ANSWER_START_TIME,\n  SET_ANSWER_END_TIME,\n  NEXT_QUESTION,\n  SET_APP_TIMER,\n  COUNT_DOWN_APP_TIMER,\n  SET_CURRENT_QUESTION_ID,\n  SET_ANSWER_TABLE,\n  SET_EXAM_TABLE,\n  SET_EXAM_STATE,\n  SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE,\n  SET_QUESTION_BODY_FREE_TEXT_TABLE,\n  SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE,\n  SET_ANSWER_BODY_FREE_TEXT_TABLE,\n  SET_QUESTION_TABLE,\n} from \"./actions\";\nimport {\n  initialAnswerTable,\n  initialExamState,\n  initialExamTable,\n  initialQuestionTable,\n  initialAnswerBodyMultipleChoiceTable,\n  initialQuestionBodyMultipleChoiceTable,\n  initialAnswerBodyFreeTextTable,\n  initialQuestionBodyFreeTextTable,\n} from \"./initialState\";\nimport { history } from \"../index\";\n\n// ================= Basic Tables =====================\n\nfunction questionTable(state = initialQuestionTable, { type, payload }) {\n  switch (type) {\n    case SET_QUESTION_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, { type, payload }) {\n  switch (type) {\n    case SET_ANSWER_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case SET_ANSWER_START_TIME:\n      return produce(state, (d) => {\n        const answer = d.byId[payload.questionId];\n        if (answer.timeStart === null) {\n          answer.timeStart = Date.now();\n        }\n      });\n    case SET_ANSWER_END_TIME:\n      return produce(state, (d) => {\n        let answer = d.byId[payload.questionId];\n        answer.timeEnd = Date.now();\n        answer.timeExpired = true;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, { type, payload }) {\n  switch (type) {\n    case SET_EXAM_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction examState(state = initialExamState, { type, payload }) {\n  switch (type) {\n    case SET_EXAM_STATE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case NEXT_QUESTION:\n      return produce(state, (d) => {\n        if (\n          payload.currentExam.questionsById.length >\n          d.currentQuestionIndex + 1 // else index out of bounds\n        ) {\n          d.currentQuestionIndex += 1;\n          d.currentQuestionId =\n            payload.currentExam.questionsById[d.currentQuestionIndex];\n        } else {\n          d.examFinished = true;\n        }\n      });\n    case SET_CURRENT_QUESTION_ID:\n      return produce(state, (d) => {\n        d.currentQuestionId = payload.newQuestionId;\n        d.currentQuestionIndex = payload.newQuestionIndex\n          ? payload.newQuestionIndex\n          : null;\n      });\n\n    default:\n      return state;\n  }\n}\n\n// ================= Body Tables =====================\n\nfunction questionBodyMultipleChoiceTable(\n  state = initialQuestionBodyMultipleChoiceTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_QUESTION_BODY_MULTIPLE_CHOICE_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction questionBodyFreeTextTable(\n  state = initialQuestionBodyFreeTextTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_QUESTION_BODY_FREE_TEXT_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyFreeTextTable(\n  state = initialAnswerBodyFreeTextTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_ANSWER_BODY_FREE_TEXT_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, (d) => {\n        const answer = d.byId[payload.questionId];\n        answer.answerText = payload.answer;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(\n  state = initialAnswerBodyMultipleChoiceTable,\n  { type, payload }\n) {\n  switch (type) {\n    case SET_ANSWER_BODY_MULTIPLE_CHOICE_TABLE:\n      return produce(state, (d) => {\n        d = payload.newTable;\n        return d;\n      });\n    case ANSWER_MULTIPLE_CHOICE_QUESTION:\n      return produce(state, (d) => {\n        d.byId[payload.questionId].selectedAnswers = payload.selectedAnswers;\n      });\n    default:\n      return state;\n  }\n}\n\n// =================== Root Reducer =================\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState,\n});\n\nexport default rootReducer;\n","// example base theme from @theme-ui/presets\n\nconst primaryBorder = \"2px solid #07c\";\n\nexport default {\n  breakpoints: [\"40em\", \"52em\", \"64em\"],\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  fonts: {\n    body:\n      'system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", sans-serif',\n    heading: \"inherit\",\n    monospace: \"Menlo, monospace\",\n  },\n  fontSizes: [15, 16, 20, 24, 32, 48, 64, 96],\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125,\n  },\n  colors: {\n    text: \"#000\",\n    background: \"#fff\",\n    primary: \"#07c\",\n    secondary: \"#30c\",\n    muted: \"#f6f6f6\",\n    light: \" #E8F4FF\",\n    inactive: \"#AFC5CB\",\n    active: \"#e74c3c\",\n    warning: \"#e74c3c\",\n  },\n  text: {\n    heading: {\n      fontFamily: \"heading\",\n      lineHeight: \"heading\",\n      fontWeight: \"heading\",\n    },\n    warning: {\n      color: \"active\",\n    },\n  },\n  styles: {\n    root: {\n      fontFamily: \"body\",\n      lineHeight: \"body\",\n      fontWeight: \"body\",\n      fontSize: 0,\n    },\n    h1: {\n      variant: \"text.heading\",\n      fontSize: 5,\n    },\n    h2: {\n      variant: \"text.heading\",\n      fontSize: 4,\n    },\n    h3: {\n      variant: \"text.heading\",\n      fontSize: 3,\n    },\n    h4: {\n      variant: \"text.heading\",\n      fontSize: 2,\n    },\n    h5: {\n      variant: \"text.heading\",\n      fontSize: 1,\n    },\n    h6: {\n      variant: \"text.heading\",\n      fontSize: 0,\n    },\n    pre: {\n      fontFamily: \"monospace\",\n      overflowX: \"auto\",\n      code: {\n        color: \"inherit\",\n      },\n    },\n    code: {\n      fontFamily: \"monospace\",\n      fontSize: \"inherit\",\n    },\n    table: {\n      width: \"100%\",\n      borderCollapse: \"separate\",\n      borderSpacing: 0,\n    },\n    th: {\n      textAlign: \"left\",\n      borderBottomStyle: \"solid\",\n    },\n    td: {\n      padding: \"0.5rem\",\n      textAlign: \"left\",\n      borderBottomStyle: \"1px solid black\",\n    },\n    tr: {\n      odd: {},\n      \":hover\": { backgroundColor: \"#ddd\" },\n    },\n    progress: {\n      color: \"primary\",\n      height: \"0.75rem\",\n    },\n  },\n  layout: {\n    container: {\n      padding: \"1rem\",\n    },\n    masterContainer: {\n      margin: \"auto\",\n      marginTop: \"0.5rem\",\n      width: [\"100%\", \"100%\", \"90%\"],\n      paddingLeft: \"3rem\",\n      paddingRight: \"3rem\",\n    },\n    header: {},\n  },\n  cards: {\n    primary: {\n      backgroundColor: \"muted\",\n      padding: \"2rem\",\n      borderRadius: 4,\n      boxShadow:\n        \"0 1px 1px 0 rgba(66, 66, 66, 0.08), 0 1px 3px 1px rgba(66, 66, 66, 0.16)\",\n    },\n    compact: {\n      padding: 1,\n      borderRadius: 2,\n      border: \"1px solid\",\n      borderColor: \"muted\",\n    },\n    blueBorder: {\n      padding: \"1rem\",\n      border: primaryBorder,\n      borderRadius: 2,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0,\n    },\n  },\n  forms: {\n    textarea: {\n      marginTop: \"0.5rem\",\n      marginBottom: \"0.5rem\",\n      minWidth: \"100px\",\n      minHeight: \"100px\",\n      \":focus\": {\n        border: \"1px solid #07c\",\n        backgroundColor: \"light\",\n      },\n    },\n  },\n  buttons: {\n    primary: {\n      marginTop: \"1rem\",\n      marginBottom: \"1rem\",\n    },\n    warning: {\n      backgroundColor: \"warning\",\n      marginTop: \"1rem\",\n      marginBottom: \"1rem\",\n    },\n    activeTab: {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n    mutedTab: {\n      backgroundColor: \"inactive\",\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n    tiny: {\n      backgroundColor: \"secondary\",\n    },\n  },\n};\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureAppStore from \"./redux/store\";\r\nimport { saveState } from \"./redux/localStorage\";\r\nimport { ThemeProvider } from \"theme-ui\";\r\nimport theme from \"./theme\";\r\nimport { Router } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport UserContextProvider from \"./services/userContext\";\r\nimport ExamContextProvider from \"./services/examContext\";\r\n\r\nexport const history = createBrowserHistory();\r\nexport const store = configureAppStore();\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <UserContextProvider>\r\n        <ExamContextProvider>\r\n          <Router history={history}>\r\n            <ThemeProvider theme={theme}>\r\n              <App />\r\n            </ThemeProvider>\r\n          </Router>\r\n        </ExamContextProvider>\r\n      </UserContextProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducers\";\r\nimport { loadState } from \"./localStorage\";\r\n\r\nexport default function configureAppStore() {\r\n  const hydrateState = loadState();\r\n  console.log(hydrateState);\r\n  const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: [...getDefaultMiddleware()],\r\n    // preloadedState: hydrateState,\r\n  });\r\n\r\n  return store;\r\n}\r\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    console.log(\"read from state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log(\"failed\");\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n    console.log(\"saved to local storage\");\n  } catch (err) {\n    console.log(\"Could not access local storage.\");\n  }\n};\n"],"sourceRoot":""}