{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { Heading } from \"theme-ui\";\nimport { answerFreeTexTFreeTextQuestion, seTFreeTextQuestionStartTime, seTFreeTextQuestionEndTime, nexTFreeTextQuestion } from \"../../redux/actions\";\nimport Timer from \"../timer/Timer\";\nimport { freeTextFromName } from \"../../constants/formConstants\";\nexport default function Question({\n  question\n}) {\n  const dispatch = useDispatch();\n  const {\n    currentExam,\n    byId\n  } = useSelector(state => state.exams);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset\n  } = useForm();\n  const {\n    questionId,\n    answerType,\n    questionText,\n    questionTitle,\n    answerText\n  } = question;\n  console.log(answerText);\n  useEffect(() => {\n    dispatch(seTFreeTextQuestionStartTime({\n      questionId\n    }));\n    reset();\n  }, [questionId]);\n\n  const onSubmit = data => {\n    let action = undefined;\n\n    switch (answerType) {\n      case \"freeText\":\n        const answer = data[freeTextFromName];\n        const payload = {\n          questionId,\n          answer\n        };\n        action = answerFreeTexTFreeTextQuestion(payload);\n        break;\n\n      default:\n        break;\n    }\n\n    dispatch(action);\n    dispatch(seTFreeTextQuestionEndTime({\n      questionId\n    }));\n    dispatch(nexTFreeTextQuestion());\n  };\n\n  const questionBody = () => {\n    switch (answerType) {\n      case \"freeText\":\n        return /*#__PURE__*/React.createElement(FreeTexTFreeTextQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          onSubmit: onSubmit,\n          storedAnswer: answerText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, questionTitle), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, questionText), questionBody(), /*#__PURE__*/React.createElement(Timer, {\n    question: question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx"],"names":["React","useEffect","useDispatch","useSelector","useForm","Heading","answerFreeTexTFreeTextQuestion","seTFreeTextQuestionStartTime","seTFreeTextQuestionEndTime","nexTFreeTextQuestion","Timer","freeTextFromName","Question","question","dispatch","currentExam","byId","state","exams","register","handleSubmit","watch","errors","reset","questionId","answerType","questionText","questionTitle","answerText","console","log","onSubmit","data","action","undefined","answer","payload","questionBody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAGA,SAASC,OAAT,QAAwB,UAAxB;AACA,SACEC,8BADF,EAEEC,4BAFF,EAGEC,0BAHF,EAIEC,oBAJF,QAKO,qBALP;AAMA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AACrD,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAwBb,WAAW,CAAEc,KAAD,IAAuBA,KAAK,CAACC,KAA9B,CAAzC;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA;AAAzC,MAAmDnB,OAAO,EAAhE;AAEA,QAAM;AACJoB,IAAAA,UADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA;AALI,MAMFf,QANJ;AAOAgB,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA3B,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,CAACP,4BAA4B,CAAC;AAAEiB,MAAAA;AAAF,KAAD,CAA7B,CAAR;AACAD,IAAAA,KAAK;AACN,GAHQ,EAGN,CAACC,UAAD,CAHM,CAAT;;AAKA,QAAMO,QAAQ,GAAIC,IAAD,IAAU;AACzB,QAAIC,MAAM,GAAGC,SAAb;;AACA,YAAQT,UAAR;AACE,WAAK,UAAL;AACE,cAAMU,MAAM,GAAGH,IAAI,CAACrB,gBAAD,CAAnB;AACA,cAAMyB,OAAO,GAAG;AAAEZ,UAAAA,UAAF;AAAcW,UAAAA;AAAd,SAAhB;AACAF,QAAAA,MAAM,GAAG3B,8BAA8B,CAAC8B,OAAD,CAAvC;AACA;;AAEF;AACE;AARJ;;AAWAtB,IAAAA,QAAQ,CAACmB,MAAD,CAAR;AACAnB,IAAAA,QAAQ,CAACN,0BAA0B,CAAC;AAAEgB,MAAAA;AAAF,KAAD,CAA3B,CAAR;AACAV,IAAAA,QAAQ,CAACL,oBAAoB,EAArB,CAAR;AACD,GAhBD;;AAkBA,QAAM4B,YAAY,GAAG,MAAM;AACzB,YAAQZ,UAAR;AACE,WAAK,UAAL;AACE,4BACE,oBAAC,wBAAD;AACE,UAAA,QAAQ,EAAEN,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAES,QALZ;AAME,UAAA,YAAY,EAAEH,UANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAUF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAbJ;AAeD,GAhBD;;AAkBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBD,aAApB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,YAAJ,CAFF,EAGGW,YAAY,EAHf,eAIE,oBAAC,KAAD;AAAO,IAAA,QAAQ,EAAExB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport Fr from \"./questionType/FreeTextQuestion\";\nimport { TFreeTextQuestion, TRootState } from \"../../types/exam\";\nimport { Heading } from \"theme-ui\";\nimport {\n  answerFreeTexTFreeTextQuestion,\n  seTFreeTextQuestionStartTime,\n  seTFreeTextQuestionEndTime,\n  nexTFreeTextQuestion,\n} from \"../../redux/actions\";\nimport Timer from \"../timer/Timer\";\nimport { freeTextFromName } from \"../../constants/formConstants\";\n\nexport default function Question({ question }: TProps) {\n  const dispatch = useDispatch();\n  const { currentExam, byId } = useSelector((state: TRootState) => state.exams);\n  const { register, handleSubmit, watch, errors, reset } = useForm();\n\n  const {\n    questionId,\n    answerType,\n    questionText,\n    questionTitle,\n    answerText,\n  } = question;\n  console.log(answerText);\n  useEffect(() => {\n    dispatch(seTFreeTextQuestionStartTime({ questionId }));\n    reset();\n  }, [questionId]);\n\n  const onSubmit = (data) => {\n    let action = undefined;\n    switch (answerType) {\n      case \"freeText\":\n        const answer = data[freeTextFromName];\n        const payload = { questionId, answer };\n        action = answerFreeTexTFreeTextQuestion(payload);\n        break;\n\n      default:\n        break;\n    }\n\n    dispatch(action);\n    dispatch(seTFreeTextQuestionEndTime({ questionId }));\n    dispatch(nexTFreeTextQuestion());\n  };\n\n  const questionBody = () => {\n    switch (answerType) {\n      case \"freeText\":\n        return (\n          <FreeTexTFreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            onSubmit={onSubmit}\n            storedAnswer={answerText}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n\n  return (\n    <div>\n      <Heading as={\"h2\"}>{questionTitle}</Heading>\n      <p>{questionText}</p>\n      {questionBody()}\n      <Timer question={question}></Timer>\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TFreeTextQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}