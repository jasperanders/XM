{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nimport { nextQuestion } from \"../../redux/actions\";\nexport default function Timer({\n  questionId\n}) {\n  const dispatch = useDispatch();\n  const answer = useSelector(state => state.answerTable.byId[questionId]);\n  const question = useSelector(state => state.questionTable.byId[questionId]);\n  const currentExam = useSelector(state => state.examT);\n  const {\n    timeStart\n  } = answer;\n  const {\n    timeLimitMs\n  } = question;\n  const now = Date.now();\n  const [timeLeft, setTimeLeft] = useState((timeStart ? Math.trunc(timeLimitMs - (now - timeStart)) : timeLimitMs) / 1000);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const timeStart = store.getState().answerTable.byId[questionId].timeStart;\n      const newTimeLeft = Math.trunc((timeLimitMs - (now - timeStart)) / 1000);\n\n      if (newTimeLeft >= 0) {\n        setTimeLeft(newTimeLeft);\n      } else {\n        dispatch(nextQuestion({\n          currentExam: currentExam.byId[currentExamId]\n        }));\n        clearInterval(interval);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId]);\n  return /*#__PURE__*/React.createElement(Heading, {\n    as: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, timeLeft);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","useSelector","useDispatch","store","Heading","nextQuestion","Timer","questionId","dispatch","answer","state","answerTable","byId","question","questionTable","currentExam","examT","timeStart","timeLimitMs","now","Date","timeLeft","setTimeLeft","Math","trunc","interval","setInterval","getState","newTimeLeft","currentExamId","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA+B;AAC5C,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,MAAM,GAAGR,WAAW,CACvBS,KAAD,IAAuBA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,CAAuBL,UAAvB,CADC,CAA1B;AAGA,QAAMM,QAAQ,GAAGZ,WAAW,CACzBS,KAAD,IAAuBA,KAAK,CAACI,aAAN,CAAoBF,IAApB,CAAyBL,UAAzB,CADG,CAA5B;AAGA,QAAMQ,WAAW,GAAGd,WAAW,CAAES,KAAD,IAAsBA,KAAK,CAACM,KAA7B,CAA/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBR,MAAtB;AACA,QAAM;AAAES,IAAAA;AAAF,MAAkBL,QAAxB;AACA,QAAMM,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CACtC,CAACiB,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAWN,WAAW,IAAIC,GAAG,GAAGF,SAAV,CAAtB,CAAH,GAAiDC,WAA3D,IACE,IAFoC,CAAxC;AAKAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAMP,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,YAAMF,SAAS,GAAGd,KAAK,CAACwB,QAAN,GAAiBhB,WAAjB,CAA6BC,IAA7B,CAAkCL,UAAlC,EAA8CU,SAAhE;AACA,YAAMW,WAAW,GAAGL,IAAI,CAACC,KAAL,CAAW,CAACN,WAAW,IAAIC,GAAG,GAAGF,SAAV,CAAZ,IAAoC,IAA/C,CAApB;;AACA,UAAIW,WAAW,IAAI,CAAnB,EAAsB;AACpBN,QAAAA,WAAW,CAACM,WAAD,CAAX;AACD,OAFD,MAEO;AACLpB,QAAAA,QAAQ,CACNH,YAAY,CAAC;AAAEU,UAAAA,WAAW,EAAEA,WAAW,CAACH,IAAZ,CAAiBiB,aAAjB;AAAf,SAAD,CADN,CAAR;AAIAC,QAAAA,aAAa,CAACL,QAAD,CAAb;AACD;AACF,KAb2B,EAazB,IAbyB,CAA5B;AAeA,WAAO,MAAM;AACXK,MAAAA,aAAa,CAACL,QAAD,CAAb;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACZ,QAAQ,CAACN,UAAV,CAnBM,CAAT;AAqBA,sBAAO,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBc,QAApB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nimport { TRootState } from \"../../types/examTypes\";\nimport { nextQuestion } from \"../../redux/actions\";\n\nexport default function Timer({ questionId }) {\n  const dispatch = useDispatch();\n  const answer = useSelector(\n    (state: TRootState) => state.answerTable.byId[questionId]\n  );\n  const question = useSelector(\n    (state: TRootState) => state.questionTable.byId[questionId]\n  );\n  const currentExam = useSelector((state:TRootState) => state.examT)\n  const { timeStart } = answer;\n  const { timeLimitMs } = question;\n  const now = Date.now();\n\n  const [timeLeft, setTimeLeft] = useState(\n    (timeStart ? Math.trunc(timeLimitMs - (now - timeStart)) : timeLimitMs) /\n      1000\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const timeStart = store.getState().answerTable.byId[questionId].timeStart;\n      const newTimeLeft = Math.trunc((timeLimitMs - (now - timeStart)) / 1000);\n      if (newTimeLeft >= 0) {\n        setTimeLeft(newTimeLeft);\n      } else {\n        dispatch(\n          nextQuestion({ currentExam: currentExam.byId[currentExamId] })\n        );\n\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId]);\n\n  return <Heading as={\"h3\"}>{timeLeft}</Heading>;\n}\n"]},"metadata":{},"sourceType":"module"}