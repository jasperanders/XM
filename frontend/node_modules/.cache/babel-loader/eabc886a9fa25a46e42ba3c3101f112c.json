{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { setAppTimer, countDownAppTimer } from \"../../redux/actions\";\nexport default function Timer({\n  question\n}) {\n  // const dispatch = useDispatch();\n  // const timeLimit = useSelector(\n  //   (state: TRootState) => state.questions.byId[questionId].timeLimit\n  // // );\n  // const { timerIsActive, currentTime } = useSelector(\n  //   (state: TRootState) => state.appState\n  // );\n  const {\n    timeStart,\n    time\n  } = question;\n  const [timeLeft, setTimeLeft] = useState(10);\n\n  const dispatchSetAppTimer = payload => dispatch(setAppTimer(payload));\n\n  const dispatchCountDownAppTimer = payload => dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      setTimeLeft(time => time - 1);\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [questionId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, \"Time remaining: \", timeLeft);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","setAppTimer","countDownAppTimer","Timer","question","timeStart","time","timeLeft","setTimeLeft","dispatchSetAppTimer","payload","dispatch","dispatchCountDownAppTimer","interval","setInterval","clearInterval","questionId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAGA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,qBAA/C;AAGA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAqC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAAoBF,QAA1B;AAEA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMS,mBAAmB,GAAIC,OAAD,IAAaC,QAAQ,CAACV,WAAW,CAACS,OAAD,CAAZ,CAAjD;;AACA,QAAME,yBAAyB,GAAIF,OAAD,IAChCC,QAAQ,CAACT,iBAAiB,CAACQ,OAAD,CAAlB,CADV;;AAGAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,QAAQ,GAAG,IAAf;AACAA,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BN,MAAAA,WAAW,CAAEF,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAX;AACD,KAFqB,EAEnB,IAFmB,CAAtB;AAIA,WAAO,MAAM;AACXS,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAFD;AAGD,GATQ,EASN,CAACG,UAAD,CATM,CAAT;AAWA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAsBT,QAAtB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TRootState, TQuestion } from \"../../types/exam\";\nimport { setAppTimer, countDownAppTimer } from \"../../redux/actions\";\nimport { store } from \"../../index\";\n\nexport default function Timer({ question }: TProps) {\n  // const dispatch = useDispatch();\n  // const timeLimit = useSelector(\n  //   (state: TRootState) => state.questions.byId[questionId].timeLimit\n  // // );\n  // const { timerIsActive, currentTime } = useSelector(\n  //   (state: TRootState) => state.appState\n  // );\n\n  const {timeStart, time} = question;\n\n  const [timeLeft, setTimeLeft] = useState(10);\n\n  const dispatchSetAppTimer = (payload) => dispatch(setAppTimer(payload));\n  const dispatchCountDownAppTimer = (payload) =>\n    dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      setTimeLeft((time) => time - 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [questionId]);\n\n  return <div>Time remaining: {timeLeft}</div>;\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}