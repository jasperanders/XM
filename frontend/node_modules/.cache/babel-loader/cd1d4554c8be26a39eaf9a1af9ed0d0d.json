{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { ANSWER_FREE_TEXT_QUESTION, ANSWER_MULTIPLE_CHOICE_QUESTION, SET_ANSWER_START_TIME, SET_ANSWER_END_TIME, NEXT_QUESTION, COUNT_DOWN_APP_TIMER } from \"./actions\";\nimport { initialAnswerTable, initialExamState, initialExamTable, initialQuestionTable, initialAnswerBodyMultipleChoiceTable, initialQuestionBodyMultipleChoiceTable, initialAnswerBodyFreeTextTable, initialQuestionBodyFreeTextTable } from \"./initialState\"; // ================= Basic Tables =====================\n\nfunction questionTable(state = initialQuestionTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_ANSWER_START_TIME:\n      return produce(state, d => {\n        const answer = d.byId[payload.questionId];\n\n        if (answer.timeStart === null) {\n          answer.timeStart = Date.now();\n        }\n      });\n\n    case SET_ANSWER_END_TIME:\n      return produce(state, d => {\n        let answer = d.byId[payload.questionId];\n        answer.timeEnd = Date.now();\n        answer.timeExpired = true;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction examState(state = initialExamState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, d => {\n        if (payload.currentExam.questionsById.length < d.c) d.currentQuestionIndex += 1;\n        d.currentQuestionId = payload.currentExam.questionsById[d.currentQuestionIndex];\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, draftState => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n\n    default:\n      return state;\n  }\n} // ================= Body Tables =====================\n\n\nfunction questionBodyMultipleChoiceTable(state = initialQuestionBodyMultipleChoiceTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction questionBodyFreeTextTable(state = initialQuestionBodyFreeTextTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyFreeTextTable(state = initialAnswerBodyFreeTextTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, d => {\n        const answer = d.byId[payload.questionId];\n        answer.answerText = payload.answer;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(state = initialAnswerBodyMultipleChoiceTable, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_MULTIPLE_CHOICE_QUESTION:\n      return produce(state, d => {\n        d.byId[payload.questionId].selectedAnswers = payload.selectedAnswers;\n      });\n\n    default:\n      return state;\n  }\n} // =================== Root Reducer =================\n\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/reducers.ts"],"names":["combineReducers","produce","ANSWER_FREE_TEXT_QUESTION","ANSWER_MULTIPLE_CHOICE_QUESTION","SET_ANSWER_START_TIME","SET_ANSWER_END_TIME","NEXT_QUESTION","COUNT_DOWN_APP_TIMER","initialAnswerTable","initialExamState","initialExamTable","initialQuestionTable","initialAnswerBodyMultipleChoiceTable","initialQuestionBodyMultipleChoiceTable","initialAnswerBodyFreeTextTable","initialQuestionBodyFreeTextTable","questionTable","state","type","payload","answerTable","d","answer","byId","questionId","timeStart","Date","now","timeEnd","timeExpired","examTable","examState","currentExam","questionsById","length","c","currentQuestionIndex","currentQuestionId","draftState","currentTime","countDownBy","console","log","questionBodyMultipleChoiceTable","questionBodyFreeTextTable","answerBodyFreeTextTable","answerText","answerBodyMultipleChoiceTable","selectedAnswers","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  ANSWER_MULTIPLE_CHOICE_QUESTION,\n  SET_ANSWER_START_TIME,\n  SET_ANSWER_END_TIME,\n  NEXT_QUESTION,\n  SET_APP_TIMER,\n  COUNT_DOWN_APP_TIMER,\n} from \"./actions\";\nimport {\n  initialAnswerTable,\n  initialExamState,\n  initialExamTable,\n  initialQuestionTable,\n  initialAnswerBodyMultipleChoiceTable,\n  initialQuestionBodyMultipleChoiceTable,\n  initialAnswerBodyFreeTextTable,\n  initialQuestionBodyFreeTextTable,\n} from \"./initialState\";\n\n// ================= Basic Tables =====================\n\nfunction questionTable(state = initialQuestionTable, { type, payload }) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction answerTable(state = initialAnswerTable, { type, payload }) {\n  switch (type) {\n    case SET_ANSWER_START_TIME:\n      return produce(state, (d) => {\n        const answer = d.byId[payload.questionId];\n        if (answer.timeStart === null) {\n          answer.timeStart = Date.now();\n        }\n      });\n    case SET_ANSWER_END_TIME:\n      return produce(state, (d) => {\n        let answer = d.byId[payload.questionId];\n        answer.timeEnd = Date.now();\n        answer.timeExpired = true;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction examTable(state = initialExamTable, { type, payload }) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction examState(state = initialExamState, { type, payload }) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, (d) => {\n        if(payload.currentExam.questionsById.length < d.c)\n        d.currentQuestionIndex += 1;\n        d.currentQuestionId =\n          payload.currentExam.questionsById[d.currentQuestionIndex];\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, (draftState) => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n    default:\n      return state;\n  }\n}\n\n// ================= Body Tables =====================\n\nfunction questionBodyMultipleChoiceTable(\n  state = initialQuestionBodyMultipleChoiceTable,\n  { type, payload }\n) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction questionBodyFreeTextTable(\n  state = initialQuestionBodyFreeTextTable,\n  { type, payload }\n) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyFreeTextTable(\n  state = initialAnswerBodyFreeTextTable,\n  { type, payload }\n) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, (d) => {\n        const answer = d.byId[payload.questionId];\n        answer.answerText = payload.answer;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction answerBodyMultipleChoiceTable(\n  state = initialAnswerBodyMultipleChoiceTable,\n  { type, payload }\n) {\n  switch (type) {\n    case ANSWER_MULTIPLE_CHOICE_QUESTION:\n      return produce(state, (d) => {\n        d.byId[payload.questionId].selectedAnswers = payload.selectedAnswers;\n      });\n    default:\n      return state;\n  }\n}\n\n// =================== Root Reducer =================\n\nexport const rootReducer = combineReducers({\n  examTable,\n  questionTable,\n  answerTable,\n  questionBodyMultipleChoiceTable,\n  questionBodyFreeTextTable,\n  answerBodyFreeTextTable,\n  answerBodyMultipleChoiceTable,\n  examState,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}