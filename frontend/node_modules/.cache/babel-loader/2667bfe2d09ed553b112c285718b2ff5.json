{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nexport default function Timer(questionId) {\n  const {\n    currentExamId\n  } = useSelector(state => state.examState);\n  const answer = useSelector(state => state.answerTable.byId[currentExamId]);\n  const question = useSelector(state => state.questionTable.byId[currentExamId]);\n  const {\n    timeStart\n  } = answer;\n  const {\n    timeLimit\n  } = question;\n  const now = Date.now();\n  const [timeLeft, setTimeLeft] = useState(timeStart ? Math.trunc(timeLimit - (now - timeStart) / 1000) : timeLimit);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const timeStart = store.getState().answerTable.byId[questionId].timeStart;\n      setTimeLeft(Math.trunc(timeLimit - (now - timeStart) / 1000));\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId]);\n  return /*#__PURE__*/React.createElement(Heading, {\n    as: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, timeLeft);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","useSelector","store","Heading","Timer","questionId","currentExamId","state","examState","answer","answerTable","byId","question","questionTable","timeStart","timeLimit","now","Date","timeLeft","setTimeLeft","Math","trunc","interval","setInterval","getState","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAGA,eAAe,SAASC,KAAT,CAAeC,UAAf,EAA2B;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAoBL,WAAW,CAAEM,KAAD,IAAuBA,KAAK,CAACC,SAA9B,CAArC;AACA,QAAMC,MAAM,GAAGR,WAAW,CACvBM,KAAD,IAAuBA,KAAK,CAACG,WAAN,CAAkBC,IAAlB,CAAuBL,aAAvB,CADC,CAA1B;AAGA,QAAMM,QAAQ,GAAGX,WAAW,CACzBM,KAAD,IAAuBA,KAAK,CAACM,aAAN,CAAoBF,IAApB,CAAyBL,aAAzB,CADG,CAA5B;AAGA,QAAM;AAAEQ,IAAAA;AAAF,MAAgBL,MAAtB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAgBH,QAAtB;AACA,QAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CACtCc,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAWN,SAAS,GAAG,CAACC,GAAG,GAAGF,SAAP,IAAoB,IAA3C,CAAH,GAAsDC,SADzB,CAAxC;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAMP,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,YAAMF,SAAS,GAAGZ,KAAK,CAACsB,QAAN,GAAiBd,WAAjB,CAA6BC,IAA7B,CAAkCN,UAAlC,EAA8CS,SAAhE;AACAK,MAAAA,WAAW,CAACC,IAAI,CAACC,KAAL,CAAWN,SAAS,GAAG,CAACC,GAAG,GAAGF,SAAP,IAAoB,IAA3C,CAAD,CAAX;AACD,KAJ2B,EAIzB,IAJyB,CAA5B;AAMA,WAAO,MAAM;AACXW,MAAAA,aAAa,CAACH,QAAD,CAAb;AACD,KAFD;AAGD,GAVQ,EAUN,CAACV,QAAQ,CAACP,UAAV,CAVM,CAAT;AAYA,sBAAO,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBa,QAApB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nimport { TRootState } from \"../../types/examTypes\";\n\nexport default function Timer(questionId) {\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n  const answer = useSelector(\n    (state: TRootState) => state.answerTable.byId[currentExamId]\n  );\n  const question = useSelector(\n    (state: TRootState) => state.questionTable.byId[currentExamId]\n  );\n  const { timeStart } = answer;\n  const { timeLimit } = question;\n  const now = Date.now();\n\n  const [timeLeft, setTimeLeft] = useState(\n    timeStart ? Math.trunc(timeLimit - (now - timeStart) / 1000) : timeLimit\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const timeStart = store.getState().answerTable.byId[questionId].timeStart;\n      setTimeLeft(Math.trunc(timeLimit - (now - timeStart) / 1000));\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId]);\n\n  return <Heading as={\"h3\"}>{timeLeft}</Heading>;\n}\n"]},"metadata":{},"sourceType":"module"}