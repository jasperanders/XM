{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { ANSWER_FREE_TEXT_QUESTION, START_TIMER, END_TIMER, PREVIOUS_QUESTION, NEXT_QUESTION } from \"./actions\";\nimport { initialAppState, initialExam, initialQuestions } from \"./initialState\";\n\nfunction questions(state = initialQuestions, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n        question.timeExpired = true;\n      });\n\n    case START_TIMER:\n      return produce(state, drafState => {\n        let question = drafState.byId[payload.questionId];\n\n        if (question.timeStart !== null) {}\n\n        question.timeStart = Date.now();\n      });\n\n    case END_TIMER:\n      return produce(state, drafState => {\n        let question = drafState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction exams(state = initialExam, {\n  type,\n  payload\n}) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction appState(state = initialAppState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case PREVIOUS_QUESTION:\n      return state;\n\n    case NEXT_QUESTION:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  exams,\n  questions,\n  appState\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/reducers.ts"],"names":["combineReducers","produce","ANSWER_FREE_TEXT_QUESTION","START_TIMER","END_TIMER","PREVIOUS_QUESTION","NEXT_QUESTION","initialAppState","initialExam","initialQuestions","questions","state","type","payload","draftState","question","byId","questionId","answerText","timeExpired","drafState","timeStart","Date","now","timeEnd","exams","appState","rootReducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SACEC,yBADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,iBAJF,EAKEC,aALF,QAMO,WANP;AAOA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,gBAAvC,QAA+D,gBAA/D;;AAEA,SAASC,SAAT,CAAmBC,KAAK,GAAGF,gBAA3B,EAA6C;AAAEG,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA7C,EAAgE;AAC9D,UAAQD,IAAR;AACE,SAAKV,yBAAL;AACE,aAAOD,OAAO,CAACU,KAAD,EAASG,UAAD,IAAgB;AACpC,YAAIC,QAAQ,GAAGD,UAAU,CAACE,IAAX,CAAgBH,OAAO,CAACI,UAAxB,CAAf;AACAF,QAAAA,QAAQ,CAACG,UAAT,GAAsBL,OAAO,CAACK,UAA9B;AACAH,QAAAA,QAAQ,CAACI,WAAT,GAAuB,IAAvB;AACD,OAJa,CAAd;;AAMF,SAAKhB,WAAL;AACE,aAAOF,OAAO,CAACU,KAAD,EAASS,SAAD,IAAe;AACnC,YAAIL,QAAQ,GAAGK,SAAS,CAACJ,IAAV,CAAeH,OAAO,CAACI,UAAvB,CAAf;;AACA,YAAIF,QAAQ,CAACM,SAAT,KAAuB,IAA3B,EAAiC,CAChC;;AACDN,QAAAA,QAAQ,CAACM,SAAT,GAAqBC,IAAI,CAACC,GAAL,EAArB;AACD,OALa,CAAd;;AAMF,SAAKnB,SAAL;AACE,aAAOH,OAAO,CAACU,KAAD,EAASS,SAAD,IAAe;AACnC,YAAIL,QAAQ,GAAGK,SAAS,CAACJ,IAAV,CAAeH,OAAO,CAACI,UAAvB,CAAf;AACAF,QAAAA,QAAQ,CAACS,OAAT,GAAmBF,IAAI,CAACC,GAAL,EAAnB;AACD,OAHa,CAAd;;AAKF;AACE,aAAOZ,KAAP;AAtBJ;AAwBD;;AAED,SAASc,KAAT,CAAed,KAAK,GAAGH,WAAvB,EAAoC;AAAEI,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApC,EAAuD;AACrD,UAAQD,IAAR;AACE;AACE,aAAOD,KAAP;AAFJ;AAID;;AAED,SAASe,QAAT,CAAkBf,KAAK,GAAGJ,eAA1B,EAA2C;AAAEK,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA3C,EAA8D;AAC5D,UAAQD,IAAR;AACE,SAAKP,iBAAL;AACE,aAAOM,KAAP;;AACF,SAAKL,aAAL;AACE,aAAOK,KAAP;;AAEF;AACE,aAAOA,KAAP;AAPJ;AASD;;AAED,OAAO,MAAMgB,WAAW,GAAG3B,eAAe,CAAC;AACzCyB,EAAAA,KADyC;AAEzCf,EAAAA,SAFyC;AAGzCgB,EAAAA;AAHyC,CAAD,CAAnC;AAMP,eAAeC,WAAf","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  START_TIMER,\n  END_TIMER,\n  PREVIOUS_QUESTION,\n  NEXT_QUESTION,\n} from \"./actions\";\nimport { initialAppState, initialExam, initialQuestions } from \"./initialState\";\n\nfunction questions(state = initialQuestions, { type, payload }) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n        question.timeExpired = true;\n      });\n\n    case START_TIMER:\n      return produce(state, (drafState) => {\n        let question = drafState.byId[payload.questionId];\n        if (question.timeStart !== null) {\n        }\n        question.timeStart = Date.now();\n      });\n    case END_TIMER:\n      return produce(state, (drafState) => {\n        let question = drafState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction exams(state = initialExam, { type, payload }) {\n  switch (type) {\n    default:\n      return state;\n  }\n}\n\nfunction appState(state = initialAppState, { type, payload }) {\n  switch (type) {\n    case PREVIOUS_QUESTION:\n      return state;\n    case NEXT_QUESTION:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  exams,\n  questions,\n  appState,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}