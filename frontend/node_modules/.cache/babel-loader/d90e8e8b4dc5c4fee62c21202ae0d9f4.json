{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport { answerFreeTextQuestion, setQuestionStartTime, setQuestionEndTime, nextQuestion } from \"../../redux/actions\";\nexport default function Question({\n  question\n}) {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n  const {\n    questionId,\n    answerType,\n    questionText,\n    questionTitle,\n    answerText\n  } = question;\n  useEffect(() => {\n    dispatch(setQuestionStartTime({\n      questionId\n    }));\n  }, []);\n\n  const onSubmit = data => {\n    let action = undefined;\n\n    switch (answerType) {\n      case \"freeText\":\n        const {\n          answerText\n        } = data;\n        const payload = {\n          questionId,\n          answerText\n        };\n        action = answerFreeTextQuestion(payload);\n        break;\n\n      default:\n        break;\n    }\n\n    dispatch(action);\n    dispatch(setQuestionEndTime({\n      questionId\n    }));\n    dispatch(nextQuestion());\n    disp;\n  };\n\n  const questionBody = () => {\n    switch (answerType) {\n      case \"freeText\":\n        return /*#__PURE__*/React.createElement(FreeTextQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          onSubmit: onSubmit,\n          storedAnswer: answerText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, questionTitle), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, questionText), questionBody());\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx"],"names":["React","useEffect","useDispatch","useForm","FreeTextQuestion","answerFreeTextQuestion","setQuestionStartTime","setQuestionEndTime","nextQuestion","Question","question","dispatch","register","handleSubmit","watch","errors","questionId","answerType","questionText","questionTitle","answerText","onSubmit","data","action","undefined","payload","disp","questionBody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AAEA,SACEC,sBADF,EAEEC,oBAFF,EAGEC,kBAHF,EAIEC,YAJF,QAKO,qBALP;AAOA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AACrD,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAA4CZ,OAAO,EAAzD;AAEA,QAAM;AACJa,IAAAA,UADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA;AALI,MAMFV,QANJ;AAOAT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAACL,oBAAoB,CAAC;AAAEU,MAAAA;AAAF,KAAD,CAArB,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,QAAQ,GAAIC,IAAD,IAAU;AACzB,QAAIC,MAAM,GAAGC,SAAb;;AACA,YAAQP,UAAR;AACE,WAAK,UAAL;AACE,cAAM;AAAEG,UAAAA;AAAF,YAAiBE,IAAvB;AACA,cAAMG,OAAO,GAAG;AAAET,UAAAA,UAAF;AAAcI,UAAAA;AAAd,SAAhB;AACAG,QAAAA,MAAM,GAAGlB,sBAAsB,CAACoB,OAAD,CAA/B;AACA;;AAEF;AACE;AARJ;;AAWAd,IAAAA,QAAQ,CAACY,MAAD,CAAR;AACAZ,IAAAA,QAAQ,CAACJ,kBAAkB,CAAC;AAAES,MAAAA;AAAF,KAAD,CAAnB,CAAR;AACAL,IAAAA,QAAQ,CAACH,YAAY,EAAb,CAAR;AACAkB,IAAAA,IAAI;AACL,GAjBD;;AAmBA,QAAMC,YAAY,GAAG,MAAM;AACzB,YAAQV,UAAR;AACE,WAAK,UAAL;AACE,4BACE,oBAAC,gBAAD;AACE,UAAA,QAAQ,EAAEL,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAEM,QALZ;AAME,UAAA,YAAY,EAAED,UANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAUF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAbJ;AAeD,GAhBD;;AAkBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,aAAN,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,YAAN,CAFF,EAGGS,YAAY,EAHf,CADF;AAOD","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport { TQuestion } from \"../../types/exam\";\nimport {\n  answerFreeTextQuestion,\n  setQuestionStartTime,\n  setQuestionEndTime,\n  nextQuestion,\n} from \"../../redux/actions\";\n\nexport default function Question({ question }: TProps) {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, watch, errors } = useForm();\n\n  const {\n    questionId,\n    answerType,\n    questionText,\n    questionTitle,\n    answerText,\n  } = question;\n  useEffect(() => {\n    dispatch(setQuestionStartTime({ questionId }));\n  }, []);\n\n  const onSubmit = (data) => {\n    let action = undefined;\n    switch (answerType) {\n      case \"freeText\":\n        const { answerText } = data;\n        const payload = { questionId, answerText };\n        action = answerFreeTextQuestion(payload);\n        break;\n\n      default:\n        break;\n    }\n\n    dispatch(action);\n    dispatch(setQuestionEndTime({ questionId }));\n    dispatch(nextQuestion());\n    disp\n  };\n\n  const questionBody = () => {\n    switch (answerType) {\n      case \"freeText\":\n        return (\n          <FreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            onSubmit={onSubmit}\n            storedAnswer={answerText}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n\n  return (\n    <div>\n      <div>{questionTitle}</div>\n      <div>{questionText}</div>\n      {questionBody()}\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}