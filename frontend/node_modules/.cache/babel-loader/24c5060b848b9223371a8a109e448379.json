{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setAppTimer, countDownAppTimer } from \"../../redux/actions\";\nexport default function Timer({\n  question\n}) {\n  const dispatch = useDispatch();\n  const {\n    timerIsActive,\n    currentTime\n  } = useSelector(state => state.appState);\n  const [timeLeft, setTimeLeft] = useState(10);\n\n  const dispatchSetAppTimer = payload => dispatch(setAppTimer(payload));\n\n  const dispatchCountDownAppTimer = payload => dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      setTimeLeft(time => time - 1);\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [questionId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  }, \"Time remaining: \", timeLeft);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","useSelector","useDispatch","setAppTimer","countDownAppTimer","Timer","question","dispatch","timerIsActive","currentTime","state","appState","timeLeft","setTimeLeft","dispatchSetAppTimer","payload","dispatchCountDownAppTimer","interval","setInterval","time","clearInterval","questionId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,qBAA/C;AAGA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAqC;AAClD,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAAEM,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAiCR,WAAW,CAC/CS,KAAD,IAAuBA,KAAK,CAACC,QADmB,CAAlD;AAIA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMc,mBAAmB,GAAIC,OAAD,IAAaR,QAAQ,CAACJ,WAAW,CAACY,OAAD,CAAZ,CAAjD;;AACA,QAAMC,yBAAyB,GAAID,OAAD,IAChCR,QAAQ,CAACH,iBAAiB,CAACW,OAAD,CAAlB,CADV;;AAGAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,QAAQ,GAAG,IAAf;AACAA,IAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BL,MAAAA,WAAW,CAAEM,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAX;AACD,KAFqB,EAEnB,IAFmB,CAAtB;AAIA,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACH,QAAD,CAAb;AACD,KAFD;AAGD,GATQ,EASN,CAACI,UAAD,CATM,CAAT;AAWA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAsBT,QAAtB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TRootState } from \"../../types/exam\";\nimport { setAppTimer, countDownAppTimer } from \"../../redux/actions\";\nimport { store } from \"../../index\";\n\nexport default function Timer({ question }: TProps) {\n  const dispatch = useDispatch();\n  const { timerIsActive, currentTime } = useSelector(\n    (state: TRootState) => state.appState\n  );\n\n  const [timeLeft, setTimeLeft] = useState(10);\n\n  const dispatchSetAppTimer = (payload) => dispatch(setAppTimer(payload));\n  const dispatchCountDownAppTimer = (payload) =>\n    dispatch(countDownAppTimer(payload));\n\n  useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      setTimeLeft((time) => time - 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [questionId]);\n\n  return <div>Time remaining: {timeLeft}</div>;\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}