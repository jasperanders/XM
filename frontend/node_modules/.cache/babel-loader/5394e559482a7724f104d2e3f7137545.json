{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/questionType/MultipleChoice.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { v4 } from \"uuid\";\nimport { nextQuestion, answerMultipleChoiceQuestion, setAnswerEndTime } from \"../../../redux/actions\";\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  watch,\n  errors,\n  question,\n  getValues,\n  setCurrentAnswerAction\n}) {\n  const dispatch = useDispatch();\n  const questionBody = useSelector(state => state.questionBodyMultipleChoiceTable.byId[question.questionId]);\n  const currentExam = useSelector(state => state.examTable); // const currentExam = useSelector((state: TRootState) => state.examTable);\n\n  const {\n    currentExamId,\n    currentQuestionId\n  } = useSelector(state => state.examState);\n\n  const makeSelectedAnswers = data => {\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      if (data[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    console.log(possibleAnswers);\n    return selectedAnswers;\n  };\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // nested: true returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({\n          nest: true\n        }));\n        console.log(selectedAnswers);\n        console.log(\"selectedAnswers\");\n        return answerMultipleChoiceQuestion({\n          questionId: currentQuestionId,\n          selectedAnswers\n        });\n      };\n    });\n  }, [question]);\n  const {\n    possibleAnswers\n  } = questionBody;\n\n  const onSubmit = data => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(answerMultipleChoiceQuestion({\n      questionId: currentQuestionId,\n      selectedAnswers\n    }));\n    dispatch(setAnswerEndTime({\n      questionId: currentQuestionId\n    }));\n    dispatch(nextQuestion({\n      currentExam: currentExam.byId[currentExamId]\n    }));\n  }; // console.log(watchAll);\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      defaultChecked: false,\n      name: `multipleChoice[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }), possibleAnswer));\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"Save and Next Question\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/questionType/MultipleChoice.tsx"],"names":["React","useEffect","useDispatch","useSelector","Label","Checkbox","Button","v4","nextQuestion","answerMultipleChoiceQuestion","setAnswerEndTime","MultipleChoiceQuestion","register","handleSubmit","watch","errors","question","getValues","setCurrentAnswerAction","dispatch","questionBody","state","questionBodyMultipleChoiceTable","byId","questionId","currentExam","examTable","currentExamId","currentQuestionId","examState","makeSelectedAnswers","data","selectedAnswers","possibleAnswers","forEach","el","i","push","console","log","nest","onSubmit","map","possibleAnswer","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { v4 } from \"uuid\";\nimport {\n  nextQuestion,\n  answerMultipleChoiceQuestion,\n  setAnswerEndTime,\n} from \"../../../redux/actions\";\n\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  watch,\n  errors,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n}) {\n  const dispatch = useDispatch();\n  const questionBody = useSelector(\n    (state: TRootState) =>\n      state.questionBodyMultipleChoiceTable.byId[question.questionId]\n  );\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n  // const currentExam = useSelector((state: TRootState) => state.examTable);\n  const { currentExamId, currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n\n  const makeSelectedAnswers = (data) => {\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      if (data[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    console.log(possibleAnswers)\n    return selectedAnswers;\n  };\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // nested: true returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({ nest: true }));\n        console.log(selectedAnswers);\n        console.log(\"selectedAnswers\");\n        return answerMultipleChoiceQuestion({\n          questionId: currentQuestionId,\n          selectedAnswers,\n        });\n      };\n    });\n  }, [question]);\n\n  const { possibleAnswers } = questionBody;\n\n  const onSubmit = (data) => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(\n      answerMultipleChoiceQuestion({\n        questionId: currentQuestionId,\n        selectedAnswers,\n      })\n    );\n    dispatch(setAnswerEndTime({ questionId: currentQuestionId }));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n  // console.log(watchAll);\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`multipleChoice[${index}]`}\n                ref={register}\n              />\n              {possibleAnswer}\n            </Label>\n          </div>\n        );\n      })}\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}