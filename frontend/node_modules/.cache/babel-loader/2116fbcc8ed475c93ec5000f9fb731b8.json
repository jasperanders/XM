{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useState } from \"react\";\nexport default function Timer({\n  question\n}) {\n  // const dispatch = useDispatch();\n  // const timeLimit = useSelector(\n  //   (state: TRootState) => state.questions.byId[questionId].timeLimit\n  // // );\n  // const { timerIsActive, currentTime } = useSelector(\n  //   (state: TRootState) => state.appState\n  // );\n  const {\n    timeStart,\n    timeLimit\n  } = question;\n  const now = Date.now();\n  console.log(timeLimit);\n  console.log((now - timeStart) / 1000);\n  const [timeLeft, setTimeLeft] = useState( // timeLimit - (now - timeStart) / 1000\n  (now - 0) / 1000); // const dispatchSetAppTimer = (payload) => dispatch(setAppTimer(payload));\n  // const dispatchCountDownAppTimer = (payload) =>\n  //   dispatch(countDownAppTimer(payload));\n  // useEffect(() => {\n  //   let interval = null;\n  //   interval = setInterval(() => {\n  //     setTimeLeft((time) => time - 1);\n  //   }, 1000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }\n  }, \"Time remaining: \", timeLeft);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useState","Timer","question","timeStart","timeLimit","now","Date","console","log","timeLeft","setTimeLeft"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;AAMA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAAqC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA2BF,QAAjC;AACA,QAAMG,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACH,GAAG,GAAGF,SAAP,IAAoB,IAAhC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,EACtC;AACA,GAACK,GAAG,GAAG,CAAP,IAAY,IAF0B,CAAxC,CAdkD,CAqBlD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAsBI,QAAtB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TRootState, TQuestion } from \"../../types/exam\";\nimport { setAppTimer, countDownAppTimer } from \"../../redux/actions\";\nimport { store } from \"../../index\";\n\nexport default function Timer({ question }: TProps) {\n  // const dispatch = useDispatch();\n  // const timeLimit = useSelector(\n  //   (state: TRootState) => state.questions.byId[questionId].timeLimit\n  // // );\n  // const { timerIsActive, currentTime } = useSelector(\n  //   (state: TRootState) => state.appState\n  // );\n\n  const { timeStart, timeLimit } = question;\n  const now = Date.now();\n  console.log(timeLimit);\n\n  console.log((now - timeStart) / 1000);\n  const [timeLeft, setTimeLeft] = useState(\n    // timeLimit - (now - timeStart) / 1000\n    (now - 0) / 1000\n  );\n\n  \n\n  // const dispatchSetAppTimer = (payload) => dispatch(setAppTimer(payload));\n  // const dispatchCountDownAppTimer = (payload) =>\n  //   dispatch(countDownAppTimer(payload));\n\n  // useEffect(() => {\n  //   let interval = null;\n  //   interval = setInterval(() => {\n  //     setTimeLeft((time) => time - 1);\n  //   }, 1000);\n\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n\n  return <div>Time remaining: {timeLeft}</div>;\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}