{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { Heading } from \"theme-ui\";\nimport { setAnswerStartTime } from \"../../redux/actions\";\nexport default function Question({\n  question\n}) {\n  const {\n    questionId,\n    questionType,\n    title,\n    text\n  } = question;\n  const dispatch = useDispatch();\n  const {\n    currentExamId\n  } = useSelector(state => state.examState);\n  const currentExam = useSelector(state => state.examTable.byId[currentExamId]);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n  useEffect(() => {\n    dispatch(setAnswerStartTime({\n      questionId\n    }));\n    reset();\n  }, [questionId, dispatch, reset]);\n  useEffect(() => {\n    console.log(getValues());\n  });\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return /*#__PURE__*/React.createElement(FreeTextQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          question: question,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }\n        });\n\n      case \"multipleChoice\":\n        return /*#__PURE__*/React.createElement(MultipleChoiceQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          question: question,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, text), questionBody(), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => console.log(getValues()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \" Click\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx"],"names":["React","useEffect","useDispatch","useSelector","useForm","FreeTextQuestion","MultipleChoiceQuestion","Heading","setAnswerStartTime","Question","question","questionId","questionType","title","text","dispatch","currentExamId","state","examState","currentExam","examTable","byId","register","handleSubmit","watch","errors","reset","getValues","console","log","questionBody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,sBAAP,MAAmC,+BAAnC;AAEA,SAASC,OAAT,QAAwB,UAAxB;AAGA,SAASC,kBAAT,QAAmC,qBAAnC;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AACrD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,YAAd;AAA4BC,IAAAA,KAA5B;AAAmCC,IAAAA;AAAnC,MAA4CJ,QAAlD;AACA,QAAMK,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAoBb,WAAW,CAAEc,KAAD,IAAuBA,KAAK,CAACC,SAA9B,CAArC;AACA,QAAMC,WAAW,GAAGhB,WAAW,CAC5Bc,KAAD,IAAuBA,KAAK,CAACG,SAAN,CAAgBC,IAAhB,CAAqBL,aAArB,CADM,CAA/B;AAGA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA,KAAzC;AAAgDC,IAAAA;AAAhD,MAA8DvB,OAAO,EAA3E;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACP,kBAAkB,CAAC;AAAEG,MAAAA;AAAF,KAAD,CAAnB,CAAR;AACAe,IAAAA,KAAK;AACN,GAHQ,EAGN,CAACf,UAAD,EAAaI,QAAb,EAAuBW,KAAvB,CAHM,CAAT;AAKAzB,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAS,EAArB;AACD,GAFQ,CAAT;;AAIA,QAAMG,YAAY,GAAG,MAAM;AACzB,YAAQlB,YAAR;AACE,WAAK,UAAL;AACE,4BACE,oBAAC,gBAAD;AACE,UAAA,QAAQ,EAAEU,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAEf,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF,WAAK,gBAAL;AACE,4BACE,oBAAC,sBAAD;AACE,UAAA,QAAQ,EAAEY,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAEf,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAtBJ;AAwBD,GAzBD;;AA0BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBG,KAApB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAJ,CAFF,EAGGgB,YAAY,EAHf,eAKE;AAAQ,IAAA,OAAO,EAAE,MAAMF,OAAO,CAACC,GAAR,CAAYF,SAAS,EAArB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,CADF;AASD","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { TQuestion, TRootState } from \"../../types/examTypes\";\nimport { Heading } from \"theme-ui\";\n\nimport Timer from \"../timer/Timer\";\nimport { setAnswerStartTime } from \"../../redux/actions\";\n\nexport default function Question({ question }: TProps) {\n  const { questionId, questionType, title, text } = question;\n  const dispatch = useDispatch();\n  const { currentExamId } = useSelector((state: TRootState) => state.examState);\n  const currentExam = useSelector(\n    (state: TRootState) => state.examTable.byId[currentExamId]\n  );\n  const { register, handleSubmit, watch, errors, reset, getValues } = useForm();\n\n  useEffect(() => {\n    dispatch(setAnswerStartTime({ questionId }));\n    reset();\n  }, [questionId, dispatch, reset]);\n\n  useEffect(() => {\n    console.log(getValues());\n  });\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return (\n          <FreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            question={question}\n          />\n        );\n      case \"multipleChoice\":\n        return (\n          <MultipleChoiceQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            question={question}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n  return (\n    <div>\n      <Heading as={\"h2\"}>{title}</Heading>\n      <p>{text}</p>\n      {questionBody()}\n      {/* <Timer questionId={questionId} currentExam={currentExam}></Timer> */}\n      <button onClick={() => console.log(getValues())}> Click</button>\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}