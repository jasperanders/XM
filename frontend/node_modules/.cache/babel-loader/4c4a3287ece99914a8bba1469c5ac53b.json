{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport { ANSWER_QUESTION, START_TIMER, END_TIMER } from \"./actions\";\n\nfunction answer(state = \"\", {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_QUESTION:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nfunction time(state = 0, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case START_TIMER:\n      return state;\n\n    case END_TIMER:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nconst question = combineReducers({\n  answer,\n  time\n});\nconst exam = combineReducers({\n  question,\n  current\n});\nexport const rootReducer = combineReducers({\n  exam\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/my-app/src/app/reducers.ts"],"names":["combineReducers","ANSWER_QUESTION","START_TIMER","END_TIMER","answer","state","type","payload","time","question","exam","current","rootReducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,WAAxD;;AAGA,SAASC,MAAT,CAAgBC,KAAa,GAAG,EAAhC,EAAoC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApC,EAAuD;AACrD,UAAQD,IAAR;AACE,SAAKL,eAAL;AACE,aAAOI,KAAP;;AAEF;AACE,aAAOA,KAAP;AALJ;AAOD;;AAED,SAASG,IAAT,CAAcH,KAAa,GAAG,CAA9B,EAAiC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAjC,EAAoD;AAClD,UAAQD,IAAR;AACE,SAAKJ,WAAL;AACE,aAAOG,KAAP;;AAEF,SAAKF,SAAL;AACE,aAAOE,KAAP;;AAEF;AACE,aAAOA,KAAP;AARJ;AAUD;;AAED,MAAMI,QAAQ,GAAGT,eAAe,CAAC;AAC/BI,EAAAA,MAD+B;AAE/BI,EAAAA;AAF+B,CAAD,CAAhC;AAOA,MAAME,IAAI,GAAGV,eAAe,CAAC;AAC3BS,EAAAA,QAD2B;AAE3BE,EAAAA;AAF2B,CAAD,CAA5B;AAKA,OAAO,MAAMC,WAAW,GAAGZ,eAAe,CAAC;AACzCU,EAAAA;AADyC,CAAD,CAAnC;AAIP,eAAeE,WAAf","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport { ANSWER_QUESTION, START_TIMER, END_TIMER } from \"./actions\";\nimport { initialState } from \"./initialState\";\n\nfunction answer(state: string = \"\", { type, payload }) {\n  switch (type) {\n    case ANSWER_QUESTION:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nfunction time(state: number = 0, { type, payload }) {\n  switch (type) {\n    case START_TIMER:\n      return state;\n\n    case END_TIMER:\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nconst question = combineReducers({\n  answer,\n  time,\n});\n\n\n\nconst exam = combineReducers({\n  question,\n  current,\n});\n\nexport const rootReducer = combineReducers({\n  exam,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}