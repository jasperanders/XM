{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nimport { nextQuestion } from \"../../redux/actions\";\nexport default function Timer({\n  questionId,\n  currentExam,\n  getValues\n}) {\n  const dispatch = useDispatch();\n  const answer = useSelector(state => state.answerTable.byId[questionId]);\n  const question = useSelector(state => state.questionTable.byId[questionId]);\n  const {\n    timeStart\n  } = answer;\n  const {\n    timeLimitMs\n  } = question;\n  const now = Date.now();\n  const [timeLeft, setTimeLeft] = useState((timeStart ? Math.round(timeLimitMs - (now - timeStart)) : timeLimitMs) / 1000);\n  useEffect(() => {\n    setTimeLeft(timeLimitMs / 1000);\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const timeStart = store.getState().answerTable.byId[questionId].timeStart;\n      const newTimeLeft = Math.round((timeLimitMs - (now - timeStart)) / 1000);\n\n      if (newTimeLeft > -1) {\n        setTimeLeft(newTimeLeft);\n      } else {\n        anser;\n        dispatch(nextQuestion({\n          currentExam\n        }));\n        clearInterval(interval);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId, currentExam, dispatch, timeLimitMs, questionId]);\n  return /*#__PURE__*/React.createElement(Heading, {\n    as: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }, timeLeft);\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/timer/Timer.tsx"],"names":["React","useEffect","useState","useSelector","useDispatch","store","Heading","nextQuestion","Timer","questionId","currentExam","getValues","dispatch","answer","state","answerTable","byId","question","questionTable","timeStart","timeLimitMs","now","Date","timeLeft","setTimeLeft","Math","round","interval","setInterval","getState","newTimeLeft","anser","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,WAAd;AAA2BC,EAAAA;AAA3B,CAAf,EAAuD;AACpE,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,MAAM,GAAGV,WAAW,CACvBW,KAAD,IAAuBA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,CAAuBP,UAAvB,CADC,CAA1B;AAGA,QAAMQ,QAAQ,GAAGd,WAAW,CACzBW,KAAD,IAAuBA,KAAK,CAACI,aAAN,CAAoBF,IAApB,CAAyBP,UAAzB,CADG,CAA5B;AAIA,QAAM;AAAEU,IAAAA;AAAF,MAAgBN,MAAtB;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkBH,QAAxB;AACA,QAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CACtC,CAACiB,SAAS,GAAGM,IAAI,CAACC,KAAL,CAAWN,WAAW,IAAIC,GAAG,GAAGF,SAAV,CAAtB,CAAH,GAAiDC,WAA3D,IACE,IAFoC,CAAxC;AAKAnB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,WAAW,CAACJ,WAAW,GAAG,IAAf,CAAX;AACA,UAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAMP,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,YAAMF,SAAS,GAAGd,KAAK,CAACwB,QAAN,GAAiBd,WAAjB,CAA6BC,IAA7B,CAAkCP,UAAlC,EAA8CU,SAAhE;AACA,YAAMW,WAAW,GAAGL,IAAI,CAACC,KAAL,CAAW,CAACN,WAAW,IAAIC,GAAG,GAAGF,SAAV,CAAZ,IAAoC,IAA/C,CAApB;;AACA,UAAIW,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpBN,QAAAA,WAAW,CAACM,WAAD,CAAX;AACD,OAFD,MAEO;AACLC,QAAAA,KAAK;AACLnB,QAAAA,QAAQ,CAACL,YAAY,CAAC;AAAEG,UAAAA;AAAF,SAAD,CAAb,CAAR;AACAsB,QAAAA,aAAa,CAACL,QAAD,CAAb;AACD;AACF,KAX2B,EAWzB,IAXyB,CAA5B;AAaA,WAAO,MAAM;AACXK,MAAAA,aAAa,CAACL,QAAD,CAAb;AACD,KAFD;AAGD,GAlBQ,EAkBN,CAACV,QAAQ,CAACR,UAAV,EAAsBC,WAAtB,EAAmCE,QAAnC,EAA6CQ,WAA7C,EAA0DX,UAA1D,CAlBM,CAAT;AAoBA,sBAAO,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBc,QAApB,CAAP;AACD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { store } from \"../../index\";\nimport { Heading } from \"theme-ui\";\nimport { TRootState } from \"../../types/examTypes\";\nimport { nextQuestion } from \"../../redux/actions\";\n\nexport default function Timer({ questionId, currentExam, getValues }) {\n  const dispatch = useDispatch();\n  const answer = useSelector(\n    (state: TRootState) => state.answerTable.byId[questionId]\n  );\n  const question = useSelector(\n    (state: TRootState) => state.questionTable.byId[questionId]\n  );\n\n  const { timeStart } = answer;\n  const { timeLimitMs } = question;\n  const now = Date.now();\n\n  const [timeLeft, setTimeLeft] = useState(\n    (timeStart ? Math.round(timeLimitMs - (now - timeStart)) : timeLimitMs) /\n      1000\n  );\n\n  useEffect(() => {\n    setTimeLeft(timeLimitMs / 1000);\n    const interval = setInterval(() => {\n      const now = Date.now();\n      const timeStart = store.getState().answerTable.byId[questionId].timeStart;\n      const newTimeLeft = Math.round((timeLimitMs - (now - timeStart)) / 1000);\n      if (newTimeLeft > -1) {\n        setTimeLeft(newTimeLeft);\n      } else {\n        anser;\n        dispatch(nextQuestion({ currentExam }));\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [question.questionId, currentExam, dispatch, timeLimitMs, questionId]);\n\n  return <Heading as={\"h3\"}>{timeLeft}</Heading>;\n}\n"]},"metadata":{},"sourceType":"module"}