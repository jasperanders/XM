{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/questionType/MultipleChoice.tsx\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { v4 } from \"uuid\";\nimport { nextQuestion, answerMultipleChoiceQuestion, setAnswerEndTime } from \"../../../redux/actions\";\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  watch,\n  errors,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n  currentAnswerAction\n}) {\n  const [answerAction, setAnswerAction] = useState(() => {});\n  const dispatch = useDispatch();\n  const questionBody = useSelector(state => state.questionBodyMultipleChoiceTable.byId[question.questionId]);\n  const currentExam = useSelector(state => state.examTable); // const currentExam = useSelector((state: TRootState) => state.examTable);\n\n  const {\n    currentExamId,\n    currentQuestionId\n  } = useSelector(state => state.examState);\n  useEffect(() => {\n    const selectedAnswers = getValues();\n    return answerMultipleChoiceQuestion({\n      questionId: currentQuestionId,\n      selectedAnswers\n    });\n  }); // const watchAll = watch(\"multipleChoice\", []);\n\n  const {\n    possibleAnswers\n  } = questionBody;\n\n  const newAnswerAction = () => {\n    const selectedAnswers = getValues();\n    return answerMultipleChoiceQuestion({\n      questionId: currentQuestionId,\n      selectedAnswers\n    });\n  };\n\n  if (newAnswerAction === currentAnswerAction) {\n    setCurrentAnswerAction(newAnswerAction);\n  }\n\n  const onSubmit = data => {\n    console.log(data);\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      if (data[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    dispatch(answerMultipleChoiceQuestion({\n      questionId: currentQuestionId,\n      selectedAnswers\n    }));\n    dispatch(setAnswerEndTime({\n      questionId: currentQuestionId\n    }));\n    dispatch(nextQuestion({\n      currentExam: currentExam.byId[currentExamId]\n    }));\n  }; // console.log(watchAll);\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      defaultChecked: false,\n      name: `multipleChoice[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }), possibleAnswer));\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Save and Next Question\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/questionType/MultipleChoice.tsx"],"names":["React","useState","useDispatch","useSelector","Label","Checkbox","Button","v4","nextQuestion","answerMultipleChoiceQuestion","setAnswerEndTime","MultipleChoiceQuestion","register","handleSubmit","watch","errors","question","getValues","setCurrentAnswerAction","currentAnswerAction","answerAction","setAnswerAction","dispatch","questionBody","state","questionBodyMultipleChoiceTable","byId","questionId","currentExam","examTable","currentExamId","currentQuestionId","examState","useEffect","selectedAnswers","possibleAnswers","newAnswerAction","onSubmit","data","console","log","forEach","el","i","push","map","possibleAnswer","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { v4 } from \"uuid\";\nimport {\n  nextQuestion,\n  answerMultipleChoiceQuestion,\n  setAnswerEndTime,\n} from \"../../../redux/actions\";\n\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  watch,\n  errors,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n  currentAnswerAction,\n}) {\n  const [answerAction, setAnswerAction] = useState(() => {});\n  const dispatch = useDispatch();\n  const questionBody = useSelector(\n    (state: TRootState) =>\n      state.questionBodyMultipleChoiceTable.byId[question.questionId]\n  );\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n  // const currentExam = useSelector((state: TRootState) => state.examTable);\n  const { currentExamId, currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n\n  useEffect(() => {\n    const selectedAnswers = getValues();\n    return answerMultipleChoiceQuestion({\n      questionId: currentQuestionId,\n      selectedAnswers,\n    });\n  })\n  // const watchAll = watch(\"multipleChoice\", []);\n  const { possibleAnswers } = questionBody;\n\n\n\n  const newAnswerAction = () => {\n    const selectedAnswers = getValues();\n    return answerMultipleChoiceQuestion({\n      questionId: currentQuestionId,\n      selectedAnswers,\n    });\n  };\n\n  if (newAnswerAction === currentAnswerAction) {\n    setCurrentAnswerAction(newAnswerAction);\n  }\n\n  const onSubmit = (data) => {\n    console.log(data);\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      if (data[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n\n    dispatch(\n      answerMultipleChoiceQuestion({\n        questionId: currentQuestionId,\n        selectedAnswers,\n      })\n    );\n    dispatch(setAnswerEndTime({ questionId: currentQuestionId }));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n  // console.log(watchAll);\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`multipleChoice[${index}]`}\n                ref={register}\n              />\n              {possibleAnswer}\n            </Label>\n          </div>\n        );\n      })}\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}