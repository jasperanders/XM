{"ast":null,"code":"import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport { ANSWER_FREE_TEXT_QUESTION, SET_QUESTION_START_TIME, SET_QUESTION_END_TIME, NEXT_QUESTION, SET_APP_TIMER, COUNT_DOWN_APP_TIMER } from \"./actions\";\nimport { initialAppState, initialExam, initialQuestions } from \"./initialState\";\n\nfunction questions(state = initialQuestions, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n        question.timeExpired = true;\n      });\n\n    case SET_QUESTION_START_TIME:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n\n        if (question.timeStart === null) {\n          question.timeStart = Date.now();\n        }\n      });\n\n    case SET_QUESTION_END_TIME:\n      return produce(state, draftState => {\n        let question = draftState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n        question.timeUsed = question.timeEnd - question.timeStart;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction exams(state = initialExam, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, draft => {\n        const {\n          id,\n          currentQuestionIndex\n        } = draft.currentExam;\n        const examLength = draft.byId[id].questionsById.length;\n\n        if (exam) {\n          draft.currentExam.currentQuestionIndex += 1;\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction appState(state = initialAppState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case SET_APP_TIMER:\n      return produce(state, draftState => {\n        draftState.currentTime = payload.timeLimit;\n        return draftState;\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, draftState => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  exams,\n  questions,\n  appState\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/redux/reducers.ts"],"names":["combineReducers","produce","ANSWER_FREE_TEXT_QUESTION","SET_QUESTION_START_TIME","SET_QUESTION_END_TIME","NEXT_QUESTION","SET_APP_TIMER","COUNT_DOWN_APP_TIMER","initialAppState","initialExam","initialQuestions","questions","state","type","payload","draftState","question","byId","questionId","answerText","timeExpired","timeStart","Date","now","timeEnd","timeUsed","exams","draft","id","currentQuestionIndex","currentExam","examLength","questionsById","length","exam","appState","currentTime","timeLimit","countDownBy","console","log","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"@reduxjs/toolkit\";\nimport produce from \"immer\";\nimport {\n  ANSWER_FREE_TEXT_QUESTION,\n  SET_QUESTION_START_TIME,\n  SET_QUESTION_END_TIME,\n  PREVIOUS_QUESTION,\n  NEXT_QUESTION,\n  SET_APP_TIMER,\n  COUNT_DOWN_APP_TIMER,\n} from \"./actions\";\nimport { initialAppState, initialExam, initialQuestions } from \"./initialState\";\nimport { store } from \"..\";\nimport { useDispatch } from \"react-redux\";\n\nfunction questions(state = initialQuestions, { type, payload }) {\n  switch (type) {\n    case ANSWER_FREE_TEXT_QUESTION:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        question.answerText = payload.answerText;\n        question.timeExpired = true;\n      });\n\n    case SET_QUESTION_START_TIME:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        if (question.timeStart === null) {\n          question.timeStart = Date.now();\n        }\n      });\n    case SET_QUESTION_END_TIME:\n      return produce(state, (draftState) => {\n        let question = draftState.byId[payload.questionId];\n        question.timeEnd = Date.now();\n        question.timeUsed = question.timeEnd - question.timeStart;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction exams(state = initialExam, { type, payload }) {\n  switch (type) {\n    case NEXT_QUESTION:\n      return produce(state, (draft) => {\n        const { id, currentQuestionIndex } = draft.currentExam;\n        const examLength = draft.byId[id].questionsById.length;\n        if (exam) {\n          draft.currentExam.currentQuestionIndex += 1;\n        }\n      });\n    default:\n      return state;\n  }\n}\n\nfunction appState(state = initialAppState, { type, payload }) {\n  switch (type) {\n    case SET_APP_TIMER:\n      return produce(state, (draftState) => {\n        draftState.currentTime = payload.timeLimit;\n        return draftState;\n      });\n\n    case COUNT_DOWN_APP_TIMER:\n      return produce(state, (draftState) => {\n        if (draftState.currentTime > 0) {\n          draftState.currentTime -= payload.countDownBy;\n          return draftState;\n        } else {\n          console.log(\"TimeOut\");\n        }\n      });\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  exams,\n  questions,\n  appState,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}