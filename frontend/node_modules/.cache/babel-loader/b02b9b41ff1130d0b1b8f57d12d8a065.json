{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/questionType/MultipleChoice.tsx\";\nimport React, { useEffect } from \"react\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { v4 } from \"uuid\";\nimport { nextQuestion, answerMultipleChoiceQuestion, setAnswerEndTime } from \"../../../redux/actions\";\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction\n}) {\n  /*\n  const dispatch = useDispatch();\n   const questionBody = useSelector(\n    (state: TRootState) =>\n      state.questionBodyMultipleChoiceTable.byId[question.questionId]\n  );\n   const currentExam = useSelector((state: TRootState) => state.examTable);\n   const { currentExamId, currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n   /**\n   *  miscellaneous functions\n   */\n  const makeSelectedAnswers = data => {\n    const {\n      multipleChoice\n    } = data;\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      console.log(multipleChoice[i]);\n      console.log(el);\n\n      if (data.multipleChoice[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    console.log(selectedAnswers);\n    return selectedAnswers;\n  };\n  /**\n   * Effect Hooks\n   */\n\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({\n          nest: true\n        }));\n        console.log(selectedAnswers);\n        console.log(\"selectedAnswers\");\n        return answerMultipleChoiceQuestion({\n          questionId: currentQuestionId,\n          selectedAnswers\n        });\n      };\n    });\n  }, [question]); // Variable Destructuring\n\n  const {\n    possibleAnswers\n  } = questionBody;\n\n  const onSubmit = data => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(answerMultipleChoiceQuestion({\n      questionId: currentQuestionId,\n      selectedAnswers\n    }));\n    dispatch(setAnswerEndTime({\n      questionId: currentQuestionId\n    }));\n    dispatch(nextQuestion({\n      currentExam: currentExam.byId[currentExamId]\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, possibleAnswers.map((possibleAnswer, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: v4(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      defaultChecked: false,\n      name: `multipleChoice[${index}]`,\n      ref: register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }), possibleAnswer));\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Save and Next Question\"));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/questionType/MultipleChoice.tsx"],"names":["React","useEffect","Label","Checkbox","Button","v4","nextQuestion","answerMultipleChoiceQuestion","setAnswerEndTime","MultipleChoiceQuestion","register","handleSubmit","question","getValues","setCurrentAnswerAction","makeSelectedAnswers","data","multipleChoice","selectedAnswers","possibleAnswers","forEach","el","i","console","log","push","nest","questionId","currentQuestionId","questionBody","onSubmit","dispatch","currentExam","byId","currentExamId","map","possibleAnswer","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Label, Checkbox, Button } from \"theme-ui\";\nimport { TRootState } from \"../../../types/examTypes\";\nimport { v4 } from \"uuid\";\nimport {\n  nextQuestion,\n  answerMultipleChoiceQuestion,\n  setAnswerEndTime,\n} from \"../../../redux/actions\";\n\nexport default function MultipleChoiceQuestion({\n  register,\n  handleSubmit,\n  question,\n  getValues,\n  setCurrentAnswerAction,\n}) {\n  /*\n  const dispatch = useDispatch();\n\n  const questionBody = useSelector(\n    (state: TRootState) =>\n      state.questionBodyMultipleChoiceTable.byId[question.questionId]\n  );\n\n  const currentExam = useSelector((state: TRootState) => state.examTable);\n\n  const { currentExamId, currentQuestionId } = useSelector(\n    (state: TRootState) => state.examState\n  );\n\n  /**\n   *  miscellaneous functions\n   */\n\n  const makeSelectedAnswers = (data) => {\n    const { multipleChoice } = data;\n    let selectedAnswers = [];\n    possibleAnswers.forEach((el, i) => {\n      console.log(multipleChoice[i]);\n      console.log(el);\n      if (data.multipleChoice[i]) {\n        selectedAnswers.push(el);\n      }\n    });\n    console.log(selectedAnswers);\n    return selectedAnswers;\n  };\n\n  /**\n   * Effect Hooks\n   */\n\n  useEffect(() => {\n    setCurrentAnswerAction(() => {\n      return () => {\n        // {nested: true} returns values as if they were submitted\n        const selectedAnswers = makeSelectedAnswers(getValues({ nest: true }));\n        console.log(selectedAnswers);\n        console.log(\"selectedAnswers\");\n        return answerMultipleChoiceQuestion({\n          questionId: currentQuestionId,\n          selectedAnswers,\n        });\n      };\n    });\n  }, [question]);\n\n  // Variable Destructuring\n\n  const { possibleAnswers } = questionBody;\n\n  const onSubmit = (data) => {\n    const selectedAnswers = makeSelectedAnswers(data);\n    dispatch(\n      answerMultipleChoiceQuestion({\n        questionId: currentQuestionId,\n        selectedAnswers,\n      })\n    );\n    dispatch(setAnswerEndTime({ questionId: currentQuestionId }));\n    dispatch(nextQuestion({ currentExam: currentExam.byId[currentExamId] }));\n  };\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {possibleAnswers.map((possibleAnswer, index) => {\n        return (\n          <div key={v4()}>\n            <Label>\n              {/* <Controller as={Checkbox} name={multipleChoiceFormName} /> */}\n              <Checkbox\n                defaultChecked={false}\n                name={`multipleChoice[${index}]`}\n                ref={register}\n              />\n              {possibleAnswer}\n            </Label>\n          </div>\n        );\n      })}\n      <Button type=\"submit\">Save and Next Question</Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}