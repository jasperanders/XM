{"ast":null,"code":"var _jsxFileName = \"/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { Heading } from \"theme-ui\";\nimport Timer from \"../timer/Timer\";\nimport { setAnswerStartTime } from \"../../redux/actions\";\nexport default function Question({\n  question\n}) {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset\n  } = useForm();\n  const {\n    questionId,\n    questionType,\n    title,\n    text\n  } = question;\n  useEffect(() => {\n    dispatch(setAnswerStartTime({\n      questionId\n    }));\n    reset();\n  }, [questionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return /*#__PURE__*/React.createElement(FreeTextQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          question: question,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 11\n          }\n        });\n\n      case \"multipleChoice\":\n        return /*#__PURE__*/React.createElement(MultipleChoiceQuestion, {\n          register: register,\n          handleSubmit: handleSubmit,\n          watch: watch,\n          errors: errors,\n          question: question,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 16\n          }\n        }, \"Something went wrong\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, text), questionBody(), /*#__PURE__*/React.createElement(Timer, {\n    questionId: question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/jasper/Documents/Uni/BachelorArbeit/XM/src/components/question/Question.tsx"],"names":["React","useEffect","useDispatch","useForm","FreeTextQuestion","MultipleChoiceQuestion","Heading","Timer","setAnswerStartTime","Question","question","dispatch","register","handleSubmit","watch","errors","reset","questionId","questionType","title","text","questionBody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,sBAAP,MAAmC,+BAAnC;AAEA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAwC;AACrD,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA;AAAzC,MAAmDb,OAAO,EAAhE;AAEA,QAAM;AAAEc,IAAAA,UAAF;AAAcC,IAAAA,YAAd;AAA4BC,IAAAA,KAA5B;AAAmCC,IAAAA;AAAnC,MAA4CV,QAAlD;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAACH,kBAAkB,CAAC;AAAES,MAAAA;AAAF,KAAD,CAAnB,CAAR;AACAD,IAAAA,KAAK;AACN,GAHQ,EAGN,CAACC,UAAD,CAHM,CAAT;;AAKA,QAAMI,YAAY,GAAG,MAAM;AACzB,YAAQH,YAAR;AACE,WAAK,UAAL;AACE,4BACE,oBAAC,gBAAD;AACE,UAAA,QAAQ,EAAEN,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAEL,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF,WAAK,gBAAL;AACE,4BACE,oBAAC,sBAAD;AACE,UAAA,QAAQ,EAAEE,QADZ;AAEE,UAAA,YAAY,EAAEC,YAFhB;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,QAAQ,EAAEL,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASF;AACE,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AAtBJ;AAwBD,GAzBD;;AA2BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBS,KAApB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAJ,CAFF,EAGGC,YAAY,EAHf,eAIE,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEX,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport FreeTextQuestion from \"./questionType/FreeTextQuestion\";\nimport MultipleChoiceQuestion from \"./questionType/MultipleChoice\";\nimport { TQuestion } from \"../../types/examTypes\";\nimport { Heading } from \"theme-ui\";\n\nimport Timer from \"../timer/Timer\";\nimport { setAnswerStartTime } from \"../../redux/actions\";\n\nexport default function Question({ question }: TProps) {\n  const dispatch = useDispatch();\n\n  const { register, handleSubmit, watch, errors, reset } = useForm();\n\n  const { questionId, questionType, title, text } = question;\n\n  useEffect(() => {\n    dispatch(setAnswerStartTime({ questionId }));\n    reset();\n  }, [questionId]);\n\n  const questionBody = () => {\n    switch (questionType) {\n      case \"freeText\":\n        return (\n          <FreeTextQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            question={question}\n          />\n        );\n      case \"multipleChoice\":\n        return (\n          <MultipleChoiceQuestion\n            register={register}\n            handleSubmit={handleSubmit}\n            watch={watch}\n            errors={errors}\n            question={question}\n          />\n        );\n      default:\n        return <div>Something went wrong</div>;\n    }\n  };\n\n  return (\n    <div>\n      <Heading as={\"h2\"}>{title}</Heading>\n      <p>{text}</p>\n      {questionBody()}\n      <Timer questionId={question}></Timer>\n    </div>\n  );\n}\n\ninterface TProps {\n  question: TQuestion;\n}\n"]},"metadata":{},"sourceType":"module"}